

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Sep 10 07:32:29 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F1938
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK4,global,class=CODE,delta=2,noexec
     7                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
     8                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    18                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    19                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    20                           	psect	stringtext13,global,class=STRCODE,delta=2,noexec
    21                           	psect	stringtext14,global,class=STRCODE,delta=2,noexec
    22                           	psect	stringtext15,global,class=STRCODE,delta=2,noexec
    23                           	psect	stringtext16,global,class=STRCODE,delta=2,noexec
    24                           	psect	stringtext17,global,class=STRCODE,delta=2,noexec
    25                           	psect	stringtext18,global,class=STRCODE,delta=2,noexec
    26                           	psect	stringtext19,global,class=STRCODE,delta=2,noexec
    27                           	psect	stringtext20,global,class=STRCODE,delta=2,noexec
    28                           	psect	stringtext21,global,class=STRCODE,delta=2,noexec
    29                           	psect	stringtext22,global,class=STRCODE,delta=2,noexec
    30                           	psect	stringtext23,global,class=STRCODE,delta=2,noexec
    31                           	psect	stringtext24,global,class=STRCODE,delta=2,noexec
    32                           	psect	stringtext25,global,class=STRCODE,delta=2,noexec
    33                           	psect	stringtext26,global,class=STRCODE,delta=2,noexec
    34                           	psect	stringtext27,global,class=STRCODE,delta=2,noexec
    35                           	psect	stringtext28,global,class=STRCODE,delta=2,noexec
    36                           	psect	stringtext29,global,class=STRCODE,delta=2,noexec
    37                           	psect	stringtext30,global,class=STRCODE,delta=2,noexec
    38                           	psect	stringtext31,global,class=STRCODE,delta=2,noexec
    39                           	psect	cinit,global,class=CODE,merge=1,delta=2
    40                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2,noexec
    41                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    42                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    43                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    44                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    45                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    46                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,noexec
    47                           	psect	inittext,global,class=CODE,delta=2
    48                           	psect	clrtext,global,class=CODE,delta=2
    49                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    50                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    51                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    52                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    53                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    54                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    55                           	psect	text1,local,class=CODE,merge=1,delta=2
    56                           	psect	text2,local,class=CODE,merge=1,delta=2
    57                           	psect	text3,local,class=CODE,merge=1,delta=2
    58                           	psect	text4,local,class=CODE,merge=1,delta=2
    59                           	psect	text5,local,class=CODE,merge=1,delta=2
    60                           	psect	text6,local,class=CODE,merge=1,delta=2
    61                           	psect	text7,local,class=CODE,merge=1,delta=2
    62                           	psect	text8,local,class=CODE,merge=1,delta=2
    63                           	psect	text9,local,class=CODE,merge=1,delta=2
    64                           	psect	text10,local,class=CODE,merge=1,delta=2
    65                           	psect	text11,local,class=CODE,merge=1,delta=2
    66                           	psect	text12,local,class=CODE,merge=1,delta=2
    67                           	psect	text13,local,class=CODE,merge=1,delta=2
    68                           	psect	text14,local,class=CODE,merge=1,delta=2
    69                           	psect	text15,local,class=CODE,merge=1,delta=2
    70                           	psect	text16,local,class=CODE,merge=1,delta=2
    71                           	psect	text17,local,class=CODE,merge=1,delta=2
    72                           	psect	text18,local,class=CODE,merge=1,delta=2
    73                           	psect	text19,local,class=CODE,merge=1,delta=2
    74                           	psect	text20,local,class=CODE,merge=1,delta=2
    75                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text22,local,class=CODE,merge=1,delta=2
    77                           	psect	text23,local,class=CODE,merge=1,delta=2
    78                           	psect	text24,local,class=CODE,merge=1,delta=2
    79                           	psect	text25,local,class=CODE,merge=1,delta=2
    80                           	psect	text26,local,class=CODE,merge=1,delta=2
    81                           	psect	text27,local,class=CODE,merge=1,delta=2
    82                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    87                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    90                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    91                           	psect	text37,local,class=CODE,merge=1,delta=2
    92                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text39,local,class=CODE,merge=1,delta=2
    94                           	psect	text40,local,class=CODE,merge=1,delta=2
    95                           	psect	text41,local,class=CODE,merge=1,delta=2
    96                           	psect	text42,local,class=CODE,merge=1,delta=2
    97                           	psect	text43,local,class=CODE,merge=1,delta=2
    98                           	psect	text44,local,class=CODE,merge=1,delta=2
    99                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
   100                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
   101                           	psect	text47,local,class=CODE,merge=1,delta=2
   102                           	psect	text48,local,class=CODE,merge=1,delta=2
   103                           	psect	text49,local,class=CODE,merge=1,delta=2
   104                           	psect	text50,local,class=CODE,merge=1,delta=2
   105                           	psect	text51,local,class=CODE,merge=1,delta=2
   106                           	psect	text52,local,class=CODE,merge=1,delta=2
   107                           	psect	intentry,global,class=CODE,delta=2
   108                           	psect	text54,local,class=CODE,merge=1,delta=2
   109                           	psect	text55,local,class=CODE,merge=1,delta=2
   110                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   111                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   112                           	dabs	1,0x7E,2
   113  0000                     
   114                           ; Version 2.40
   115                           ; Generated 17/11/2021 GMT
   116                           ; 
   117                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   118                           ; All rights reserved.
   119                           ; 
   120                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   121                           ; 
   122                           ; Redistribution and use in source and binary forms, with or without modification, are
   123                           ; permitted provided that the following conditions are met:
   124                           ; 
   125                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   126                           ;        conditions and the following disclaimer.
   127                           ; 
   128                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   129                           ;        of conditions and the following disclaimer in the documentation and/or other
   130                           ;        materials provided with the distribution. Publication is not required when
   131                           ;        this file is used in an embedded application.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC16F1938 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  0010                     	;# 
   165  0011                     	;# 
   166  0012                     	;# 
   167  0013                     	;# 
   168  0015                     	;# 
   169  0016                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001C                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0093                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009A                     	;# 
   192  009B                     	;# 
   193  009B                     	;# 
   194  009C                     	;# 
   195  009D                     	;# 
   196  009E                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  0110                     	;# 
   201  0111                     	;# 
   202  0112                     	;# 
   203  0113                     	;# 
   204  0114                     	;# 
   205  0115                     	;# 
   206  0116                     	;# 
   207  0117                     	;# 
   208  0118                     	;# 
   209  0119                     	;# 
   210  011A                     	;# 
   211  011B                     	;# 
   212  011D                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0193                     	;# 
   221  0194                     	;# 
   222  0195                     	;# 
   223  0196                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0213                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0294                     	;# 
   250  0295                     	;# 
   251  0295                     	;# 
   252  0296                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  029B                     	;# 
   258  029C                     	;# 
   259  029C                     	;# 
   260  029D                     	;# 
   261  029E                     	;# 
   262  029F                     	;# 
   263  0311                     	;# 
   264  0311                     	;# 
   265  0312                     	;# 
   266  0313                     	;# 
   267  0314                     	;# 
   268  0315                     	;# 
   269  0315                     	;# 
   270  0316                     	;# 
   271  0318                     	;# 
   272  0318                     	;# 
   273  0319                     	;# 
   274  031A                     	;# 
   275  031C                     	;# 
   276  031C                     	;# 
   277  031D                     	;# 
   278  031E                     	;# 
   279  0394                     	;# 
   280  0395                     	;# 
   281  0396                     	;# 
   282  0415                     	;# 
   283  0416                     	;# 
   284  0417                     	;# 
   285  041C                     	;# 
   286  041D                     	;# 
   287  041E                     	;# 
   288  0791                     	;# 
   289  0792                     	;# 
   290  0793                     	;# 
   291  0794                     	;# 
   292  0795                     	;# 
   293  0798                     	;# 
   294  0799                     	;# 
   295  07A0                     	;# 
   296  07A1                     	;# 
   297  07A3                     	;# 
   298  07A4                     	;# 
   299  07A6                     	;# 
   300  07A7                     	;# 
   301  07A9                     	;# 
   302  07AA                     	;# 
   303  0FE4                     	;# 
   304  0FE5                     	;# 
   305  0FE6                     	;# 
   306  0FE7                     	;# 
   307  0FE8                     	;# 
   308  0FE9                     	;# 
   309  0FEA                     	;# 
   310  0FEB                     	;# 
   311  0FED                     	;# 
   312  0FEE                     	;# 
   313  0FEF                     	;# 
   314  0000                     	;# 
   315  0001                     	;# 
   316  0002                     	;# 
   317  0003                     	;# 
   318  0004                     	;# 
   319  0005                     	;# 
   320  0006                     	;# 
   321  0007                     	;# 
   322  0008                     	;# 
   323  0009                     	;# 
   324  000A                     	;# 
   325  000B                     	;# 
   326  000C                     	;# 
   327  000D                     	;# 
   328  000E                     	;# 
   329  0010                     	;# 
   330  0011                     	;# 
   331  0012                     	;# 
   332  0013                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009B                     	;# 
   359  009C                     	;# 
   360  009D                     	;# 
   361  009E                     	;# 
   362  010C                     	;# 
   363  010D                     	;# 
   364  010E                     	;# 
   365  0110                     	;# 
   366  0111                     	;# 
   367  0112                     	;# 
   368  0113                     	;# 
   369  0114                     	;# 
   370  0115                     	;# 
   371  0116                     	;# 
   372  0117                     	;# 
   373  0118                     	;# 
   374  0119                     	;# 
   375  011A                     	;# 
   376  011B                     	;# 
   377  011D                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  0191                     	;# 
   381  0191                     	;# 
   382  0192                     	;# 
   383  0193                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0199                     	;# 
   390  019A                     	;# 
   391  019B                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019C                     	;# 
   396  019C                     	;# 
   397  019D                     	;# 
   398  019E                     	;# 
   399  019F                     	;# 
   400  020D                     	;# 
   401  0210                     	;# 
   402  0211                     	;# 
   403  0212                     	;# 
   404  0213                     	;# 
   405  0214                     	;# 
   406  0215                     	;# 
   407  0215                     	;# 
   408  0216                     	;# 
   409  0217                     	;# 
   410  0291                     	;# 
   411  0291                     	;# 
   412  0292                     	;# 
   413  0293                     	;# 
   414  0294                     	;# 
   415  0295                     	;# 
   416  0295                     	;# 
   417  0296                     	;# 
   418  0298                     	;# 
   419  0298                     	;# 
   420  0299                     	;# 
   421  029A                     	;# 
   422  029B                     	;# 
   423  029C                     	;# 
   424  029C                     	;# 
   425  029D                     	;# 
   426  029E                     	;# 
   427  029F                     	;# 
   428  0311                     	;# 
   429  0311                     	;# 
   430  0312                     	;# 
   431  0313                     	;# 
   432  0314                     	;# 
   433  0315                     	;# 
   434  0315                     	;# 
   435  0316                     	;# 
   436  0318                     	;# 
   437  0318                     	;# 
   438  0319                     	;# 
   439  031A                     	;# 
   440  031C                     	;# 
   441  031C                     	;# 
   442  031D                     	;# 
   443  031E                     	;# 
   444  0394                     	;# 
   445  0395                     	;# 
   446  0396                     	;# 
   447  0415                     	;# 
   448  0416                     	;# 
   449  0417                     	;# 
   450  041C                     	;# 
   451  041D                     	;# 
   452  041E                     	;# 
   453  0791                     	;# 
   454  0792                     	;# 
   455  0793                     	;# 
   456  0794                     	;# 
   457  0795                     	;# 
   458  0798                     	;# 
   459  0799                     	;# 
   460  07A0                     	;# 
   461  07A1                     	;# 
   462  07A3                     	;# 
   463  07A4                     	;# 
   464  07A6                     	;# 
   465  07A7                     	;# 
   466  07A9                     	;# 
   467  07AA                     	;# 
   468  0FE4                     	;# 
   469  0FE5                     	;# 
   470  0FE6                     	;# 
   471  0FE7                     	;# 
   472  0FE8                     	;# 
   473  0FE9                     	;# 
   474  0FEA                     	;# 
   475  0FEB                     	;# 
   476  0FED                     	;# 
   477  0FEE                     	;# 
   478  0FEF                     	;# 
   479  0000                     	;# 
   480  0001                     	;# 
   481  0002                     	;# 
   482  0003                     	;# 
   483  0004                     	;# 
   484  0005                     	;# 
   485  0006                     	;# 
   486  0007                     	;# 
   487  0008                     	;# 
   488  0009                     	;# 
   489  000A                     	;# 
   490  000B                     	;# 
   491  000C                     	;# 
   492  000D                     	;# 
   493  000E                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0015                     	;# 
   499  0016                     	;# 
   500  0016                     	;# 
   501  0017                     	;# 
   502  0018                     	;# 
   503  0019                     	;# 
   504  001A                     	;# 
   505  001B                     	;# 
   506  001C                     	;# 
   507  001E                     	;# 
   508  001F                     	;# 
   509  008C                     	;# 
   510  008D                     	;# 
   511  008E                     	;# 
   512  0090                     	;# 
   513  0091                     	;# 
   514  0092                     	;# 
   515  0093                     	;# 
   516  0095                     	;# 
   517  0096                     	;# 
   518  0097                     	;# 
   519  0098                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009B                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  0110                     	;# 
   531  0111                     	;# 
   532  0112                     	;# 
   533  0113                     	;# 
   534  0114                     	;# 
   535  0115                     	;# 
   536  0116                     	;# 
   537  0117                     	;# 
   538  0118                     	;# 
   539  0119                     	;# 
   540  011A                     	;# 
   541  011B                     	;# 
   542  011D                     	;# 
   543  018C                     	;# 
   544  018D                     	;# 
   545  0191                     	;# 
   546  0191                     	;# 
   547  0192                     	;# 
   548  0193                     	;# 
   549  0193                     	;# 
   550  0193                     	;# 
   551  0194                     	;# 
   552  0195                     	;# 
   553  0196                     	;# 
   554  0199                     	;# 
   555  019A                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019C                     	;# 
   561  019C                     	;# 
   562  019D                     	;# 
   563  019E                     	;# 
   564  019F                     	;# 
   565  020D                     	;# 
   566  0210                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0294                     	;# 
   580  0295                     	;# 
   581  0295                     	;# 
   582  0296                     	;# 
   583  0298                     	;# 
   584  0298                     	;# 
   585  0299                     	;# 
   586  029A                     	;# 
   587  029B                     	;# 
   588  029C                     	;# 
   589  029C                     	;# 
   590  029D                     	;# 
   591  029E                     	;# 
   592  029F                     	;# 
   593  0311                     	;# 
   594  0311                     	;# 
   595  0312                     	;# 
   596  0313                     	;# 
   597  0314                     	;# 
   598  0315                     	;# 
   599  0315                     	;# 
   600  0316                     	;# 
   601  0318                     	;# 
   602  0318                     	;# 
   603  0319                     	;# 
   604  031A                     	;# 
   605  031C                     	;# 
   606  031C                     	;# 
   607  031D                     	;# 
   608  031E                     	;# 
   609  0394                     	;# 
   610  0395                     	;# 
   611  0396                     	;# 
   612  0415                     	;# 
   613  0416                     	;# 
   614  0417                     	;# 
   615  041C                     	;# 
   616  041D                     	;# 
   617  041E                     	;# 
   618  0791                     	;# 
   619  0792                     	;# 
   620  0793                     	;# 
   621  0794                     	;# 
   622  0795                     	;# 
   623  0798                     	;# 
   624  0799                     	;# 
   625  07A0                     	;# 
   626  07A1                     	;# 
   627  07A3                     	;# 
   628  07A4                     	;# 
   629  07A6                     	;# 
   630  07A7                     	;# 
   631  07A9                     	;# 
   632  07AA                     	;# 
   633  0FE4                     	;# 
   634  0FE5                     	;# 
   635  0FE6                     	;# 
   636  0FE7                     	;# 
   637  0FE8                     	;# 
   638  0FE9                     	;# 
   639  0FEA                     	;# 
   640  0FEB                     	;# 
   641  0FED                     	;# 
   642  0FEE                     	;# 
   643  0FEF                     	;# 
   644  0000                     	;# 
   645  0001                     	;# 
   646  0002                     	;# 
   647  0003                     	;# 
   648  0004                     	;# 
   649  0005                     	;# 
   650  0006                     	;# 
   651  0007                     	;# 
   652  0008                     	;# 
   653  0009                     	;# 
   654  000A                     	;# 
   655  000B                     	;# 
   656  000C                     	;# 
   657  000D                     	;# 
   658  000E                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0015                     	;# 
   664  0016                     	;# 
   665  0016                     	;# 
   666  0017                     	;# 
   667  0018                     	;# 
   668  0019                     	;# 
   669  001A                     	;# 
   670  001B                     	;# 
   671  001C                     	;# 
   672  001E                     	;# 
   673  001F                     	;# 
   674  008C                     	;# 
   675  008D                     	;# 
   676  008E                     	;# 
   677  0090                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0093                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0097                     	;# 
   684  0098                     	;# 
   685  0099                     	;# 
   686  009A                     	;# 
   687  009B                     	;# 
   688  009B                     	;# 
   689  009C                     	;# 
   690  009D                     	;# 
   691  009E                     	;# 
   692  010C                     	;# 
   693  010D                     	;# 
   694  010E                     	;# 
   695  0110                     	;# 
   696  0111                     	;# 
   697  0112                     	;# 
   698  0113                     	;# 
   699  0114                     	;# 
   700  0115                     	;# 
   701  0116                     	;# 
   702  0117                     	;# 
   703  0118                     	;# 
   704  0119                     	;# 
   705  011A                     	;# 
   706  011B                     	;# 
   707  011D                     	;# 
   708  018C                     	;# 
   709  018D                     	;# 
   710  0191                     	;# 
   711  0191                     	;# 
   712  0192                     	;# 
   713  0193                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  0199                     	;# 
   720  019A                     	;# 
   721  019B                     	;# 
   722  019B                     	;# 
   723  019B                     	;# 
   724  019B                     	;# 
   725  019C                     	;# 
   726  019C                     	;# 
   727  019D                     	;# 
   728  019E                     	;# 
   729  019F                     	;# 
   730  020D                     	;# 
   731  0210                     	;# 
   732  0211                     	;# 
   733  0212                     	;# 
   734  0213                     	;# 
   735  0214                     	;# 
   736  0215                     	;# 
   737  0215                     	;# 
   738  0216                     	;# 
   739  0217                     	;# 
   740  0291                     	;# 
   741  0291                     	;# 
   742  0292                     	;# 
   743  0293                     	;# 
   744  0294                     	;# 
   745  0295                     	;# 
   746  0295                     	;# 
   747  0296                     	;# 
   748  0298                     	;# 
   749  0298                     	;# 
   750  0299                     	;# 
   751  029A                     	;# 
   752  029B                     	;# 
   753  029C                     	;# 
   754  029C                     	;# 
   755  029D                     	;# 
   756  029E                     	;# 
   757  029F                     	;# 
   758  0311                     	;# 
   759  0311                     	;# 
   760  0312                     	;# 
   761  0313                     	;# 
   762  0314                     	;# 
   763  0315                     	;# 
   764  0315                     	;# 
   765  0316                     	;# 
   766  0318                     	;# 
   767  0318                     	;# 
   768  0319                     	;# 
   769  031A                     	;# 
   770  031C                     	;# 
   771  031C                     	;# 
   772  031D                     	;# 
   773  031E                     	;# 
   774  0394                     	;# 
   775  0395                     	;# 
   776  0396                     	;# 
   777  0415                     	;# 
   778  0416                     	;# 
   779  0417                     	;# 
   780  041C                     	;# 
   781  041D                     	;# 
   782  041E                     	;# 
   783  0791                     	;# 
   784  0792                     	;# 
   785  0793                     	;# 
   786  0794                     	;# 
   787  0795                     	;# 
   788  0798                     	;# 
   789  0799                     	;# 
   790  07A0                     	;# 
   791  07A1                     	;# 
   792  07A3                     	;# 
   793  07A4                     	;# 
   794  07A6                     	;# 
   795  07A7                     	;# 
   796  07A9                     	;# 
   797  07AA                     	;# 
   798  0FE4                     	;# 
   799  0FE5                     	;# 
   800  0FE6                     	;# 
   801  0FE7                     	;# 
   802  0FE8                     	;# 
   803  0FE9                     	;# 
   804  0FEA                     	;# 
   805  0FEB                     	;# 
   806  0FED                     	;# 
   807  0FEE                     	;# 
   808  0FEF                     	;# 
   809  0000                     	;# 
   810  0001                     	;# 
   811  0002                     	;# 
   812  0003                     	;# 
   813  0004                     	;# 
   814  0005                     	;# 
   815  0006                     	;# 
   816  0007                     	;# 
   817  0008                     	;# 
   818  0009                     	;# 
   819  000A                     	;# 
   820  000B                     	;# 
   821  000C                     	;# 
   822  000D                     	;# 
   823  000E                     	;# 
   824  0010                     	;# 
   825  0011                     	;# 
   826  0012                     	;# 
   827  0013                     	;# 
   828  0015                     	;# 
   829  0016                     	;# 
   830  0016                     	;# 
   831  0017                     	;# 
   832  0018                     	;# 
   833  0019                     	;# 
   834  001A                     	;# 
   835  001B                     	;# 
   836  001C                     	;# 
   837  001E                     	;# 
   838  001F                     	;# 
   839  008C                     	;# 
   840  008D                     	;# 
   841  008E                     	;# 
   842  0090                     	;# 
   843  0091                     	;# 
   844  0092                     	;# 
   845  0093                     	;# 
   846  0095                     	;# 
   847  0096                     	;# 
   848  0097                     	;# 
   849  0098                     	;# 
   850  0099                     	;# 
   851  009A                     	;# 
   852  009B                     	;# 
   853  009B                     	;# 
   854  009C                     	;# 
   855  009D                     	;# 
   856  009E                     	;# 
   857  010C                     	;# 
   858  010D                     	;# 
   859  010E                     	;# 
   860  0110                     	;# 
   861  0111                     	;# 
   862  0112                     	;# 
   863  0113                     	;# 
   864  0114                     	;# 
   865  0115                     	;# 
   866  0116                     	;# 
   867  0117                     	;# 
   868  0118                     	;# 
   869  0119                     	;# 
   870  011A                     	;# 
   871  011B                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  0191                     	;# 
   876  0191                     	;# 
   877  0192                     	;# 
   878  0193                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0199                     	;# 
   885  019A                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019C                     	;# 
   891  019C                     	;# 
   892  019D                     	;# 
   893  019E                     	;# 
   894  019F                     	;# 
   895  020D                     	;# 
   896  0210                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0291                     	;# 
   906  0291                     	;# 
   907  0292                     	;# 
   908  0293                     	;# 
   909  0294                     	;# 
   910  0295                     	;# 
   911  0295                     	;# 
   912  0296                     	;# 
   913  0298                     	;# 
   914  0298                     	;# 
   915  0299                     	;# 
   916  029A                     	;# 
   917  029B                     	;# 
   918  029C                     	;# 
   919  029C                     	;# 
   920  029D                     	;# 
   921  029E                     	;# 
   922  029F                     	;# 
   923  0311                     	;# 
   924  0311                     	;# 
   925  0312                     	;# 
   926  0313                     	;# 
   927  0314                     	;# 
   928  0315                     	;# 
   929  0315                     	;# 
   930  0316                     	;# 
   931  0318                     	;# 
   932  0318                     	;# 
   933  0319                     	;# 
   934  031A                     	;# 
   935  031C                     	;# 
   936  031C                     	;# 
   937  031D                     	;# 
   938  031E                     	;# 
   939  0394                     	;# 
   940  0395                     	;# 
   941  0396                     	;# 
   942  0415                     	;# 
   943  0416                     	;# 
   944  0417                     	;# 
   945  041C                     	;# 
   946  041D                     	;# 
   947  041E                     	;# 
   948  0791                     	;# 
   949  0792                     	;# 
   950  0793                     	;# 
   951  0794                     	;# 
   952  0795                     	;# 
   953  0798                     	;# 
   954  0799                     	;# 
   955  07A0                     	;# 
   956  07A1                     	;# 
   957  07A3                     	;# 
   958  07A4                     	;# 
   959  07A6                     	;# 
   960  07A7                     	;# 
   961  07A9                     	;# 
   962  07AA                     	;# 
   963  0FE4                     	;# 
   964  0FE5                     	;# 
   965  0FE6                     	;# 
   966  0FE7                     	;# 
   967  0FE8                     	;# 
   968  0FE9                     	;# 
   969  0FEA                     	;# 
   970  0FEB                     	;# 
   971  0FED                     	;# 
   972  0FEE                     	;# 
   973  0FEF                     	;# 
   974  0000                     	;# 
   975  0001                     	;# 
   976  0002                     	;# 
   977  0003                     	;# 
   978  0004                     	;# 
   979  0005                     	;# 
   980  0006                     	;# 
   981  0007                     	;# 
   982  0008                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  0010                     	;# 
   990  0011                     	;# 
   991  0012                     	;# 
   992  0013                     	;# 
   993  0015                     	;# 
   994  0016                     	;# 
   995  0016                     	;# 
   996  0017                     	;# 
   997  0018                     	;# 
   998  0019                     	;# 
   999  001A                     	;# 
  1000  001B                     	;# 
  1001  001C                     	;# 
  1002  001E                     	;# 
  1003  001F                     	;# 
  1004  008C                     	;# 
  1005  008D                     	;# 
  1006  008E                     	;# 
  1007  0090                     	;# 
  1008  0091                     	;# 
  1009  0092                     	;# 
  1010  0093                     	;# 
  1011  0095                     	;# 
  1012  0096                     	;# 
  1013  0097                     	;# 
  1014  0098                     	;# 
  1015  0099                     	;# 
  1016  009A                     	;# 
  1017  009B                     	;# 
  1018  009B                     	;# 
  1019  009C                     	;# 
  1020  009D                     	;# 
  1021  009E                     	;# 
  1022  010C                     	;# 
  1023  010D                     	;# 
  1024  010E                     	;# 
  1025  0110                     	;# 
  1026  0111                     	;# 
  1027  0112                     	;# 
  1028  0113                     	;# 
  1029  0114                     	;# 
  1030  0115                     	;# 
  1031  0116                     	;# 
  1032  0117                     	;# 
  1033  0118                     	;# 
  1034  0119                     	;# 
  1035  011A                     	;# 
  1036  011B                     	;# 
  1037  011D                     	;# 
  1038  018C                     	;# 
  1039  018D                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0199                     	;# 
  1050  019A                     	;# 
  1051  019B                     	;# 
  1052  019B                     	;# 
  1053  019B                     	;# 
  1054  019B                     	;# 
  1055  019C                     	;# 
  1056  019C                     	;# 
  1057  019D                     	;# 
  1058  019E                     	;# 
  1059  019F                     	;# 
  1060  020D                     	;# 
  1061  0210                     	;# 
  1062  0211                     	;# 
  1063  0212                     	;# 
  1064  0213                     	;# 
  1065  0214                     	;# 
  1066  0215                     	;# 
  1067  0215                     	;# 
  1068  0216                     	;# 
  1069  0217                     	;# 
  1070  0291                     	;# 
  1071  0291                     	;# 
  1072  0292                     	;# 
  1073  0293                     	;# 
  1074  0294                     	;# 
  1075  0295                     	;# 
  1076  0295                     	;# 
  1077  0296                     	;# 
  1078  0298                     	;# 
  1079  0298                     	;# 
  1080  0299                     	;# 
  1081  029A                     	;# 
  1082  029B                     	;# 
  1083  029C                     	;# 
  1084  029C                     	;# 
  1085  029D                     	;# 
  1086  029E                     	;# 
  1087  029F                     	;# 
  1088  0311                     	;# 
  1089  0311                     	;# 
  1090  0312                     	;# 
  1091  0313                     	;# 
  1092  0314                     	;# 
  1093  0315                     	;# 
  1094  0315                     	;# 
  1095  0316                     	;# 
  1096  0318                     	;# 
  1097  0318                     	;# 
  1098  0319                     	;# 
  1099  031A                     	;# 
  1100  031C                     	;# 
  1101  031C                     	;# 
  1102  031D                     	;# 
  1103  031E                     	;# 
  1104  0394                     	;# 
  1105  0395                     	;# 
  1106  0396                     	;# 
  1107  0415                     	;# 
  1108  0416                     	;# 
  1109  0417                     	;# 
  1110  041C                     	;# 
  1111  041D                     	;# 
  1112  041E                     	;# 
  1113  0791                     	;# 
  1114  0792                     	;# 
  1115  0793                     	;# 
  1116  0794                     	;# 
  1117  0795                     	;# 
  1118  0798                     	;# 
  1119  0799                     	;# 
  1120  07A0                     	;# 
  1121  07A1                     	;# 
  1122  07A3                     	;# 
  1123  07A4                     	;# 
  1124  07A6                     	;# 
  1125  07A7                     	;# 
  1126  07A9                     	;# 
  1127  07AA                     	;# 
  1128  0FE4                     	;# 
  1129  0FE5                     	;# 
  1130  0FE6                     	;# 
  1131  0FE7                     	;# 
  1132  0FE8                     	;# 
  1133  0FE9                     	;# 
  1134  0FEA                     	;# 
  1135  0FEB                     	;# 
  1136  0FED                     	;# 
  1137  0FEE                     	;# 
  1138  0FEF                     	;# 
  1139  0000                     	;# 
  1140  0001                     	;# 
  1141  0002                     	;# 
  1142  0003                     	;# 
  1143  0004                     	;# 
  1144  0005                     	;# 
  1145  0006                     	;# 
  1146  0007                     	;# 
  1147  0008                     	;# 
  1148  0009                     	;# 
  1149  000A                     	;# 
  1150  000B                     	;# 
  1151  000C                     	;# 
  1152  000D                     	;# 
  1153  000E                     	;# 
  1154  0010                     	;# 
  1155  0011                     	;# 
  1156  0012                     	;# 
  1157  0013                     	;# 
  1158  0015                     	;# 
  1159  0016                     	;# 
  1160  0016                     	;# 
  1161  0017                     	;# 
  1162  0018                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  001E                     	;# 
  1168  001F                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  0090                     	;# 
  1173  0091                     	;# 
  1174  0092                     	;# 
  1175  0093                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0097                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009B                     	;# 
  1184  009C                     	;# 
  1185  009D                     	;# 
  1186  009E                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010E                     	;# 
  1190  0110                     	;# 
  1191  0111                     	;# 
  1192  0112                     	;# 
  1193  0113                     	;# 
  1194  0114                     	;# 
  1195  0115                     	;# 
  1196  0116                     	;# 
  1197  0117                     	;# 
  1198  0118                     	;# 
  1199  0119                     	;# 
  1200  011A                     	;# 
  1201  011B                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  0191                     	;# 
  1206  0191                     	;# 
  1207  0192                     	;# 
  1208  0193                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0199                     	;# 
  1215  019A                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019C                     	;# 
  1221  019C                     	;# 
  1222  019D                     	;# 
  1223  019E                     	;# 
  1224  019F                     	;# 
  1225  020D                     	;# 
  1226  0210                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0214                     	;# 
  1231  0215                     	;# 
  1232  0215                     	;# 
  1233  0216                     	;# 
  1234  0217                     	;# 
  1235  0291                     	;# 
  1236  0291                     	;# 
  1237  0292                     	;# 
  1238  0293                     	;# 
  1239  0294                     	;# 
  1240  0295                     	;# 
  1241  0295                     	;# 
  1242  0296                     	;# 
  1243  0298                     	;# 
  1244  0298                     	;# 
  1245  0299                     	;# 
  1246  029A                     	;# 
  1247  029B                     	;# 
  1248  029C                     	;# 
  1249  029C                     	;# 
  1250  029D                     	;# 
  1251  029E                     	;# 
  1252  029F                     	;# 
  1253  0311                     	;# 
  1254  0311                     	;# 
  1255  0312                     	;# 
  1256  0313                     	;# 
  1257  0314                     	;# 
  1258  0315                     	;# 
  1259  0315                     	;# 
  1260  0316                     	;# 
  1261  0318                     	;# 
  1262  0318                     	;# 
  1263  0319                     	;# 
  1264  031A                     	;# 
  1265  031C                     	;# 
  1266  031C                     	;# 
  1267  031D                     	;# 
  1268  031E                     	;# 
  1269  0394                     	;# 
  1270  0395                     	;# 
  1271  0396                     	;# 
  1272  0415                     	;# 
  1273  0416                     	;# 
  1274  0417                     	;# 
  1275  041C                     	;# 
  1276  041D                     	;# 
  1277  041E                     	;# 
  1278  0791                     	;# 
  1279  0792                     	;# 
  1280  0793                     	;# 
  1281  0794                     	;# 
  1282  0795                     	;# 
  1283  0798                     	;# 
  1284  0799                     	;# 
  1285  07A0                     	;# 
  1286  07A1                     	;# 
  1287  07A3                     	;# 
  1288  07A4                     	;# 
  1289  07A6                     	;# 
  1290  07A7                     	;# 
  1291  07A9                     	;# 
  1292  07AA                     	;# 
  1293  0FE4                     	;# 
  1294  0FE5                     	;# 
  1295  0FE6                     	;# 
  1296  0FE7                     	;# 
  1297  0FE8                     	;# 
  1298  0FE9                     	;# 
  1299  0FEA                     	;# 
  1300  0FEB                     	;# 
  1301  0FED                     	;# 
  1302  0FEE                     	;# 
  1303  0FEF                     	;# 
  1304  0000                     	;# 
  1305  0001                     	;# 
  1306  0002                     	;# 
  1307  0003                     	;# 
  1308  0004                     	;# 
  1309  0005                     	;# 
  1310  0006                     	;# 
  1311  0007                     	;# 
  1312  0008                     	;# 
  1313  0009                     	;# 
  1314  000A                     	;# 
  1315  000B                     	;# 
  1316  000C                     	;# 
  1317  000D                     	;# 
  1318  000E                     	;# 
  1319  0010                     	;# 
  1320  0011                     	;# 
  1321  0012                     	;# 
  1322  0013                     	;# 
  1323  0015                     	;# 
  1324  0016                     	;# 
  1325  0016                     	;# 
  1326  0017                     	;# 
  1327  0018                     	;# 
  1328  0019                     	;# 
  1329  001A                     	;# 
  1330  001B                     	;# 
  1331  001C                     	;# 
  1332  001E                     	;# 
  1333  001F                     	;# 
  1334  008C                     	;# 
  1335  008D                     	;# 
  1336  008E                     	;# 
  1337  0090                     	;# 
  1338  0091                     	;# 
  1339  0092                     	;# 
  1340  0093                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0098                     	;# 
  1345  0099                     	;# 
  1346  009A                     	;# 
  1347  009B                     	;# 
  1348  009B                     	;# 
  1349  009C                     	;# 
  1350  009D                     	;# 
  1351  009E                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0110                     	;# 
  1356  0111                     	;# 
  1357  0112                     	;# 
  1358  0113                     	;# 
  1359  0114                     	;# 
  1360  0115                     	;# 
  1361  0116                     	;# 
  1362  0117                     	;# 
  1363  0118                     	;# 
  1364  0119                     	;# 
  1365  011A                     	;# 
  1366  011B                     	;# 
  1367  011D                     	;# 
  1368  018C                     	;# 
  1369  018D                     	;# 
  1370  0191                     	;# 
  1371  0191                     	;# 
  1372  0192                     	;# 
  1373  0193                     	;# 
  1374  0193                     	;# 
  1375  0193                     	;# 
  1376  0194                     	;# 
  1377  0195                     	;# 
  1378  0196                     	;# 
  1379  0199                     	;# 
  1380  019A                     	;# 
  1381  019B                     	;# 
  1382  019B                     	;# 
  1383  019B                     	;# 
  1384  019B                     	;# 
  1385  019C                     	;# 
  1386  019C                     	;# 
  1387  019D                     	;# 
  1388  019E                     	;# 
  1389  019F                     	;# 
  1390  020D                     	;# 
  1391  0210                     	;# 
  1392  0211                     	;# 
  1393  0212                     	;# 
  1394  0213                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0291                     	;# 
  1401  0291                     	;# 
  1402  0292                     	;# 
  1403  0293                     	;# 
  1404  0294                     	;# 
  1405  0295                     	;# 
  1406  0295                     	;# 
  1407  0296                     	;# 
  1408  0298                     	;# 
  1409  0298                     	;# 
  1410  0299                     	;# 
  1411  029A                     	;# 
  1412  029B                     	;# 
  1413  029C                     	;# 
  1414  029C                     	;# 
  1415  029D                     	;# 
  1416  029E                     	;# 
  1417  029F                     	;# 
  1418  0311                     	;# 
  1419  0311                     	;# 
  1420  0312                     	;# 
  1421  0313                     	;# 
  1422  0314                     	;# 
  1423  0315                     	;# 
  1424  0315                     	;# 
  1425  0316                     	;# 
  1426  0318                     	;# 
  1427  0318                     	;# 
  1428  0319                     	;# 
  1429  031A                     	;# 
  1430  031C                     	;# 
  1431  031C                     	;# 
  1432  031D                     	;# 
  1433  031E                     	;# 
  1434  0394                     	;# 
  1435  0395                     	;# 
  1436  0396                     	;# 
  1437  0415                     	;# 
  1438  0416                     	;# 
  1439  0417                     	;# 
  1440  041C                     	;# 
  1441  041D                     	;# 
  1442  041E                     	;# 
  1443  0791                     	;# 
  1444  0792                     	;# 
  1445  0793                     	;# 
  1446  0794                     	;# 
  1447  0795                     	;# 
  1448  0798                     	;# 
  1449  0799                     	;# 
  1450  07A0                     	;# 
  1451  07A1                     	;# 
  1452  07A3                     	;# 
  1453  07A4                     	;# 
  1454  07A6                     	;# 
  1455  07A7                     	;# 
  1456  07A9                     	;# 
  1457  07AA                     	;# 
  1458  0FE4                     	;# 
  1459  0FE5                     	;# 
  1460  0FE6                     	;# 
  1461  0FE7                     	;# 
  1462  0FE8                     	;# 
  1463  0FE9                     	;# 
  1464  0FEA                     	;# 
  1465  0FEB                     	;# 
  1466  0FED                     	;# 
  1467  0FEE                     	;# 
  1468  0FEF                     	;# 
  1469                           
  1470                           	psect	idataBANK2
  1471  07FA                     __pidataBANK2:
  1472                           
  1473                           ;initializer for _g_b_L
  1474  07FA  3401               	retlw	1
  1475                           
  1476                           ;initializer for _e_c_b_D_correction
  1477  07FB  3401               	retlw	1
  1478                           
  1479                           ;initializer for _e_c_num_C_q
  1480  07FC  3407               	retlw	7
  1481                           
  1482                           ;initializer for _e_c_num_L_q
  1483  07FD  3407               	retlw	7
  1484                           
  1485                           ;initializer for _g_c_C_mult
  1486  07FE  3401               	retlw	1
  1487                           
  1488                           ;initializer for _g_c_L_mult
  1489  07FF  3401               	retlw	1
  1490                           
  1491                           	psect	idataBANK3
  1492  2C7F                     __pidataBANK3:
  1493                           
  1494                           ;initializer for _g_i_SWR_old
  1495  2C7F  3410               	retlw	16
  1496  2C80  3427               	retlw	39
  1497                           
  1498                           ;initializer for _g_i_Power_old
  1499  2C81  3410               	retlw	16
  1500  2C82  3427               	retlw	39
  1501                           
  1502                           ;initializer for _in_dummy
  1503  2C83  3401               	retlw	1
  1504                           
  1505                           ;initializer for _e_c_K_Mult
  1506  2C84  3420               	retlw	32
  1507                           
  1508                           	psect	idataBANK4
  1509  2D30                     __pidataBANK4:
  1510                           
  1511                           ;initializer for _buffer
  1512  2D30  3400               	retlw	0
  1513  2D31  3400               	retlw	0
  1514  2D32  3400               	retlw	0
  1515  2D33  3400               	retlw	0
  1516  2D34  3400               	retlw	0
  1517  2D35  3400               	retlw	0
  1518  2D36  3400               	retlw	0
  1519  2D37  3400               	retlw	0
  1520  2D38  3400               	retlw	0
  1521  2D39  3400               	retlw	0
  1522  2D3A  3400               	retlw	0
  1523  2D3B  3400               	retlw	0
  1524  2D3C  3400               	retlw	0
  1525  2D3D  3400               	retlw	0
  1526  2D3E  3400               	retlw	0
  1527  2D3F  3400               	retlw	0
  1528  2D40  3409               	retlw	9
  1529  2D41  3400               	retlw	0
  1530  2D42  3400               	retlw	0
  1531  2D43  3400               	retlw	0
  1532  2D44  3400               	retlw	0
  1533  2D45  3400               	retlw	0
  1534  2D46  3400               	retlw	0
  1535  2D47  3400               	retlw	0
  1536  2D48  3400               	retlw	0
  1537  2D49  3400               	retlw	0
  1538  2D4A  3400               	retlw	0
  1539  2D4B  3400               	retlw	0
  1540  2D4C  3400               	retlw	0
  1541  2D4D  3400               	retlw	0
  1542  2D4E  3400               	retlw	0
  1543  2D4F  3400               	retlw	0
  1544  2D50  3400               	retlw	0
  1545  2D51  3420               	retlw	32
  1546  2D52  3420               	retlw	32
  1547  2D53  340D               	retlw	13
  1548  2D54  340A               	retlw	10
  1549                           
  1550                           	psect	idataEEDATA
  1551  0000                     __pidataEEDATA:
  1552  0000                     _initial_eeprom:	
  1553                           ;initializer for _initial_eeprom
  1554                           
  1555  0000  0078               	db	120
  1556  0001  0001               	db	1
  1557  0002  0001               	db	1
  1558  0003  0015               	db	21
  1559  0004  0013               	db	19
  1560  0005  0001               	db	1
  1561  0006  0000               	db	0
  1562  0007  0000               	db	0
  1563  0008  0002               	db	2
  1564  0009  0000               	db	0
  1565  000A  0007               	db	7
  1566  000B  0000               	db	0
  1567  000C  0007               	db	7
  1568  000D  0000               	db	0
  1569  000E  0001               	db	1
  1570  000F  0000               	db	0
  1571  0010  0000               	db	0
  1572  0011  0050               	db	80
  1573  0012  0001               	db	1
  1574  0013  0010               	db	16
  1575  0014  0002               	db	2
  1576  0015  0020               	db	32
  1577  0016  0004               	db	4
  1578  0017  0050               	db	80
  1579  0018  0010               	db	16
  1580  0019  0000               	db	0
  1581  001A  0022               	db	34
  1582  001B  0000               	db	0
  1583  001C  0045               	db	69
  1584  001D  0000               	db	0
  1585  001E  00FF               	db	255
  1586  001F  00FF               	db	255
  1587  0020  0000               	db	0
  1588  0021  0010               	db	16
  1589  0022  0000               	db	0
  1590  0023  0022               	db	34
  1591  0024  0000               	db	0
  1592  0025  0047               	db	71
  1593  0026  0001               	db	1
  1594  0027  0000               	db	0
  1595  0028  0002               	db	2
  1596  0029  0020               	db	32
  1597  002A  0004               	db	4
  1598  002B  0070               	db	112
  1599  002C  0010               	db	16
  1600  002D  0000               	db	0
  1601  002E  00FF               	db	255
  1602  002F  00FF               	db	255
  1603  0030  0000               	db	0
  1604  0031  0010               	db	16
  1605  0032  0000               	db	0
  1606  0033  0001               	db	1
  1607  0034  0000               	db	0
  1608  0035  0000               	db	0
  1609  0036  00FF               	db	255
  1610  0037  00FF               	db	255
  1611  0038  00FF               	db	255
  1612  0039  00FF               	db	255
  1613  003A  00FF               	db	255
  1614  003B  00FF               	db	255
  1615  003C  00FF               	db	255
  1616  003D  00FF               	db	255
  1617  003E  00FF               	db	255
  1618  003F  00FF               	db	255
  1619  0040  00FF               	db	255
  1620  0041  00FF               	db	255
  1621  0042  00FF               	db	255
  1622  0043  00FF               	db	255
  1623  0044  00FF               	db	255
  1624  0045  00FF               	db	255
  1625  0046  00FF               	db	255
  1626  0047  00FF               	db	255
  1627  0048  00FF               	db	255
  1628  0049  00FF               	db	255
  1629  004A  00FF               	db	255
  1630  004B  00FF               	db	255
  1631  004C  00FF               	db	255
  1632  004D  00FF               	db	255
  1633  004E  00FF               	db	255
  1634  004F  00FF               	db	255
  1635  0050  00FF               	db	255
  1636  0051  00FF               	db	255
  1637  0052  00FF               	db	255
  1638  0053  00FF               	db	255
  1639  0054  00FF               	db	255
  1640  0055  00FF               	db	255
  1641  0056  00FF               	db	255
  1642  0057  00FF               	db	255
  1643  0058  00FF               	db	255
  1644  0059  00FF               	db	255
  1645  005A  00FF               	db	255
  1646  005B  00FF               	db	255
  1647  005C  00FF               	db	255
  1648  005D  00FF               	db	255
  1649  005E  00FF               	db	255
  1650  005F  00FF               	db	255
  1651  0060  00FF               	db	255
  1652  0061  00FF               	db	255
  1653  0062  00FF               	db	255
  1654  0063  00FF               	db	255
  1655  0064  00FF               	db	255
  1656  0065  00FF               	db	255
  1657  0066  00FF               	db	255
  1658  0067  00FF               	db	255
  1659  0068  00FF               	db	255
  1660  0069  00FF               	db	255
  1661  006A  00FF               	db	255
  1662  006B  00FF               	db	255
  1663  006C  00FF               	db	255
  1664  006D  00FF               	db	255
  1665  006E  00FF               	db	255
  1666  006F  00FF               	db	255
  1667  0070  00FF               	db	255
  1668  0071  00FF               	db	255
  1669  0072  00FF               	db	255
  1670  0073  00FF               	db	255
  1671  0074  00FF               	db	255
  1672  0075  00FF               	db	255
  1673  0076  00FF               	db	255
  1674  0077  00FF               	db	255
  1675  0078  00FF               	db	255
  1676  0079  00FF               	db	255
  1677  007A  00FF               	db	255
  1678  007B  00FF               	db	255
  1679  007C  00FF               	db	255
  1680  007D  00FF               	db	255
  1681  007E  00FF               	db	255
  1682  007F  00FF               	db	255
  1683  0080  00FF               	db	255
  1684  0081  00FF               	db	255
  1685  0082  00FF               	db	255
  1686  0083  00FF               	db	255
  1687  0084  00FF               	db	255
  1688  0085  00FF               	db	255
  1689  0086  00FF               	db	255
  1690  0087  00FF               	db	255
  1691  0088  00FF               	db	255
  1692  0089  00FF               	db	255
  1693  008A  00FF               	db	255
  1694  008B  00FF               	db	255
  1695  008C  00FF               	db	255
  1696  008D  00FF               	db	255
  1697  008E  00FF               	db	255
  1698  008F  00FF               	db	255
  1699  0090  00FF               	db	255
  1700  0091  00FF               	db	255
  1701  0092  00FF               	db	255
  1702  0093  00FF               	db	255
  1703  0094  00FF               	db	255
  1704  0095  00FF               	db	255
  1705  0096  00FF               	db	255
  1706  0097  00FF               	db	255
  1707  0098  00FF               	db	255
  1708  0099  00FF               	db	255
  1709  009A  00FF               	db	255
  1710  009B  00FF               	db	255
  1711  009C  00FF               	db	255
  1712  009D  00FF               	db	255
  1713  009E  00FF               	db	255
  1714  009F  00FF               	db	255
  1715  00A0  00FF               	db	255
  1716  00A1  00FF               	db	255
  1717  00A2  00FF               	db	255
  1718  00A3  00FF               	db	255
  1719  00A4  00FF               	db	255
  1720  00A5  00FF               	db	255
  1721  00A6  00FF               	db	255
  1722  00A7  00FF               	db	255
  1723  00A8  00FF               	db	255
  1724  00A9  00FF               	db	255
  1725  00AA  00FF               	db	255
  1726  00AB  00FF               	db	255
  1727  00AC  00FF               	db	255
  1728  00AD  00FF               	db	255
  1729  00AE  00FF               	db	255
  1730  00AF  00FF               	db	255
  1731  00B0  00FF               	db	255
  1732  00B1  00FF               	db	255
  1733  00B2  00FF               	db	255
  1734  00B3  00FF               	db	255
  1735  00B4  00FF               	db	255
  1736  00B5  00FF               	db	255
  1737  00B6  00FF               	db	255
  1738  00B7  00FF               	db	255
  1739  00B8  00FF               	db	255
  1740  00B9  00FF               	db	255
  1741  00BA  00FF               	db	255
  1742  00BB  00FF               	db	255
  1743  00BC  00FF               	db	255
  1744  00BD  00FF               	db	255
  1745  00BE  00FF               	db	255
  1746  00BF  00FF               	db	255
  1747  00C0  00FF               	db	255
  1748  00C1  00FF               	db	255
  1749  00C2  00FF               	db	255
  1750  00C3  00FF               	db	255
  1751  00C4  00FF               	db	255
  1752  00C5  00FF               	db	255
  1753  00C6  00FF               	db	255
  1754  00C7  00FF               	db	255
  1755  00C8  00FF               	db	255
  1756  00C9  00FF               	db	255
  1757  00CA  00FF               	db	255
  1758  00CB  00FF               	db	255
  1759  00CC  00FF               	db	255
  1760  00CD  00FF               	db	255
  1761  00CE  00FF               	db	255
  1762  00CF  00FF               	db	255
  1763  00D0  00FF               	db	255
  1764  00D1  00FF               	db	255
  1765  00D2  00FF               	db	255
  1766  00D3  00FF               	db	255
  1767  00D4  00FF               	db	255
  1768  00D5  00FF               	db	255
  1769  00D6  00FF               	db	255
  1770  00D7  00FF               	db	255
  1771  00D8  00FF               	db	255
  1772  00D9  00FF               	db	255
  1773  00DA  00FF               	db	255
  1774  00DB  00FF               	db	255
  1775  00DC  00FF               	db	255
  1776  00DD  00FF               	db	255
  1777  00DE  00FF               	db	255
  1778  00DF  00FF               	db	255
  1779  00E0  00FF               	db	255
  1780  00E1  00FF               	db	255
  1781  00E2  00FF               	db	255
  1782  00E3  00FF               	db	255
  1783  00E4  00FF               	db	255
  1784  00E5  00FF               	db	255
  1785  00E6  00FF               	db	255
  1786  00E7  00FF               	db	255
  1787  00E8  00FF               	db	255
  1788  00E9  00FF               	db	255
  1789  00EA  00FF               	db	255
  1790  00EB  00FF               	db	255
  1791  00EC  00FF               	db	255
  1792  00ED  00FF               	db	255
  1793  00EE  00FF               	db	255
  1794  00EF  00FF               	db	255
  1795  00F0  00FF               	db	255
  1796  00F1  00FF               	db	255
  1797  00F2  00FF               	db	255
  1798  00F3  00FF               	db	255
  1799  00F4  00FF               	db	255
  1800  00F5  00FF               	db	255
  1801  00F6  00FF               	db	255
  1802  00F7  00FF               	db	255
  1803  00F8  00FF               	db	255
  1804  00F9  00FF               	db	255
  1805  00FA  00FF               	db	255
  1806  00FB  0000               	db	0
  1807  00FC  0000               	db	0
  1808  00FD  0001               	db	1
  1809  00FE  0000               	db	0
  1810  00FF  0000               	db	0
  1811  000D                     _PORTBbits	set	13
  1812  000E                     _PORTC	set	14
  1813  000C                     _PORTA	set	12
  1814  0003                     _STATUSbits	set	3
  1815  000B                     _INTCONbits	set	11
  1816  0015                     _TMR0	set	21
  1817  000D                     _PORTB	set	13
  1818  005A                     _TMR0IF	set	90
  1819  005D                     _TMR0IE	set	93
  1820  009C                     _ADRESH	set	156
  1821  009B                     _ADRESL	set	155
  1822  009D                     _ADCON0bits	set	157
  1823  009E                     _ADCON1	set	158
  1824  009E                     _ADCON1bits	set	158
  1825  008D                     _TRISBbits	set	141
  1826  008E                     _TRISC	set	142
  1827  008D                     _TRISB	set	141
  1828  008C                     _TRISA	set	140
  1829  0099                     _OSCCON	set	153
  1830  0097                     _WDTCONbits	set	151
  1831  0095                     _OPTION_REGbits	set	149
  1832  010E                     _LATC	set	270
  1833  010D                     _LATB	set	269
  1834  010C                     _LATA	set	268
  1835  0113                     _CM2CON0bits	set	275
  1836  0111                     _CM1CON0bits	set	273
  1837  010E                     _LATCbits	set	270
  1838  010C                     _LATAbits	set	268
  1839  010D                     _LATBbits	set	269
  1840  0117                     _FVRCONbits	set	279
  1841  0117                     _FVRCON	set	279
  1842  0191                     _EEADR	set	401
  1843  0196                     _EECON2	set	406
  1844  0193                     _EEDATA	set	403
  1845  0195                     _EECON1	set	405
  1846  0195                     _EECON1bits	set	405
  1847  018D                     _ANSELBbits	set	397
  1848  018C                     _ANSELAbits	set	396
  1849  020D                     _WPUBbits	set	525
  1850                           
  1851                           	psect	stringtext1
  1852  3000                     __pstringtext1:
  1853  3000                     STR_28:
  1854  3000  3420               	retlw	32	;' '
  1855  3001  3420               	retlw	32	;' '
  1856  3002  3420               	retlw	32	;' '
  1857  3003  3420               	retlw	32	;' '
  1858  3004  3420               	retlw	32	;' '
  1859  3005  3420               	retlw	32	;' '
  1860  3006  3420               	retlw	32	;' '
  1861  3007  3420               	retlw	32	;' '
  1862  3008  3420               	retlw	32	;' '
  1863  3009  3420               	retlw	32	;' '
  1864  300A  3400               	retlw	0
  1865                           
  1866                           	psect	stringtext2
  1867  300B                     __pstringtext2:
  1868  300B                     STR_26:
  1869  300B  3446               	retlw	70	;'F'
  1870  300C  3457               	retlw	87	;'W'
  1871  300D  3420               	retlw	32	;' '
  1872  300E  3476               	retlw	118	;'v'
  1873  300F  3465               	retlw	101	;'e'
  1874  3010  3472               	retlw	114	;'r'
  1875  3011  3420               	retlw	32	;' '
  1876  3012  3433               	retlw	51	;'3'
  1877  3013  342E               	retlw	46	;'.'
  1878  3014  3432               	retlw	50	;'2'
  1879  3015  3400               	retlw	0
  1880                           
  1881                           	psect	stringtext3
  1882  3016                     __pstringtext3:
  1883  3016                     STR_84:
  1884  3016  3454               	retlw	84	;'T'
  1885  3017  3445               	retlw	69	;'E'
  1886  3018  3453               	retlw	83	;'S'
  1887  3019  3454               	retlw	84	;'T'
  1888  301A  3420               	retlw	32	;' '
  1889  301B  344D               	retlw	77	;'M'
  1890  301C  344F               	retlw	79	;'O'
  1891  301D  3444               	retlw	68	;'D'
  1892  301E  3445               	retlw	69	;'E'
  1893  301F  3400               	retlw	0
  1894                           
  1895                           	psect	stringtext4
  1896  3020                     __pstringtext4:
  1897  3020                     STR_24:
  1898  3020  3445               	retlw	69	;'E'
  1899  3021  3458               	retlw	88	;'X'
  1900  3022  3454               	retlw	84	;'T'
  1901  3023  3420               	retlw	32	;' '
  1902  3024  3462               	retlw	98	;'b'
  1903  3025  346F               	retlw	111	;'o'
  1904  3026  3461               	retlw	97	;'a'
  1905  3027  3472               	retlw	114	;'r'
  1906  3028  3464               	retlw	100	;'d'
  1907  3029  3400               	retlw	0
  1908                           
  1909                           	psect	stringtext5
  1910  302A                     __pstringtext5:
  1911  302A                     STR_71:
  1912  302A  3453               	retlw	83	;'S'
  1913  302B  3457               	retlw	87	;'W'
  1914  302C  343D               	retlw	61	;'='
  1915  302D  3420               	retlw	32	;' '
  1916  302E  3420               	retlw	32	;' '
  1917  302F  3420               	retlw	32	;' '
  1918  3030  3420               	retlw	32	;' '
  1919  3031  3420               	retlw	32	;' '
  1920  3032  3400               	retlw	0
  1921                           
  1922                           	psect	stringtext6
  1923  3033                     __pstringtext6:
  1924  3033                     STR_63:
  1925  3033  3453               	retlw	83	;'S'
  1926  3034  3457               	retlw	87	;'W'
  1927  3035  3452               	retlw	82	;'R'
  1928  3036  343D               	retlw	61	;'='
  1929  3037  3420               	retlw	32	;' '
  1930  3038  3420               	retlw	32	;' '
  1931  3039  3420               	retlw	32	;' '
  1932  303A  3420               	retlw	32	;' '
  1933  303B  3400               	retlw	0
  1934                           
  1935                           	psect	stringtext7
  1936  303C                     __pstringtext7:
  1937  303C                     STR_17:
  1938  303C  3452               	retlw	82	;'R'
  1939  303D  3445               	retlw	69	;'E'
  1940  303E  3453               	retlw	83	;'S'
  1941  303F  3445               	retlw	69	;'E'
  1942  3040  3454               	retlw	84	;'T'
  1943  3041  3420               	retlw	32	;' '
  1944  3042  3420               	retlw	32	;' '
  1945  3043  3420               	retlw	32	;' '
  1946  3044  3400               	retlw	0
  1947                           
  1948                           	psect	stringtext8
  1949  3045                     __pstringtext8:
  1950  3045                     STR_49:
  1951  3045  3445               	retlw	69	;'E'
  1952  3046  3446               	retlw	70	;'F'
  1953  3047  3446               	retlw	70	;'F'
  1954  3048  343D               	retlw	61	;'='
  1955  3049  3420               	retlw	32	;' '
  1956  304A  3420               	retlw	32	;' '
  1957  304B  3430               	retlw	48	;'0'
  1958  304C  3425               	retlw	37	;'%'
  1959  304D  3400               	retlw	0
  1960                           
  1961                           	psect	stringtext9
  1962  304E                     __pstringtext9:
  1963  304E                     STR_18:
  1964  304E  3453               	retlw	83	;'S'
  1965  304F  3457               	retlw	87	;'W'
  1966  3050  3452               	retlw	82	;'R'
  1967  3051  343D               	retlw	61	;'='
  1968  3052  3430               	retlw	48	;'0'
  1969  3053  342E               	retlw	46	;'.'
  1970  3054  3430               	retlw	48	;'0'
  1971  3055  3430               	retlw	48	;'0'
  1972  3056  3400               	retlw	0
  1973                           
  1974                           	psect	stringtext10
  1975  3057                     __pstringtext10:
  1976  3057                     STR_25:
  1977  3057  3462               	retlw	98	;'b'
  1978  3058  3479               	retlw	121	;'y'
  1979  3059  3420               	retlw	32	;' '
  1980  305A  344E               	retlw	78	;'N'
  1981  305B  3437               	retlw	55	;'7'
  1982  305C  3444               	retlw	68	;'D'
  1983  305D  3444               	retlw	68	;'D'
  1984  305E  3443               	retlw	67	;'C'
  1985  305F  3400               	retlw	0
  1986                           
  1987                           	psect	stringtext11
  1988  3060                     __pstringtext11:
  1989  3060                     STR_57:
  1990  3060  344F               	retlw	79	;'O'
  1991  3061  3456               	retlw	86	;'V'
  1992  3062  3445               	retlw	69	;'E'
  1993  3063  3452               	retlw	82	;'R'
  1994  3064  344C               	retlw	76	;'L'
  1995  3065  344F               	retlw	79	;'O'
  1996  3066  3441               	retlw	65	;'A'
  1997  3067  3444               	retlw	68	;'D'
  1998  3068  3400               	retlw	0
  1999                           
  2000                           	psect	stringtext12
  2001  3069                     __pstringtext12:
  2002  3069                     STR_31:
  2003  3069  3450               	retlw	80	;'P'
  2004  306A  3457               	retlw	87	;'W'
  2005  306B  3452               	retlw	82	;'R'
  2006  306C  343D               	retlw	61	;'='
  2007  306D  3420               	retlw	32	;' '
  2008  306E  3420               	retlw	32	;' '
  2009  306F  3430               	retlw	48	;'0'
  2010  3070  3457               	retlw	87	;'W'
  2011  3071  3400               	retlw	0
  2012                           
  2013                           	psect	stringtext13
  2014  3072                     __pstringtext13:
  2015  3072                     STR_47:
  2016  3072  3441               	retlw	65	;'A'
  2017  3073  344E               	retlw	78	;'N'
  2018  3074  3454               	retlw	84	;'T'
  2019  3075  343D               	retlw	61	;'='
  2020  3076  3420               	retlw	32	;' '
  2021  3077  3420               	retlw	32	;' '
  2022  3078  3430               	retlw	48	;'0'
  2023  3079  3457               	retlw	87	;'W'
  2024  307A  3400               	retlw	0
  2025                           
  2026                           	psect	stringtext14
  2027  307B                     __pstringtext14:
  2028  307B                     STR_32:
  2029  307B  3450               	retlw	80	;'P'
  2030  307C  3457               	retlw	87	;'W'
  2031  307D  3452               	retlw	82	;'R'
  2032  307E  343D               	retlw	61	;'='
  2033  307F  3430               	retlw	48	;'0'
  2034  3080  342E               	retlw	46	;'.'
  2035  3081  3430               	retlw	48	;'0'
  2036  3082  3457               	retlw	87	;'W'
  2037  3083  3400               	retlw	0
  2038                           
  2039                           	psect	stringtext15
  2040  3084                     __pstringtext15:
  2041  3084                     STR_48:
  2042  3084  3441               	retlw	65	;'A'
  2043  3085  344E               	retlw	78	;'N'
  2044  3086  3454               	retlw	84	;'T'
  2045  3087  343D               	retlw	61	;'='
  2046  3088  3430               	retlw	48	;'0'
  2047  3089  342E               	retlw	46	;'.'
  2048  308A  3430               	retlw	48	;'0'
  2049  308B  3457               	retlw	87	;'W'
  2050  308C  3400               	retlw	0
  2051                           
  2052                           	psect	stringtext16
  2053  308D                     __pstringtext16:
  2054  308D                     STR_55:
  2055  308D  3445               	retlw	69	;'E'
  2056  308E  3446               	retlw	70	;'F'
  2057  308F  3446               	retlw	70	;'F'
  2058  3090  343D               	retlw	61	;'='
  2059  3091  3420               	retlw	32	;' '
  2060  3092  3430               	retlw	48	;'0'
  2061  3093  3425               	retlw	37	;'%'
  2062  3094  3400               	retlw	0
  2063                           
  2064                           	psect	stringtext17
  2065  3095                     __pstringtext17:
  2066  3095                     STR_23:
  2067  3095  3441               	retlw	65	;'A'
  2068  3096  3454               	retlw	84	;'T'
  2069  3097  3455               	retlw	85	;'U'
  2070  3098  342D               	retlw	45	;'-'
  2071  3099  3431               	retlw	49	;'1'
  2072  309A  3430               	retlw	48	;'0'
  2073  309B  3430               	retlw	48	;'0'
  2074  309C  3400               	retlw	0
  2075                           
  2076                           	psect	stringtext18
  2077  309D                     __pstringtext18:
  2078  309D                     STR_53:
  2079  309D  3441               	retlw	65	;'A'
  2080  309E  344E               	retlw	78	;'N'
  2081  309F  343D               	retlw	61	;'='
  2082  30A0  3420               	retlw	32	;' '
  2083  30A1  3420               	retlw	32	;' '
  2084  30A2  3430               	retlw	48	;'0'
  2085  30A3  3457               	retlw	87	;'W'
  2086  30A4  3400               	retlw	0
  2087                           
  2088                           	psect	stringtext19
  2089  30A5                     __pstringtext19:
  2090  30A5                     STR_54:
  2091  30A5  3441               	retlw	65	;'A'
  2092  30A6  344E               	retlw	78	;'N'
  2093  30A7  343D               	retlw	61	;'='
  2094  30A8  3430               	retlw	48	;'0'
  2095  30A9  342E               	retlw	46	;'.'
  2096  30AA  3430               	retlw	48	;'0'
  2097  30AB  3457               	retlw	87	;'W'
  2098  30AC  3400               	retlw	0
  2099                           
  2100                           	psect	stringtext20
  2101  30AD                     __pstringtext20:
  2102  30AD                     STR_21:
  2103  30AD  3454               	retlw	84	;'T'
  2104  30AE  3455               	retlw	85	;'U'
  2105  30AF  344E               	retlw	78	;'N'
  2106  30B0  3445               	retlw	69	;'E'
  2107  30B1  3400               	retlw	0
  2108                           
  2109                           	psect	stringtext21
  2110  30B2                     __pstringtext21:
  2111  30B2                     STR_78:
  2112  30B2  3443               	retlw	67	;'C'
  2113  30B3  343D               	retlw	61	;'='
  2114  30B4  3400               	retlw	0
  2115                           
  2116                           	psect	stringtext22
  2117  30B5                     __pstringtext22:
  2118  30B5                     STR_72:
  2119  30B5  344C               	retlw	76	;'L'
  2120  30B6  343D               	retlw	61	;'='
  2121  30B7  3400               	retlw	0
  2122                           
  2123                           	psect	stringtext23
  2124  30B8                     __pstringtext23:
  2125  30B8                     STR_79:
  2126  30B8  3470               	retlw	112	;'p'
  2127  30B9  3446               	retlw	70	;'F'
  2128  30BA  3400               	retlw	0
  2129                           
  2130                           	psect	stringtext24
  2131  30BB                     __pstringtext24:
  2132  30BB                     STR_73:
  2133  30BB  3475               	retlw	117	;'u'
  2134  30BC  3448               	retlw	72	;'H'
  2135  30BD  3400               	retlw	0
  2136                           
  2137                           	psect	stringtext25
  2138  30BE                     __pstringtext25:
  2139  30BE                     STR_5:
  2140  30BE  342E               	retlw	46	;'.'
  2141  30BF  3400               	retlw	0
  2142                           
  2143                           	psect	stringtext26
  2144  30C0                     __pstringtext26:
  2145  30C0                     STR_6:
  2146  30C0  345F               	retlw	95	;'_'
  2147  30C1  3400               	retlw	0
  2148                           
  2149                           	psect	stringtext27
  2150  30C2                     __pstringtext27:
  2151  30C2                     STR_3:
  2152  30C2  3463               	retlw	99	;'c'
  2153  30C3  3400               	retlw	0
  2154                           
  2155                           	psect	stringtext28
  2156  30C4                     __pstringtext28:
  2157  30C4                     STR_1:
  2158  30C4  346C               	retlw	108	;'l'
  2159  30C5  3400               	retlw	0
  2160                           
  2161                           	psect	stringtext29
  2162  30C6                     __pstringtext29:
  2163  30C6                     STR_83:
  2164  30C6  3470               	retlw	112	;'p'
  2165  30C7  3400               	retlw	0
  2166                           
  2167                           	psect	stringtext30
  2168  30C8                     __pstringtext30:
  2169  30C8                     STR_77:
  2170  30C8  3475               	retlw	117	;'u'
  2171  30C9  3400               	retlw	0
  2172                           
  2173                           	psect	stringtext31
  2174  0000                     __pstringtext31:
  2175  3009                     
  2176                           	psect	cinit
  2177  0016                     start_initialization:	
  2178                           ; #config settings
  2179                           
  2180  0016                     __initialization:
  2181                           
  2182                           ; Initialize objects allocated to BANK2
  2183  0016  30FA               	movlw	low __pidataBANK2
  2184  0017  0084               	movwf	4
  2185  0018  3087               	movlw	(high __pidataBANK2)| (0+128)
  2186  0019  0085               	movwf	5
  2187  001A  306A               	movlw	low __pdataBANK2
  2188  001B  0086               	movwf	6
  2189  001C  3001               	movlw	high __pdataBANK2
  2190  001D  0087               	movwf	7
  2191  001E  3006               	movlw	6
  2192  001F  31AC  2479  3180   	fcall	init_ram
  2193                           
  2194                           ; Initialize objects allocated to BANK3
  2195  0022  307F               	movlw	low __pidataBANK3
  2196  0023  0084               	movwf	4
  2197  0024  30AC               	movlw	(high __pidataBANK3)| (0+128)
  2198  0025  0085               	movwf	5
  2199  0026  30D4               	movlw	low __pdataBANK3
  2200  0027  0086               	movwf	6
  2201  0028  3001               	movlw	high __pdataBANK3
  2202  0029  0087               	movwf	7
  2203  002A  3006               	movlw	6
  2204  002B  31AC  2479  3180   	fcall	init_ram
  2205                           
  2206                           ; Initialize objects allocated to BANK4
  2207  002E  3030               	movlw	low __pidataBANK4
  2208  002F  0084               	movwf	4
  2209  0030  30AD               	movlw	(high __pidataBANK4)| (0+128)
  2210  0031  0085               	movwf	5
  2211  0032  3020               	movlw	low __pdataBANK4
  2212  0033  0086               	movwf	6
  2213  0034  3002               	movlw	high __pdataBANK4
  2214  0035  0087               	movwf	7
  2215  0036  3025               	movlw	37
  2216  0037  31AC  2479  3180   	fcall	init_ram
  2217                           
  2218                           ; Clear objects allocated to COMMON
  2219  003A  01F8               	clrf	__pbssCOMMON& (0+127)
  2220  003B  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2221  003C  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2222                           
  2223                           ; Clear objects allocated to BANK2
  2224  003D  3020               	movlw	low __pbssBANK2
  2225  003E  0084               	movwf	4
  2226  003F  3001               	movlw	high __pbssBANK2
  2227  0040  0085               	movwf	5
  2228  0041  302D               	movlw	45
  2229  0042  31AC  2473  3180   	fcall	clear_ram0
  2230                           
  2231                           ; Clear objects allocated to BANK3
  2232  0045  30A0               	movlw	low __pbssBANK3
  2233  0046  0084               	movwf	4
  2234  0047  3001               	movlw	high __pbssBANK3
  2235  0048  0085               	movwf	5
  2236  0049  3034               	movlw	52
  2237  004A  31AC  2473         	fcall	clear_ram0
  2238  004C                     end_of_initialization:	
  2239                           ;End of C runtime variable initialization code
  2240                           
  2241  004C                     __end_of__initialization:
  2242  004C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2243  004D  0020               	movlb	0
  2244  004E  319A  2A85         	ljmp	_main	;jump to C main() function
  2245                           
  2246                           	psect	dataEEDATA
  2247  0000                     __pdataEEDATA:
  2248                           
  2249                           	psect	bssCOMMON
  2250  0078                     __pbssCOMMON:
  2251  0078                     _g_i_SWR:
  2252  0078                     	ds	2
  2253  007A                     _g_c_cap:
  2254  007A                     	ds	1
  2255                           
  2256                           	psect	bssBANK2
  2257  0120                     __pbssBANK2:
  2258  0120                     _g_i_SWR_fixed_old:
  2259  0120                     	ds	2
  2260  0122                     _e_i_ms_Rel_Del:
  2261  0122                     	ds	2
  2262  0124                     _g_i_P_max:
  2263  0124                     	ds	2
  2264  0126                     _g_i_PWR:
  2265  0126                     	ds	2
  2266  0128                     uartProcessInput@buf:
  2267  0128                     	ds	1
  2268  0129                     uartProcessOutput@chrPosition:
  2269  0129                     	ds	1
  2270  012A                     uartProcessOutput@strPosition:
  2271  012A                     	ds	1
  2272  012B                     _g_b_Loss_mode:
  2273  012B                     	ds	1
  2274  012C                     _g_b_lcd_prep_short:
  2275  012C                     	ds	1
  2276  012D                     _g_b_Bypas_mode:
  2277  012D                     	ds	1
  2278  012E                     _g_b_Auto_mode:
  2279  012E                     	ds	1
  2280  012F                     _e_c_ledtype:
  2281  012F                     	ds	1
  2282  0130                     _e_c_b_Loss_ind:
  2283  0130                     	ds	1
  2284  0131                     _e_c_b_P_High:
  2285  0131                     	ds	1
  2286  0132                     _e_c_tenths_Fid_loss:
  2287  0132                     	ds	1
  2288  0133                     _e_c_b_L_invert:
  2289  0133                     	ds	1
  2290  0134                     _e_c_b_C_linear:
  2291  0134                     	ds	1
  2292  0135                     _e_c_b_L_linear:
  2293  0135                     	ds	1
  2294  0136                     _g_b_Overload:
  2295  0136                     	ds	1
  2296  0137                     _g_char_p_cnt:
  2297  0137                     	ds	1
  2298  0138                     _g_b_rready:
  2299  0138                     	ds	1
  2300  0139                     _g_c_step_ind:
  2301  0139                     	ds	1
  2302  013A                     _g_c_step_cap:
  2303  013A                     	ds	1
  2304  013B                     _g_c_SW:
  2305  013B                     	ds	1
  2306  013C                     _g_c_ind:
  2307  013C                     	ds	1
  2308  013D                     _g_work_str_2:
  2309  013D                     	ds	7
  2310  0144                     _g_work_str:
  2311  0144                     	ds	7
  2312  014B                     _g_i_swr_a:
  2313  014B                     	ds	2
  2314                           
  2315                           	psect	dataBANK2
  2316  016A                     __pdataBANK2:
  2317  016A                     _g_b_L:
  2318  016A                     	ds	1
  2319  016B                     _e_c_b_D_correction:
  2320  016B                     	ds	1
  2321  016C                     _e_c_num_C_q:
  2322  016C                     	ds	1
  2323  016D                     _e_c_num_L_q:
  2324  016D                     	ds	1
  2325  016E                     _g_c_C_mult:
  2326  016E                     	ds	1
  2327  016F                     _g_c_L_mult:
  2328  016F                     	ds	1
  2329                           
  2330                           	psect	bssBANK3
  2331  01A0                     __pbssBANK3:
  2332  01A0                     _g_i_Power:
  2333  01A0                     	ds	2
  2334  01A2                     _e_i_tenths_init_max_swr:
  2335  01A2                     	ds	2
  2336  01A4                     _e_i_watts_max_for_start:
  2337  01A4                     	ds	2
  2338  01A6                     _e_i_watts_min_for_start:
  2339  01A6                     	ds	2
  2340  01A8                     _e_i_tenths_SWR_Auto_delta:
  2341  01A8                     	ds	2
  2342  01AA                     _e_i_Ind7:
  2343  01AA                     	ds	2
  2344  01AC                     _e_i_Ind6:
  2345  01AC                     	ds	2
  2346  01AE                     _e_i_Ind5:
  2347  01AE                     	ds	2
  2348  01B0                     _e_i_Ind4:
  2349  01B0                     	ds	2
  2350  01B2                     _e_i_Ind3:
  2351  01B2                     	ds	2
  2352  01B4                     _e_i_Ind2:
  2353  01B4                     	ds	2
  2354  01B6                     _e_i_Ind1:
  2355  01B6                     	ds	2
  2356  01B8                     _e_i_Cap7:
  2357  01B8                     	ds	2
  2358  01BA                     _e_i_Cap6:
  2359  01BA                     	ds	2
  2360  01BC                     _e_i_Cap5:
  2361  01BC                     	ds	2
  2362  01BE                     _e_i_Cap4:
  2363  01BE                     	ds	2
  2364  01C0                     _e_i_Cap3:
  2365  01C0                     	ds	2
  2366  01C2                     _e_i_Cap2:
  2367  01C2                     	ds	2
  2368  01C4                     _e_i_Cap1:
  2369  01C4                     	ds	2
  2370  01C6                     uartProcessInput@bitCounter:
  2371  01C6                     	ds	1
  2372  01C7                     uartProcessInput@state:
  2373  01C7                     	ds	1
  2374  01C8                     _inbuf:
  2375  01C8                     	ds	1
  2376  01C9                     uartProcessOutput@buf:
  2377  01C9                     	ds	1
  2378  01CA                     _refresh:
  2379  01CA                     	ds	1
  2380  01CB                     _g_b_Test_mode:
  2381  01CB                     	ds	1
  2382  01CC                     _g_b_Restart:
  2383  01CC                     	ds	1
  2384  01CD                     _g_c_Auto_mem:
  2385  01CD                     	ds	1
  2386  01CE                     _g_c_SW_mem:
  2387  01CE                     	ds	1
  2388  01CF                     _g_c_ind_mem:
  2389  01CF                     	ds	1
  2390  01D0                     _g_c_cap_mem:
  2391  01D0                     	ds	1
  2392  01D1                     _g_b_Soft_tune:
  2393  01D1                     	ds	1
  2394  01D2                     _out_dummy:
  2395  01D2                     	ds	1
  2396  01D3                     _e_c_b_Relay_off:
  2397  01D3                     	ds	1
  2398                           
  2399                           	psect	dataBANK3
  2400  01D4                     __pdataBANK3:
  2401  01D4                     _g_i_SWR_old:
  2402  01D4                     	ds	2
  2403  01D6                     _g_i_Power_old:
  2404  01D6                     	ds	2
  2405  01D8                     _in_dummy:
  2406  01D8                     	ds	1
  2407  01D9                     _e_c_K_Mult:
  2408  01D9                     	ds	1
  2409                           
  2410                           	psect	dataBANK4
  2411  0220                     __pdataBANK4:
  2412  0220                     _buffer:
  2413  0220                     	ds	37
  2414                           
  2415                           	psect	inittext
  2416  2C79                     init_ram:
  2417  2C79  00FE               	movwf	126
  2418  2C7A                     initloop:
  2419  2C7A  0012               	moviw fsr0++
  2420  2C7B  001E               	movwi fsr1++
  2421  2C7C  0BFE               	decfsz	126,f
  2422  2C7D  2C7A               	goto	initloop
  2423  2C7E  3400               	retlw	0
  2424                           
  2425                           	psect	clrtext
  2426  2C73                     clear_ram0:	
  2427                           ;	Called with FSR0 containing the base address, and
  2428                           ;	WREG with the size to clear
  2429                           
  2430  2C73  0064               	clrwdt	;clear the watchdog before getting into this loop
  2431  2C74                     clrloop0:
  2432  2C74  0180               	clrf	0	;clear RAM location pointed to by FSR
  2433  2C75  3101               	addfsr 0,1
  2434  2C76  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2435  2C77  2C74               	goto	clrloop0	;have we reached the end yet?
  2436  2C78  3400               	retlw	0	;all done for this memory range, return
  2437                           
  2438                           	psect	cstackBANK3
  2439  01DA                     __pcstackBANK3:
  2440  01DA                     ??_main:
  2441                           
  2442                           ; 1 bytes @ 0x0
  2443  01DA                     	ds	3
  2444                           
  2445                           	psect	cstackBANK2
  2446  014D                     __pcstackBANK2:
  2447  014D                     ??_get_swr:
  2448                           
  2449                           ; 1 bytes @ 0x0
  2450  014D                     	ds	2
  2451  014F                     ??_coarse_cap:
  2452  014F                     ??_sharp_cap:	
  2453                           ; 1 bytes @ 0x2
  2454                           
  2455  014F                     ??_sharp_ind:	
  2456                           ; 1 bytes @ 0x2
  2457                           
  2458                           
  2459                           ; 1 bytes @ 0x2
  2460  014F                     	ds	2
  2461  0151                     coarse_cap@l_coarse_cap_min_swr:
  2462                           
  2463                           ; 2 bytes @ 0x4
  2464  0151                     	ds	2
  2465  0153                     coarse_cap@l_coarse_cap_step:
  2466                           
  2467                           ; 1 bytes @ 0x6
  2468  0153                     	ds	1
  2469  0154                     coarse_cap@l_coarse_cap_count:
  2470  0154                     sharp_cap@l_sharp_cap_max_range:	
  2471                           ; 1 bytes @ 0x7
  2472                           
  2473  0154                     sharp_ind@l_sharp_ind_max_range:	
  2474                           ; 1 bytes @ 0x7
  2475                           
  2476                           
  2477                           ; 1 bytes @ 0x7
  2478  0154                     	ds	1
  2479  0155                     ??_coarse_tune:
  2480  0155                     sharp_cap@l_sharp_cap_min_range:	
  2481                           ; 1 bytes @ 0x8
  2482                           
  2483  0155                     sharp_ind@l_sharp_ind_min_range:	
  2484                           ; 1 bytes @ 0x8
  2485                           
  2486                           
  2487                           ; 1 bytes @ 0x8
  2488  0155                     	ds	1
  2489  0156                     sharp_cap@l_sharp_cap_range:
  2490  0156                     sharp_ind@l_sharp_ind_range:	
  2491                           ; 1 bytes @ 0x9
  2492                           
  2493                           
  2494                           ; 1 bytes @ 0x9
  2495  0156                     	ds	1
  2496  0157                     coarse_tune@l_coarse_tune_min_swr:
  2497  0157                     sharp_cap@l_sharp_cap_min_SWR:	
  2498                           ; 2 bytes @ 0xA
  2499                           
  2500  0157                     sharp_ind@l_sharp_ind_min_SWR:	
  2501                           ; 2 bytes @ 0xA
  2502                           
  2503                           
  2504                           ; 2 bytes @ 0xA
  2505  0157                     	ds	2
  2506  0159                     coarse_tune@l_coarse_tune_mem_cap:
  2507  0159                     sharp_cap@l_sharp_cap_count:	
  2508                           ; 1 bytes @ 0xC
  2509                           
  2510  0159                     sharp_ind@l_sharp_ind_count:	
  2511                           ; 1 bytes @ 0xC
  2512                           
  2513                           
  2514                           ; 1 bytes @ 0xC
  2515  0159                     	ds	1
  2516  015A                     coarse_tune@l_coarse_tune_mem_step_cap:
  2517                           
  2518                           ; 1 bytes @ 0xD
  2519  015A                     	ds	1
  2520  015B                     coarse_tune@l_coarse_tune_step:
  2521                           
  2522                           ; 1 bytes @ 0xE
  2523  015B                     	ds	1
  2524  015C                     coarse_tune@l_coarse_tune_count:
  2525                           
  2526                           ; 1 bytes @ 0xF
  2527  015C                     	ds	1
  2528  015D                     ??_sub_tune:
  2529                           
  2530                           ; 1 bytes @ 0x10
  2531  015D                     	ds	3
  2532  0160                     sub_tune@l_int_ind_mem:
  2533                           
  2534                           ; 2 bytes @ 0x13
  2535  0160                     	ds	2
  2536  0162                     sub_tune@l_int_cap_mem:
  2537                           
  2538                           ; 2 bytes @ 0x15
  2539  0162                     	ds	2
  2540  0164                     sub_tune@l_int_swr_mem:
  2541                           
  2542                           ; 2 bytes @ 0x17
  2543  0164                     	ds	2
  2544  0166                     ??_tune_btn_push:
  2545                           
  2546                           ; 1 bytes @ 0x19
  2547  0166                     	ds	2
  2548  0168                     ??_button_proc:
  2549                           
  2550                           ; 1 bytes @ 0x1B
  2551  0168                     	ds	1
  2552  0169                     button_proc@uartChar:
  2553                           
  2554                           ; 1 bytes @ 0x1C
  2555  0169                     	ds	1
  2556                           
  2557                           	psect	cstackBANK1
  2558  00A0                     __pcstackBANK1:
  2559  00A0                     ??___flmul:
  2560                           
  2561                           ; 1 bytes @ 0x0
  2562  00A0                     	ds	5
  2563  00A5                     ___flmul@sign:
  2564                           
  2565                           ; 1 bytes @ 0x5
  2566  00A5                     	ds	1
  2567  00A6                     ___flmul@aexp:
  2568                           
  2569                           ; 1 bytes @ 0x6
  2570  00A6                     	ds	1
  2571  00A7                     ___flmul@grs:
  2572                           
  2573                           ; 4 bytes @ 0x7
  2574  00A7                     	ds	4
  2575  00AB                     ___flmul@bexp:
  2576                           
  2577                           ; 1 bytes @ 0xB
  2578  00AB                     	ds	1
  2579  00AC                     ___flmul@prod:
  2580                           
  2581                           ; 4 bytes @ 0xC
  2582  00AC                     	ds	4
  2583  00B0                     ___flmul@temp:
  2584                           
  2585                           ; 2 bytes @ 0x10
  2586  00B0                     	ds	2
  2587  00B2                     ?___fltol:
  2588  00B2                     ___fltol@f1:	
  2589                           ; 4 bytes @ 0x12
  2590                           
  2591                           
  2592                           ; 4 bytes @ 0x12
  2593  00B2                     	ds	4
  2594  00B6                     ??___fltol:
  2595                           
  2596                           ; 1 bytes @ 0x16
  2597  00B6                     	ds	5
  2598  00BB                     ___fltol@sign1:
  2599                           
  2600                           ; 1 bytes @ 0x1B
  2601  00BB                     	ds	1
  2602  00BC                     ___fltol@exp1:
  2603                           
  2604                           ; 1 bytes @ 0x1C
  2605  00BC                     	ds	1
  2606  00BD                     ?_show_pwr:
  2607  00BD                     ??_get_pwr:	
  2608                           ; 1 bytes @ 0x1D
  2609                           
  2610  00BD                     show_pwr@parm_Power:	
  2611                           ; 1 bytes @ 0x1D
  2612                           
  2613                           
  2614                           ; 2 bytes @ 0x1D
  2615  00BD                     	ds	2
  2616  00BF                     show_pwr@parm_SWR:
  2617                           
  2618                           ; 2 bytes @ 0x1F
  2619  00BF                     	ds	2
  2620  00C1                     ??_show_pwr:
  2621                           
  2622                           ; 1 bytes @ 0x21
  2623  00C1                     	ds	4
  2624  00C5                     get_pwr@l_Reverse:
  2625  00C5                     _show_pwr$1913:	
  2626                           ; 4 bytes @ 0x25
  2627                           
  2628                           
  2629                           ; 4 bytes @ 0x25
  2630  00C5                     	ds	4
  2631  00C9                     get_pwr@l_Forward:
  2632  00C9                     _show_pwr$1915:	
  2633                           ; 4 bytes @ 0x29
  2634                           
  2635                           
  2636                           ; 4 bytes @ 0x29
  2637  00C9                     	ds	4
  2638  00CD                     get_pwr@l_doub_pwr:
  2639  00CD                     _show_pwr$1914:	
  2640                           ; 4 bytes @ 0x2D
  2641                           
  2642                           
  2643                           ; 4 bytes @ 0x2D
  2644  00CD                     	ds	4
  2645  00D1                     _show_pwr$1916:
  2646                           
  2647                           ; 4 bytes @ 0x31
  2648  00D1                     	ds	4
  2649  00D5                     show_pwr@eff:
  2650                           
  2651                           ; 2 bytes @ 0x35
  2652  00D5                     	ds	2
  2653  00D7                     show_pwr@b:
  2654                           
  2655                           ; 4 bytes @ 0x37
  2656  00D7                     	ds	4
  2657  00DB                     show_pwr@a:
  2658                           
  2659                           ; 4 bytes @ 0x3B
  2660  00DB                     	ds	4
  2661  00DF                     show_pwr@p_ant:
  2662                           
  2663                           ; 2 bytes @ 0x3F
  2664  00DF                     	ds	2
  2665  00E1                     ??_lcd_pwr:
  2666                           
  2667                           ; 1 bytes @ 0x41
  2668  00E1                     	ds	3
  2669  00E4                     lcd_pwr@cnt:
  2670                           
  2671                           ; 1 bytes @ 0x44
  2672  00E4                     	ds	1
  2673  00E5                     lcd_pwr@peak_cnt:
  2674                           
  2675                           ; 1 bytes @ 0x45
  2676  00E5                     	ds	1
  2677  00E6                     _lcd_pwr$643:
  2678                           
  2679                           ; 1 bytes @ 0x46
  2680  00E6                     	ds	1
  2681  00E7                     lcd_pwr@delta:
  2682                           
  2683                           ; 2 bytes @ 0x47
  2684  00E7                     	ds	2
  2685  00E9                     lcd_pwr@p:
  2686                           
  2687                           ; 2 bytes @ 0x49
  2688  00E9                     	ds	2
  2689  00EB                     lcd_pwr@SWR_fixed:
  2690                           
  2691                           ; 2 bytes @ 0x4B
  2692  00EB                     	ds	2
  2693  00ED                     ??_show_reset:
  2694  00ED                     ??_button_proc_test:	
  2695                           ; 1 bytes @ 0x4D
  2696                           
  2697                           
  2698                           ; 1 bytes @ 0x4D
  2699  00ED                     	ds	2
  2700  00EF                     ??_tune:
  2701                           
  2702                           ; 1 bytes @ 0x4F
  2703  00EF                     	ds	1
  2704                           
  2705                           	psect	cstackCOMMON
  2706  0070                     __pcstackCOMMON:
  2707  0070                     ?_show_reset:
  2708  0070                     ?_lcd_ind:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0070                     ?_uartProcessInput:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0070                     ??_uartProcessInput:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0070                     ?_uartProcessOutput:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0070                     ??_uartProcessOutput:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_pic_init:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?_cells_init:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_eeprom_read:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_lcd_prep:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_Test_init:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_lcd_pwr:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?_button_proc:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ?_button_proc_test:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     ?_uartGetChar:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0070                     ?_tune_btn_push:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0070                     ?_Bcd2Dec:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ?_ADC_Init:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     ?_get_pwr:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ?_get_swr:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ?_set_ind:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ?_set_cap:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ?_set_sw:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_atu_reset:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0070                     ?_coarse_cap:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0070                     ?_coarse_tune:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_sharp_cap:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_sharp_ind:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_sub_tune:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_tune:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_isr:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_interrupt_init:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_main:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804                           
  2805                           ; 1 bytes @ 0x0
  2806  0070                     	ds	2
  2807  0072                     uartProcessInput@inbit:
  2808                           
  2809                           ; 1 bytes @ 0x2
  2810  0072                     	ds	1
  2811  0073                     ?_Delay_ms:
  2812  0073                     ??_pic_init:	
  2813                           ; 1 bytes @ 0x3
  2814                           
  2815  0073                     ??_eeprom_read:	
  2816                           ; 1 bytes @ 0x3
  2817                           
  2818  0073                     ?_uart_wr_str:	
  2819                           ; 1 bytes @ 0x3
  2820                           
  2821  0073                     ??_uartGetChar:	
  2822                           ; 1 bytes @ 0x3
  2823                           
  2824  0073                     ??_ADC_Init:	
  2825                           ; 1 bytes @ 0x3
  2826                           
  2827  0073                     ??_isr:	
  2828                           ; 1 bytes @ 0x3
  2829                           
  2830  0073                     ??_interrupt_init:	
  2831                           ; 1 bytes @ 0x3
  2832                           
  2833  0073                     ??___lmul:	
  2834                           ; 1 bytes @ 0x3
  2835                           
  2836  0073                     ?___bmul:	
  2837                           ; 1 bytes @ 0x3
  2838                           
  2839  0073                     ??___flge:	
  2840                           ; 1 bytes @ 0x3
  2841                           
  2842  0073                     ?_ADC_Get_Sample:	
  2843                           ; 1 bytes @ 0x3
  2844                           
  2845  0073                     ?__Umul8_16:	
  2846                           ; 2 bytes @ 0x3
  2847                           
  2848  0073                     ?___awdiv:	
  2849                           ; 2 bytes @ 0x3
  2850                           
  2851  0073                     ?___awmod:	
  2852                           ; 2 bytes @ 0x3
  2853                           
  2854  0073                     uart_wr_str@col:	
  2855                           ; 2 bytes @ 0x3
  2856                           
  2857  0073                     ___bmul@multiplicand:	
  2858                           ; 1 bytes @ 0x3
  2859                           
  2860  0073                     __Umul8_16@multiplicand:	
  2861                           ; 1 bytes @ 0x3
  2862                           
  2863  0073                     Delay_ms@time_in_ms:	
  2864                           ; 1 bytes @ 0x3
  2865                           
  2866  0073                     ___awdiv@divisor:	
  2867                           ; 2 bytes @ 0x3
  2868                           
  2869  0073                     ___awmod@divisor:	
  2870                           ; 2 bytes @ 0x3
  2871                           
  2872  0073                     ___lmul@product:	
  2873                           ; 2 bytes @ 0x3
  2874                           
  2875                           
  2876                           ; 4 bytes @ 0x3
  2877  0073                     	ds	1
  2878  0074                     ??___bmul:
  2879  0074                     uartGetChar@ret:	
  2880                           ; 1 bytes @ 0x4
  2881                           
  2882  0074                     uart_wr_str@str:	
  2883                           ; 1 bytes @ 0x4
  2884                           
  2885                           
  2886                           ; 2 bytes @ 0x4
  2887  0074                     	ds	1
  2888  0075                     ??_Delay_ms:
  2889  0075                     ??__Umul8_16:	
  2890                           ; 1 bytes @ 0x5
  2891                           
  2892  0075                     ??_get_reverse:	
  2893                           ; 1 bytes @ 0x5
  2894                           
  2895  0075                     ??_get_forward:	
  2896                           ; 1 bytes @ 0x5
  2897                           
  2898  0075                     ___bmul@product:	
  2899                           ; 1 bytes @ 0x5
  2900                           
  2901  0075                     ___awdiv@dividend:	
  2902                           ; 1 bytes @ 0x5
  2903                           
  2904  0075                     ___awmod@dividend:	
  2905                           ; 2 bytes @ 0x5
  2906                           
  2907                           
  2908                           ; 2 bytes @ 0x5
  2909  0075                     	ds	1
  2910  0076                     uart_wr_str@len:
  2911  0076                     eeprom_read@addr:	
  2912                           ; 1 bytes @ 0x6
  2913                           
  2914  0076                     ___bmul@multiplier:	
  2915                           ; 1 bytes @ 0x6
  2916                           
  2917  0076                     Delay_ms@i:	
  2918                           ; 1 bytes @ 0x6
  2919                           
  2920                           
  2921                           ; 2 bytes @ 0x6
  2922  0076                     	ds	1
  2923  0077                     ??___aldiv:
  2924  0077                     ??___awdiv:	
  2925                           ; 1 bytes @ 0x7
  2926                           
  2927  0077                     ??___awmod:	
  2928                           ; 1 bytes @ 0x7
  2929                           
  2930  0077                     Bcd2Dec@bcdnum:	
  2931                           ; 1 bytes @ 0x7
  2932                           
  2933                           
  2934                           ; 1 bytes @ 0x7
  2935  0077                     	ds	1
  2936  0078                     ??_Vdelay_ms:
  2937  0078                     ??_set_sw:	
  2938                           ; 1 bytes @ 0x8
  2939                           
  2940  0078                     ??_atu_reset:	
  2941                           ; 1 bytes @ 0x8
  2942                           
  2943  0078                     ??___wmul:	
  2944                           ; 1 bytes @ 0x8
  2945                           
  2946                           
  2947                           	psect	cstackBANK0
  2948  0020                     __pcstackBANK0:	
  2949                           ; 1 bytes @ 0x8
  2950                           
  2951  0020                     ?___flge:
  2952  0020                     ??_ADC_Get_Sample:	
  2953                           ; 1 bit 
  2954                           
  2955  0020                     ?_Button:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0020                     ?_Vdelay_ms:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0020                     ??_uart_wr_str:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0020                     ??_Bcd2Dec:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0020                     ?___lmul:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0020                     ___awdiv@counter:	
  2971                           ; 4 bytes @ 0x0
  2972                           
  2973  0020                     ___awmod@counter:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0020                     Button@port:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0020                     Vdelay_ms@time_in_ms:	
  2980                           ; 2 bytes @ 0x0
  2981                           
  2982  0020                     __Umul8_16@product:	
  2983                           ; 2 bytes @ 0x0
  2984                           
  2985  0020                     ___lmul@multiplier:	
  2986                           ; 2 bytes @ 0x0
  2987                           
  2988  0020                     ___flge@ff1:	
  2989                           ; 4 bytes @ 0x0
  2990                           
  2991                           
  2992                           ; 4 bytes @ 0x0
  2993  0020                     	ds	1
  2994  0021                     ___awdiv@sign:
  2995  0021                     ___awmod@sign:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998                           
  2999                           ; 1 bytes @ 0x1
  3000  0021                     	ds	1
  3001  0022                     ??_set_ind:
  3002  0022                     ??_set_cap:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     set_sw@g_c_SW:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     Button@pin:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     ___awdiv@quotient:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     __Umul8_16@word_mpld:	
  3015                           ; 2 bytes @ 0x2
  3016                           
  3017                           
  3018                           ; 2 bytes @ 0x2
  3019  0022                     	ds	1
  3020  0023                     ?___wmul:
  3021  0023                     set_ind@Ind:	
  3022                           ; 2 bytes @ 0x3
  3023                           
  3024  0023                     set_cap@Cap:	
  3025                           ; 1 bytes @ 0x3
  3026                           
  3027  0023                     Button@time:	
  3028                           ; 1 bytes @ 0x3
  3029                           
  3030  0023                     uart_wr_str@lin:	
  3031                           ; 1 bytes @ 0x3
  3032                           
  3033  0023                     ___wmul@multiplier:	
  3034                           ; 1 bytes @ 0x3
  3035                           
  3036                           
  3037                           ; 2 bytes @ 0x3
  3038  0023                     	ds	1
  3039  0024                     ?_eeprom_write:
  3040  0024                     ?_IntToStr:	
  3041                           ; 1 bytes @ 0x4
  3042                           
  3043  0024                     set_ind@Indbits:	
  3044                           ; 1 bytes @ 0x4
  3045                           
  3046  0024                     set_cap@Capbits:	
  3047                           ; 1 bytes @ 0x4
  3048                           
  3049  0024                     Button@active_state:	
  3050                           ; 1 bytes @ 0x4
  3051                           
  3052  0024                     uart_wr_str@i:	
  3053                           ; 1 bytes @ 0x4
  3054                           
  3055  0024                     eeprom_write@value:	
  3056                           ; 1 bytes @ 0x4
  3057                           
  3058  0024                     __Umul8_16@multiplier:	
  3059                           ; 1 bytes @ 0x4
  3060                           
  3061  0024                     IntToStr@number:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0024                     ___lmul@multiplicand:	
  3065                           ; 2 bytes @ 0x4
  3066                           
  3067  0024                     ___flge@ff2:	
  3068                           ; 4 bytes @ 0x4
  3069                           
  3070                           
  3071                           ; 4 bytes @ 0x4
  3072  0024                     	ds	1
  3073  0025                     ??_Button:
  3074  0025                     ??_eeprom_write:	
  3075                           ; 1 bytes @ 0x5
  3076                           
  3077  0025                     ADC_Get_Sample@channel:	
  3078                           ; 1 bytes @ 0x5
  3079                           
  3080  0025                     uart_wr_str@pos:	
  3081                           ; 1 bytes @ 0x5
  3082                           
  3083  0025                     ___wmul@multiplicand:	
  3084                           ; 1 bytes @ 0x5
  3085                           
  3086                           
  3087                           ; 2 bytes @ 0x5
  3088  0025                     	ds	1
  3089  0026                     IntToStr@output:
  3090  0026                     ADC_Get_Sample@result:	
  3091                           ; 1 bytes @ 0x6
  3092                           
  3093                           
  3094                           ; 2 bytes @ 0x6
  3095  0026                     	ds	1
  3096  0027                     ??_IntToStr:
  3097  0027                     Button@loop:	
  3098                           ; 1 bytes @ 0x7
  3099                           
  3100  0027                     eeprom_write@addr:	
  3101                           ; 1 bytes @ 0x7
  3102                           
  3103  0027                     ___wmul@product:	
  3104                           ; 1 bytes @ 0x7
  3105                           
  3106                           
  3107                           ; 2 bytes @ 0x7
  3108  0027                     	ds	1
  3109  0028                     ?___aldiv:
  3110  0028                     ADC_Get_Sample@lower:	
  3111                           ; 4 bytes @ 0x8
  3112                           
  3113  0028                     Button@value:	
  3114                           ; 1 bytes @ 0x8
  3115                           
  3116  0028                     IntToStr@loopcounter:	
  3117                           ; 1 bytes @ 0x8
  3118                           
  3119  0028                     ___aldiv@divisor:	
  3120                           ; 1 bytes @ 0x8
  3121                           
  3122                           
  3123                           ; 4 bytes @ 0x8
  3124  0028                     	ds	1
  3125  0029                     ??_cells_init:
  3126  0029                     ?_correction:	
  3127                           ; 1 bytes @ 0x9
  3128                           
  3129  0029                     ADC_Get_Sample@upper:	
  3130                           ; 2 bytes @ 0x9
  3131                           
  3132  0029                     IntToStr@p:	
  3133                           ; 1 bytes @ 0x9
  3134                           
  3135  0029                     correction@input:	
  3136                           ; 1 bytes @ 0x9
  3137                           
  3138                           
  3139                           ; 2 bytes @ 0x9
  3140  0029                     	ds	1
  3141  002A                     ??_lcd_ind:
  3142  002A                     ?_lcd_swr:	
  3143                           ; 1 bytes @ 0xA
  3144                           
  3145  002A                     ?_get_reverse:	
  3146                           ; 1 bytes @ 0xA
  3147                           
  3148  002A                     ?_get_forward:	
  3149                           ; 2 bytes @ 0xA
  3150                           
  3151  002A                     lcd_swr@swr:	
  3152                           ; 2 bytes @ 0xA
  3153                           
  3154                           
  3155                           ; 2 bytes @ 0xA
  3156  002A                     	ds	1
  3157  002B                     ??_correction:
  3158                           
  3159                           ; 1 bytes @ 0xB
  3160  002B                     	ds	1
  3161  002C                     ??_lcd_swr:
  3162  002C                     ?___xxtofl:	
  3163                           ; 1 bytes @ 0xC
  3164                           
  3165  002C                     lcd_ind@indbits:	
  3166                           ; 4 bytes @ 0xC
  3167                           
  3168  002C                     get_reverse@returnReverse:	
  3169                           ; 1 bytes @ 0xC
  3170                           
  3171  002C                     get_forward@returnUIntValue:	
  3172                           ; 2 bytes @ 0xC
  3173                           
  3174  002C                     ___aldiv@dividend:	
  3175                           ; 2 bytes @ 0xC
  3176                           
  3177  002C                     ___xxtofl@val:	
  3178                           ; 4 bytes @ 0xC
  3179                           
  3180                           
  3181                           ; 4 bytes @ 0xC
  3182  002C                     	ds	1
  3183  002D                     lcd_ind@capbits:
  3184                           
  3185                           ; 1 bytes @ 0xD
  3186  002D                     	ds	1
  3187  002E                     lcd_ind@l_work_int:
  3188                           
  3189                           ; 2 bytes @ 0xE
  3190  002E                     	ds	2
  3191  0030                     ??___xxtofl:
  3192  0030                     lcd_ind@l_line:	
  3193                           ; 1 bytes @ 0x10
  3194                           
  3195  0030                     ___aldiv@counter:	
  3196                           ; 1 bytes @ 0x10
  3197                           
  3198                           
  3199                           ; 1 bytes @ 0x10
  3200  0030                     	ds	1
  3201  0031                     ??_lcd_prep:
  3202  0031                     ___aldiv@sign:	
  3203                           ; 1 bytes @ 0x11
  3204                           
  3205                           
  3206                           ; 1 bytes @ 0x11
  3207  0031                     	ds	1
  3208  0032                     ___aldiv@quotient:
  3209                           
  3210                           ; 4 bytes @ 0x12
  3211  0032                     	ds	1
  3212  0033                     ??_Test_init:
  3213                           
  3214                           ; 1 bytes @ 0x13
  3215  0033                     	ds	1
  3216  0034                     ___xxtofl@sign:
  3217                           
  3218                           ; 1 bytes @ 0x14
  3219  0034                     	ds	1
  3220  0035                     ___xxtofl@exp:
  3221                           
  3222                           ; 1 bytes @ 0x15
  3223  0035                     	ds	1
  3224  0036                     ___xxtofl@arg:
  3225                           
  3226                           ; 4 bytes @ 0x16
  3227  0036                     	ds	4
  3228  003A                     ?___fldiv:
  3229  003A                     ___fldiv@a:	
  3230                           ; 4 bytes @ 0x1A
  3231                           
  3232                           
  3233                           ; 4 bytes @ 0x1A
  3234  003A                     	ds	4
  3235  003E                     ___fldiv@b:
  3236                           
  3237                           ; 4 bytes @ 0x1E
  3238  003E                     	ds	4
  3239  0042                     ??___fldiv:
  3240                           
  3241                           ; 1 bytes @ 0x22
  3242  0042                     	ds	5
  3243  0047                     ___fldiv@rem:
  3244                           
  3245                           ; 4 bytes @ 0x27
  3246  0047                     	ds	4
  3247  004B                     ___fldiv@sign:
  3248                           
  3249                           ; 1 bytes @ 0x2B
  3250  004B                     	ds	1
  3251  004C                     ___fldiv@new_exp:
  3252                           
  3253                           ; 2 bytes @ 0x2C
  3254  004C                     	ds	2
  3255  004E                     ___fldiv@grs:
  3256                           
  3257                           ; 4 bytes @ 0x2E
  3258  004E                     	ds	4
  3259  0052                     ___fldiv@bexp:
  3260                           
  3261                           ; 1 bytes @ 0x32
  3262  0052                     	ds	1
  3263  0053                     ___fldiv@aexp:
  3264                           
  3265                           ; 1 bytes @ 0x33
  3266  0053                     	ds	1
  3267  0054                     ?___fladd:
  3268  0054                     ___fladd@b:	
  3269                           ; 4 bytes @ 0x34
  3270                           
  3271                           
  3272                           ; 4 bytes @ 0x34
  3273  0054                     	ds	4
  3274  0058                     ___fladd@a:
  3275                           
  3276                           ; 4 bytes @ 0x38
  3277  0058                     	ds	4
  3278  005C                     ??___fladd:
  3279                           
  3280                           ; 1 bytes @ 0x3C
  3281  005C                     	ds	8
  3282  0064                     ___fladd@signs:
  3283                           
  3284                           ; 1 bytes @ 0x44
  3285  0064                     	ds	1
  3286  0065                     ___fladd@aexp:
  3287                           
  3288                           ; 1 bytes @ 0x45
  3289  0065                     	ds	1
  3290  0066                     ___fladd@bexp:
  3291                           
  3292                           ; 1 bytes @ 0x46
  3293  0066                     	ds	1
  3294  0067                     ___fladd@grs:
  3295                           
  3296                           ; 1 bytes @ 0x47
  3297  0067                     	ds	1
  3298  0068                     ?___flmul:
  3299  0068                     ___flmul@b:	
  3300                           ; 4 bytes @ 0x48
  3301                           
  3302                           
  3303                           ; 4 bytes @ 0x48
  3304  0068                     	ds	4
  3305  006C                     ___flmul@a:
  3306                           
  3307                           ; 4 bytes @ 0x4C
  3308  006C                     	ds	4
  3309                           
  3310                           	psect	maintext
  3311  1A85                     __pmaintext:	
  3312 ;;
  3313 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3314 ;;
  3315 ;; *************** function _main *****************
  3316 ;; Defined at:
  3317 ;;		line 74 in file "main.c"
  3318 ;; Parameters:    Size  Location     Type
  3319 ;;		None
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;		None
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  1    wreg      void 
  3324 ;; Registers used:
  3325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3326 ;; Tracked objects:
  3327 ;;		On entry : B1F/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Temps:          0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  3335 ;;Total ram usage:        3 bytes
  3336 ;; Hardware stack levels required when called: 15
  3337 ;; This function calls:
  3338 ;;		_Delay_ms
  3339 ;;		_Test_init
  3340 ;;		_button_proc
  3341 ;;		_button_proc_test
  3342 ;;		_cells_init
  3343 ;;		_eeprom_read
  3344 ;;		_interrupt_init
  3345 ;;		_lcd_ind
  3346 ;;		_lcd_prep
  3347 ;;		_lcd_pwr
  3348 ;;		_pic_init
  3349 ;;		_set_cap
  3350 ;;		_set_ind
  3351 ;;		_set_sw
  3352 ;; This function is called by:
  3353 ;;		Startup code after reset
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357  1A85                     _main:	
  3358                           ;psect for function _main
  3359                           
  3360                           
  3361                           ;main.c: 76:     if (STATUSbits.nTO == 0)
  3362                           
  3363                           ;incstack = 0
  3364                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3365  1A85  1A03               	btfsc	3,4	;volatile
  3366  1A86  2A8A               	goto	l9528
  3367                           
  3368                           ;main.c: 77:         g_b_Restart = 1;
  3369  1A87  0023               	movlb	3	; select bank3
  3370  1A88  01CC               	clrf	_g_b_Restart^(0+384)
  3371  1A89  0ACC               	incf	_g_b_Restart^(0+384),f
  3372  1A8A                     l9528:
  3373                           
  3374                           ;main.c: 79:     pic_init();
  3375  1A8A  31AD  25B9  319A   	fcall	_pic_init
  3376                           
  3377                           ;main.c: 81:     interrupt_init();
  3378  1A8D  31AC  2494  319A   	fcall	_interrupt_init
  3379                           
  3380                           ;main.c: 84:     Delay_ms(300);
  3381  1A90  302C               	movlw	44
  3382  1A91  00F3               	movwf	Delay_ms@time_in_ms
  3383  1A92  3001               	movlw	1
  3384  1A93  00F4               	movwf	Delay_ms@time_in_ms+1
  3385  1A94  31AC  24FE  319A   	fcall	_Delay_ms
  3386  1A97  0064               	clrwdt	;# 
  3387                           
  3388                           ;main.c: 86:     cells_init();
  3389  1A98  318C  24F1  319A   	fcall	_cells_init
  3390                           
  3391                           ;main.c: 88:     if (e_c_ledtype == 0) {
  3392  1A9B  0022               	movlb	2	; select bank2
  3393  1A9C  082F               	movf	_e_c_ledtype^(0+256),w
  3394  1A9D  1D03               	btfss	3,2
  3395  1A9E  2AA1               	goto	l9534
  3396                           
  3397                           ;main.c: 89:         LATBbits.LATB6 = 1;
  3398  1A9F  170D               	bsf	13,6	;volatile
  3399                           
  3400                           ;main.c: 90:         LATBbits.LATB7 = 1;
  3401  1AA0  178D               	bsf	13,7	;volatile
  3402  1AA1                     l9534:
  3403                           
  3404                           ;main.c: 94:     Delay_ms(300);
  3405  1AA1  302C               	movlw	44
  3406  1AA2  00F3               	movwf	Delay_ms@time_in_ms
  3407  1AA3  3001               	movlw	1
  3408  1AA4  00F4               	movwf	Delay_ms@time_in_ms+1
  3409  1AA5  31AC  24FE  319A   	fcall	_Delay_ms
  3410  1AA8  0064               	clrwdt	;# 
  3411                           
  3412                           ;main.c: 97:     if (e_c_num_L_q == 5)
  3413  1AA9  3005               	movlw	5
  3414  1AAA  0022               	movlb	2	; select bank2
  3415  1AAB  066D               	xorwf	_e_c_num_L_q^(0+256),w
  3416  1AAC  1D03               	btfss	3,2
  3417  1AAD  2AB1               	goto	l9540
  3418                           
  3419                           ;main.c: 98:         g_c_L_mult = 1;
  3420  1AAE  01EF               	clrf	_g_c_L_mult^(0+256)
  3421  1AAF  0AEF               	incf	_g_c_L_mult^(0+256),f
  3422  1AB0  2AC1               	goto	l9548
  3423  1AB1                     l9540:
  3424  1AB1  3006               	movlw	6
  3425  1AB2  066D               	xorwf	_e_c_num_L_q^(0+256),w
  3426  1AB3  1D03               	btfss	3,2
  3427  1AB4  2AB7               	goto	l9544
  3428                           
  3429                           ;main.c: 100:         g_c_L_mult = 2;
  3430  1AB5  3002               	movlw	2
  3431  1AB6  2ABC               	goto	L1
  3432  1AB7                     l9544:
  3433  1AB7  3007               	movlw	7
  3434  1AB8  066D               	xorwf	_e_c_num_L_q^(0+256),w
  3435  1AB9  1D03               	btfss	3,2
  3436  1ABA  2AC1               	goto	l9548
  3437                           
  3438                           ;main.c: 102:         g_c_L_mult = 4;
  3439  1ABB  3004               	movlw	4
  3440  1ABC                     L1:
  3441  1ABC  0023               	movlb	3	; select bank3
  3442  1ABD  00DA               	movwf	??_main^(0+384)
  3443  1ABE  085A               	movf	??_main^(0+384),w
  3444  1ABF  0022               	movlb	2	; select bank2
  3445  1AC0  00EF               	movwf	_g_c_L_mult^(0+256)
  3446  1AC1                     l9548:
  3447                           
  3448                           ;main.c: 103:     if (e_c_num_C_q == 5)
  3449  1AC1  3005               	movlw	5
  3450  1AC2  066C               	xorwf	_e_c_num_C_q^(0+256),w
  3451  1AC3  1D03               	btfss	3,2
  3452  1AC4  2AC8               	goto	l9552
  3453                           
  3454                           ;main.c: 104:         g_c_C_mult = 1;
  3455  1AC5  01EE               	clrf	_g_c_C_mult^(0+256)
  3456  1AC6  0AEE               	incf	_g_c_C_mult^(0+256),f
  3457  1AC7  2AD8               	goto	l9560
  3458  1AC8                     l9552:
  3459  1AC8  3006               	movlw	6
  3460  1AC9  066C               	xorwf	_e_c_num_C_q^(0+256),w
  3461  1ACA  1D03               	btfss	3,2
  3462  1ACB  2ACE               	goto	l9556
  3463                           
  3464                           ;main.c: 106:         g_c_C_mult = 2;
  3465  1ACC  3002               	movlw	2
  3466  1ACD  2AD3               	goto	L2
  3467  1ACE                     l9556:
  3468  1ACE  3007               	movlw	7
  3469  1ACF  066C               	xorwf	_e_c_num_C_q^(0+256),w
  3470  1AD0  1D03               	btfss	3,2
  3471  1AD1  2AD8               	goto	l9560
  3472                           
  3473                           ;main.c: 108:         g_c_C_mult = 4;
  3474  1AD2  3004               	movlw	4
  3475  1AD3                     L2:
  3476  1AD3  0023               	movlb	3	; select bank3
  3477  1AD4  00DA               	movwf	??_main^(0+384)
  3478  1AD5  085A               	movf	??_main^(0+384),w
  3479  1AD6  0022               	movlb	2	; select bank2
  3480  1AD7  00EE               	movwf	_g_c_C_mult^(0+256)
  3481  1AD8                     l9560:
  3482                           
  3483                           ;main.c: 110:     Delay_ms(300);
  3484  1AD8  302C               	movlw	44
  3485  1AD9  00F3               	movwf	Delay_ms@time_in_ms
  3486  1ADA  3001               	movlw	1
  3487  1ADB  00F4               	movwf	Delay_ms@time_in_ms+1
  3488  1ADC  31AC  24FE  319A   	fcall	_Delay_ms
  3489  1ADF  0064               	clrwdt	;# 
  3490                           
  3491                           ;main.c: 112:     Delay_ms(300);
  3492  1AE0  302C               	movlw	44
  3493  1AE1  00F3               	movwf	Delay_ms@time_in_ms
  3494  1AE2  3001               	movlw	1
  3495  1AE3  00F4               	movwf	Delay_ms@time_in_ms+1
  3496  1AE4  31AC  24FE  319A   	fcall	_Delay_ms
  3497  1AE7  0064               	clrwdt	;# 
  3498                           
  3499                           ;main.c: 114:     Delay_ms(300);
  3500  1AE8  302C               	movlw	44
  3501  1AE9  00F3               	movwf	Delay_ms@time_in_ms
  3502  1AEA  3001               	movlw	1
  3503  1AEB  00F4               	movwf	Delay_ms@time_in_ms+1
  3504  1AEC  31AC  24FE  319A   	fcall	_Delay_ms
  3505  1AEF  0064               	clrwdt	;# 
  3506                           
  3507                           ;main.c: 116:     Delay_ms(300);
  3508  1AF0  302C               	movlw	44
  3509  1AF1  00F3               	movwf	Delay_ms@time_in_ms
  3510  1AF2  3001               	movlw	1
  3511  1AF3  00F4               	movwf	Delay_ms@time_in_ms+1
  3512  1AF4  31AC  24FE  319A   	fcall	_Delay_ms
  3513  1AF7  0064               	clrwdt	;# 
  3514                           
  3515                           ;main.c: 118:     Delay_ms(300);
  3516  1AF8  302C               	movlw	44
  3517  1AF9  00F3               	movwf	Delay_ms@time_in_ms
  3518  1AFA  3001               	movlw	1
  3519  1AFB  00F4               	movwf	Delay_ms@time_in_ms+1
  3520  1AFC  31AC  24FE  319A   	fcall	_Delay_ms
  3521  1AFF  0064               	clrwdt	;# 
  3522                           
  3523                           ;main.c: 123:         g_c_cap = eeprom_read(255);
  3524  1B00  30FF               	movlw	255
  3525  1B01  31AC  24C0  319A   	fcall	_eeprom_read
  3526  1B04  00DA               	movwf	??_main^(0+384)
  3527  1B05  085A               	movf	??_main^(0+384),w
  3528  1B06  00FA               	movwf	_g_c_cap
  3529                           
  3530                           ;main.c: 124:         g_c_ind = eeprom_read(254);
  3531  1B07  30FE               	movlw	254
  3532  1B08  31AC  24C0  319A   	fcall	_eeprom_read
  3533  1B0B  00DA               	movwf	??_main^(0+384)
  3534  1B0C  085A               	movf	??_main^(0+384),w
  3535  1B0D  0022               	movlb	2	; select bank2
  3536  1B0E  00BC               	movwf	_g_c_ind^(0+256)
  3537                           
  3538                           ;main.c: 125:         g_c_SW = eeprom_read(253);
  3539  1B0F  30FD               	movlw	253
  3540  1B10  31AC  24C0  319A   	fcall	_eeprom_read
  3541  1B13  00DA               	movwf	??_main^(0+384)
  3542  1B14  085A               	movf	??_main^(0+384),w
  3543  1B15  0022               	movlb	2	; select bank2
  3544  1B16  00BB               	movwf	_g_c_SW^(0+256)
  3545                           
  3546                           ;main.c: 126:         g_i_swr_a = eeprom_read(252) * 256;
  3547  1B17  30FC               	movlw	252
  3548  1B18  31AC  24C0  319A   	fcall	_eeprom_read
  3549  1B1B  00DA               	movwf	??_main^(0+384)
  3550  1B1C  01DB               	clrf	(??_main^(0+384)+1)
  3551  1B1D  085A               	movf	??_main^(0+384),w
  3552  1B1E  00DB               	movwf	(??_main^(0+384)+1)
  3553  1B1F  01DA               	clrf	??_main^(0+384)
  3554  1B20  085A               	movf	??_main^(0+384),w
  3555  1B21  0022               	movlb	2	; select bank2
  3556  1B22  00CB               	movwf	_g_i_swr_a^(0+256)
  3557  1B23  0023               	movlb	3	; select bank3
  3558  1B24  085B               	movf	(??_main+1)^(0+384),w
  3559  1B25  0022               	movlb	2	; select bank2
  3560  1B26  00CC               	movwf	(_g_i_swr_a+1)^(0+256)
  3561                           
  3562                           ;main.c: 127:         g_i_swr_a += eeprom_read(251);
  3563  1B27  30FB               	movlw	251
  3564  1B28  31AC  24C0  319A   	fcall	_eeprom_read
  3565  1B2B  00DA               	movwf	??_main^(0+384)
  3566  1B2C  01DB               	clrf	(??_main^(0+384)+1)
  3567  1B2D  085A               	movf	??_main^(0+384),w
  3568  1B2E  0022               	movlb	2	; select bank2
  3569  1B2F  07CB               	addwf	_g_i_swr_a^(0+256),f
  3570  1B30  0023               	movlb	3	; select bank3
  3571  1B31  085B               	movf	(??_main+1)^(0+384),w
  3572  1B32  0022               	movlb	2	; select bank2
  3573  1B33  3DCC               	addwfc	(_g_i_swr_a+1)^(0+256),f
  3574                           
  3575                           ;main.c: 128:         set_ind(g_c_ind);
  3576  1B34  083C               	movf	_g_c_ind^(0+256),w
  3577  1B35  31A2  22BA  319A   	fcall	_set_ind
  3578                           
  3579                           ;main.c: 129:         set_cap(g_c_cap);
  3580  1B38  087A               	movf	_g_c_cap,w
  3581  1B39  31AE  2636  319A   	fcall	_set_cap
  3582                           
  3583                           ;main.c: 130:         set_sw(g_c_SW);
  3584  1B3C  0022               	movlb	2	; select bank2
  3585  1B3D  083B               	movf	_g_c_SW^(0+256),w
  3586  1B3E  31AC  24AE  319A   	fcall	_set_sw
  3587                           
  3588                           ;main.c: 131:         if (g_b_Restart == 1)
  3589  1B41  0023               	movlb	3	; select bank3
  3590  1B42  034C               	decf	_g_b_Restart^(0+384),w
  3591  1B43  1D03               	btfss	3,2
  3592  1B44  2B48               	goto	l9590
  3593                           
  3594                           ;main.c: 132:             g_b_lcd_prep_short = 1;
  3595  1B45  0022               	movlb	2	; select bank2
  3596  1B46  01AC               	clrf	_g_b_lcd_prep_short^(0+256)
  3597  1B47  0AAC               	incf	_g_b_lcd_prep_short^(0+256),f
  3598  1B48                     l9590:
  3599                           
  3600                           ;main.c: 133:         lcd_prep();
  3601  1B48  3186  2647  319A   	fcall	_lcd_prep
  3602                           
  3603                           ;main.c: 137:     lcd_ind();
  3604                           
  3605                           ;main.c: 134:     } else
  3606  1B4B  3195  2597  319A   	fcall	_lcd_ind
  3607  1B4E                     l433:	
  3608                           ;main.c: 141:     while (1) {
  3609                           
  3610  1B4E  0064               	clrwdt	;# 
  3611                           
  3612                           ;main.c: 145:         if (g_b_Test_mode == 0)
  3613  1B4F  318A  2246  319A   	fcall	_lcd_pwr
  3614                           
  3615                           ;main.c: 146:             button_proc();
  3616  1B52  319D  2515  319A   	fcall	_button_proc
  3617  1B55  2B4E               	goto	l433
  3618  1B56                     __end_of_main:
  3619                           
  3620                           	psect	text1
  3621  2DB9                     __ptext1:	
  3622 ;; *************** function _pic_init *****************
  3623 ;; Defined at:
  3624 ;;		line 7 in file "pic_init.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;		None
  3629 ;; Return value:  Size  Location     Type
  3630 ;;                  1    wreg      void 
  3631 ;; Registers used:
  3632 ;;		wreg, status,2, status,0, pclath, cstack
  3633 ;; Tracked objects:
  3634 ;;		On entry : B1C/0
  3635 ;;		On exit  : 1F/4
  3636 ;;		Unchanged: 0/0
  3637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3642 ;;Total ram usage:        0 bytes
  3643 ;; Hardware stack levels used: 1
  3644 ;; Hardware stack levels required when called: 3
  3645 ;; This function calls:
  3646 ;;		_ADC_Init
  3647 ;; This function is called by:
  3648 ;;		_main
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651                           
  3652  2DB9                     _pic_init:	
  3653                           ;psect for function _pic_init
  3654                           
  3655                           
  3656                           ;incstack = 0
  3657                           ; Regs used in _pic_init: [wreg+status,2+status,0+pclath+cstack]
  3658  2DB9  0064               	clrwdt	;# 
  3659                           
  3660                           ;pic_init.c: 9:     WDTCONbits.WDTPS4 = 0;
  3661  2DBA  0021               	movlb	1	; select bank1
  3662  2DBB  1297               	bcf	23,5	;volatile
  3663                           
  3664                           ;pic_init.c: 10:     WDTCONbits.WDTPS3 = 1;
  3665  2DBC  1617               	bsf	23,4	;volatile
  3666                           
  3667                           ;pic_init.c: 11:     WDTCONbits.WDTPS2 = 0;
  3668  2DBD  1197               	bcf	23,3	;volatile
  3669                           
  3670                           ;pic_init.c: 12:     WDTCONbits.WDTPS1 = 1;
  3671  2DBE  1517               	bsf	23,2	;volatile
  3672                           
  3673                           ;pic_init.c: 13:     WDTCONbits.WDTPS0 = 0;
  3674  2DBF  1097               	bcf	23,1	;volatile
  3675  2DC0  0064               	clrwdt	;# 
  3676                           
  3677                           ;pic_init.c: 16:     ANSELAbits.ANSELA = 0;
  3678  2DC1  30C0               	movlw	-64
  3679  2DC2  0023               	movlb	3	; select bank3
  3680  2DC3  058C               	andwf	12,f	;volatile
  3681                           
  3682                           ;pic_init.c: 17:     ANSELAbits.ANSA0 = 1;
  3683  2DC4  140C               	bsf	12,0	;volatile
  3684                           
  3685                           ;pic_init.c: 18:     ANSELAbits.ANSA1 = 1;
  3686  2DC5  148C               	bsf	12,1	;volatile
  3687                           
  3688                           ;pic_init.c: 19:     ANSELBbits.ANSELB = 0;
  3689  2DC6  30C0               	movlw	-64
  3690  2DC7  058D               	andwf	13,f	;volatile
  3691                           
  3692                           ;pic_init.c: 21:     CM1CON0bits.C1ON = 0;
  3693  2DC8  0022               	movlb	2	; select bank2
  3694  2DC9  1391               	bcf	17,7	;volatile
  3695                           
  3696                           ;pic_init.c: 22:     CM2CON0bits.C2ON = 0;
  3697  2DCA  1393               	bcf	19,7	;volatile
  3698                           
  3699                           ;pic_init.c: 24:     OSCCON = 0b01111010;
  3700  2DCB  307A               	movlw	122
  3701  2DCC  0021               	movlb	1	; select bank1
  3702  2DCD  0099               	movwf	25	;volatile
  3703                           
  3704                           ;pic_init.c: 26:     PORTA = 0;
  3705  2DCE  0020               	movlb	0	; select bank0
  3706  2DCF  018C               	clrf	12	;volatile
  3707                           
  3708                           ;pic_init.c: 27:     PORTB = 0;
  3709  2DD0  018D               	clrf	13	;volatile
  3710                           
  3711                           ;pic_init.c: 28:     PORTC = 0;
  3712  2DD1  018E               	clrf	14	;volatile
  3713                           
  3714                           ;pic_init.c: 30:     LATA = 0b11000000;
  3715  2DD2  30C0               	movlw	192
  3716  2DD3  0022               	movlb	2	; select bank2
  3717  2DD4  008C               	movwf	12	;volatile
  3718                           
  3719                           ;pic_init.c: 31:     LATB = 0;
  3720  2DD5  018D               	clrf	13	;volatile
  3721                           
  3722                           ;pic_init.c: 32:     LATC = 0;
  3723  2DD6  018E               	clrf	14	;volatile
  3724                           
  3725                           ;pic_init.c: 33:     TRISA = 0b00000011;
  3726  2DD7  3003               	movlw	3
  3727  2DD8  0021               	movlb	1	; select bank1
  3728  2DD9  008C               	movwf	12	;volatile
  3729                           
  3730                           ;pic_init.c: 34:     TRISB = 0b00000111;
  3731  2DDA  3007               	movlw	7
  3732  2DDB  008D               	movwf	13	;volatile
  3733                           
  3734                           ;pic_init.c: 35:     TRISC = 0b00000000;
  3735  2DDC  018E               	clrf	14	;volatile
  3736                           
  3737                           ;pic_init.c: 37:     TRISBbits.TRISB1 = 1;
  3738  2DDD  148D               	bsf	13,1	;volatile
  3739                           
  3740                           ;pic_init.c: 38:     TRISBbits.TRISB1 = 0;
  3741  2DDE  108D               	bcf	13,1	;volatile
  3742                           
  3743                           ;pic_init.c: 40:     ADC_Init();
  3744  2DDF  3180  2003         	fcall	_ADC_Init
  3745                           
  3746                           ;pic_init.c: 42:     ADCON1bits.ADPREF0 = 1;
  3747  2DE1  141E               	bsf	30,0	;volatile
  3748                           
  3749                           ;pic_init.c: 43:     ADCON1bits.ADPREF1 = 1;
  3750  2DE2  149E               	bsf	30,1	;volatile
  3751                           
  3752                           ;pic_init.c: 46:     FVRCON = 0x81;
  3753  2DE3  3081               	movlw	129
  3754  2DE4  0022               	movlb	2	; select bank2
  3755  2DE5  0097               	movwf	23	;volatile
  3756                           
  3757                           ;pic_init.c: 51:     ADCON1 = 0xA3;
  3758  2DE6  30A3               	movlw	163
  3759  2DE7  0021               	movlb	1	; select bank1
  3760  2DE8  009E               	movwf	30	;volatile
  3761                           
  3762                           ;pic_init.c: 53:     ADCON0bits.ADON = 1;
  3763  2DE9  141D               	bsf	29,0	;volatile
  3764                           
  3765                           ;pic_init.c: 55:     OPTION_REGbits.nWPUEN = 0;
  3766  2DEA  1395               	bcf	21,7	;volatile
  3767                           
  3768                           ;pic_init.c: 56:     WPUBbits.WPUB0 = 1;
  3769  2DEB  0024               	movlb	4	; select bank4
  3770  2DEC  140D               	bsf	13,0	;volatile
  3771                           
  3772                           ;pic_init.c: 57:     WPUBbits.WPUB1 = 1;
  3773  2DED  148D               	bsf	13,1	;volatile
  3774                           
  3775                           ;pic_init.c: 58:     WPUBbits.WPUB2 = 1;
  3776  2DEE  150D               	bsf	13,2	;volatile
  3777                           
  3778                           ;pic_init.c: 60:     INTCONbits.GIE = 0;
  3779  2DEF  138B               	bcf	11,7	;volatile
  3780  2DF0  0008               	return
  3781  2DF1                     __end_of_pic_init:
  3782                           
  3783                           	psect	text2
  3784  0003                     __ptext2:	
  3785 ;; *************** function _ADC_Init *****************
  3786 ;; Defined at:
  3787 ;;		line 133 in file "cross_compiler.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;		None
  3790 ;; Auto vars:     Size  Location     Type
  3791 ;;		None
  3792 ;; Return value:  Size  Location     Type
  3793 ;;                  1    wreg      void 
  3794 ;; Registers used:
  3795 ;;		None
  3796 ;; Tracked objects:
  3797 ;;		On entry : 1F/1
  3798 ;;		On exit  : 1F/1
  3799 ;;		Unchanged: 1F/0
  3800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3805 ;;Total ram usage:        0 bytes
  3806 ;; Hardware stack levels used: 1
  3807 ;; Hardware stack levels required when called: 2
  3808 ;; This function calls:
  3809 ;;		Nothing
  3810 ;; This function is called by:
  3811 ;;		_pic_init
  3812 ;; This function uses a non-reentrant model
  3813 ;;
  3814                           
  3815  0003                     _ADC_Init:	
  3816                           ;psect for function _ADC_Init
  3817                           
  3818                           
  3819                           ;incstack = 0
  3820                           ; Regs used in _ADC_Init: []
  3821  0003  0008               	return
  3822  0004                     __end_of_ADC_Init:
  3823                           
  3824                           	psect	text3
  3825  2C94                     __ptext3:	
  3826 ;; *************** function _interrupt_init *****************
  3827 ;; Defined at:
  3828 ;;		line 65 in file "main.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		wreg, status,2, status,0
  3837 ;; Tracked objects:
  3838 ;;		On entry : 1F/4
  3839 ;;		On exit  : 1F/1
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used: 1
  3848 ;; Hardware stack levels required when called: 2
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_main
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856  2C94                     _interrupt_init:	
  3857                           ;psect for function _interrupt_init
  3858                           
  3859                           
  3860                           ;main.c: 66:     OPTION_REGbits.PS = 0b000;
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _interrupt_init: [wreg+status,2+status,0]
  3864  2C94  30F8               	movlw	-8
  3865  2C95  0021               	movlb	1	; select bank1
  3866  2C96  0595               	andwf	21,f	;volatile
  3867                           
  3868                           ;main.c: 67:     OPTION_REGbits.PSA = 0;
  3869  2C97  1195               	bcf	21,3	;volatile
  3870                           
  3871                           ;main.c: 68:     OPTION_REGbits.T0CS = 0;
  3872  2C98  1295               	bcf	21,5	;volatile
  3873                           
  3874                           ;main.c: 69:     INTCONbits.T0IE = 1;
  3875  2C99  168B               	bsf	11,5	;volatile
  3876                           
  3877                           ;main.c: 70:     INTCONbits.PEIE = 1;
  3878  2C9A  170B               	bsf	11,6	;volatile
  3879                           
  3880                           ;main.c: 71:     INTCONbits.GIE = 1;
  3881  2C9B  178B               	bsf	11,7	;volatile
  3882  2C9C  0008               	return
  3883  2C9D                     __end_of_interrupt_init:
  3884                           
  3885                           	psect	text4
  3886  0CF1                     __ptext4:	
  3887 ;; *************** function _cells_init *****************
  3888 ;; Defined at:
  3889 ;;		line 922 in file "main.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;		None
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, status,2, status,0, pclath, cstack
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/1
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;Total ram usage:        4 bytes
  3908 ;; Hardware stack levels used: 1
  3909 ;; Hardware stack levels required when called: 4
  3910 ;; This function calls:
  3911 ;;		_Bcd2Dec
  3912 ;;		___wmul
  3913 ;;		_eeprom_read
  3914 ;; This function is called by:
  3915 ;;		_main
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919  0CF1                     _cells_init:	
  3920                           ;psect for function _cells_init
  3921                           
  3922                           
  3923                           ;incstack = 0
  3924                           ; Regs used in _cells_init: [wreg+status,2+status,0+pclath+cstack]
  3925  0CF1  0064               	clrwdt	;# 
  3926                           
  3927                           ;main.c: 926:     e_c_ledtype = eeprom_read(1);
  3928  0CF2  3001               	movlw	1
  3929  0CF3  31AC  24C0  318C   	fcall	_eeprom_read
  3930  0CF6  0020               	movlb	0	; select bank0
  3931  0CF7  00A9               	movwf	??_cells_init
  3932  0CF8  0829               	movf	??_cells_init,w
  3933  0CF9  0022               	movlb	2	; select bank2
  3934  0CFA  00AF               	movwf	_e_c_ledtype^(0+256)
  3935                           
  3936                           ;main.c: 927:     if (eeprom_read(2) == 1)
  3937  0CFB  3002               	movlw	2
  3938  0CFC  31AC  24C0  318C   	fcall	_eeprom_read
  3939  0CFF  3A01               	xorlw	1
  3940  0D00  1D03               	skipz
  3941  0D01  2D05               	goto	l9222
  3942                           
  3943                           ;main.c: 928:         g_b_Auto_mode = 1;
  3944  0D02  0022               	movlb	2	; select bank2
  3945  0D03  01AE               	clrf	_g_b_Auto_mode^(0+256)
  3946  0D04  0AAE               	incf	_g_b_Auto_mode^(0+256),f
  3947  0D05                     l9222:
  3948                           
  3949                           ;main.c: 929:     e_i_ms_Rel_Del = Bcd2Dec(eeprom_read(3));
  3950  0D05  3003               	movlw	3
  3951  0D06  31AC  24C0  318C   	fcall	_eeprom_read
  3952  0D09  31AC  24D3  318C   	fcall	_Bcd2Dec
  3953  0D0C  00A9               	movwf	??_cells_init
  3954  0D0D  01AA               	clrf	??_cells_init+1
  3955  0D0E  0829               	movf	??_cells_init,w
  3956  0D0F  0022               	movlb	2	; select bank2
  3957  0D10  00A2               	movwf	_e_i_ms_Rel_Del^(0+256)
  3958  0D11  0020               	movlb	0	; select bank0
  3959  0D12  082A               	movf	??_cells_init+1,w
  3960  0D13  0022               	movlb	2	; select bank2
  3961  0D14  00A3               	movwf	(_e_i_ms_Rel_Del+1)^(0+256)
  3962                           
  3963                           ;main.c: 930:     e_i_tenths_SWR_Auto_delta = Bcd2Dec(eeprom_read(4)) * 10;
  3964  0D15  3004               	movlw	4
  3965  0D16  31AC  24C0  318C   	fcall	_eeprom_read
  3966  0D19  31AC  24D3  318C   	fcall	_Bcd2Dec
  3967  0D1C  00A9               	movwf	??_cells_init
  3968  0D1D  01AA               	clrf	??_cells_init+1
  3969  0D1E  0829               	movf	??_cells_init,w
  3970  0D1F  00A3               	movwf	___wmul@multiplier
  3971  0D20  082A               	movf	??_cells_init+1,w
  3972  0D21  00A4               	movwf	___wmul@multiplier+1
  3973  0D22  300A               	movlw	10
  3974  0D23  00A5               	movwf	___wmul@multiplicand
  3975  0D24  3000               	movlw	0
  3976  0D25  00A6               	movwf	___wmul@multiplicand+1
  3977  0D26  31AD  2515  318C   	fcall	___wmul
  3978  0D29  0824               	movf	?___wmul+1,w
  3979  0D2A  0023               	movlb	3	; select bank3
  3980  0D2B  00A9               	movwf	(_e_i_tenths_SWR_Auto_delta+1)^(0+384)
  3981  0D2C  0020               	movlb	0	; select bank0
  3982  0D2D  0823               	movf	?___wmul,w
  3983  0D2E  0023               	movlb	3	; select bank3
  3984  0D2F  00A8               	movwf	_e_i_tenths_SWR_Auto_delta^(0+384)
  3985                           
  3986                           ;main.c: 931:     e_i_watts_min_for_start = Bcd2Dec(eeprom_read(5)) * 10;
  3987  0D30  3005               	movlw	5
  3988  0D31  31AC  24C0  318C   	fcall	_eeprom_read
  3989  0D34  31AC  24D3  318C   	fcall	_Bcd2Dec
  3990  0D37  00A9               	movwf	??_cells_init
  3991  0D38  01AA               	clrf	??_cells_init+1
  3992  0D39  0829               	movf	??_cells_init,w
  3993  0D3A  00A3               	movwf	___wmul@multiplier
  3994  0D3B  082A               	movf	??_cells_init+1,w
  3995  0D3C  00A4               	movwf	___wmul@multiplier+1
  3996  0D3D  300A               	movlw	10
  3997  0D3E  00A5               	movwf	___wmul@multiplicand
  3998  0D3F  3000               	movlw	0
  3999  0D40  00A6               	movwf	___wmul@multiplicand+1
  4000  0D41  31AD  2515  318C   	fcall	___wmul
  4001  0D44  0824               	movf	?___wmul+1,w
  4002  0D45  0023               	movlb	3	; select bank3
  4003  0D46  00A7               	movwf	(_e_i_watts_min_for_start+1)^(0+384)
  4004  0D47  0020               	movlb	0	; select bank0
  4005  0D48  0823               	movf	?___wmul,w
  4006  0D49  0023               	movlb	3	; select bank3
  4007  0D4A  00A6               	movwf	_e_i_watts_min_for_start^(0+384)
  4008                           
  4009                           ;main.c: 932:     e_i_watts_max_for_start = Bcd2Dec(eeprom_read(6)) * 10;
  4010  0D4B  3006               	movlw	6
  4011  0D4C  31AC  24C0  318C   	fcall	_eeprom_read
  4012  0D4F  31AC  24D3  318C   	fcall	_Bcd2Dec
  4013  0D52  00A9               	movwf	??_cells_init
  4014  0D53  01AA               	clrf	??_cells_init+1
  4015  0D54  0829               	movf	??_cells_init,w
  4016  0D55  00A3               	movwf	___wmul@multiplier
  4017  0D56  082A               	movf	??_cells_init+1,w
  4018  0D57  00A4               	movwf	___wmul@multiplier+1
  4019  0D58  300A               	movlw	10
  4020  0D59  00A5               	movwf	___wmul@multiplicand
  4021  0D5A  3000               	movlw	0
  4022  0D5B  00A6               	movwf	___wmul@multiplicand+1
  4023  0D5C  31AD  2515  318C   	fcall	___wmul
  4024  0D5F  0824               	movf	?___wmul+1,w
  4025  0D60  0023               	movlb	3	; select bank3
  4026  0D61  00A5               	movwf	(_e_i_watts_max_for_start+1)^(0+384)
  4027  0D62  0020               	movlb	0	; select bank0
  4028  0D63  0823               	movf	?___wmul,w
  4029  0D64  0023               	movlb	3	; select bank3
  4030  0D65  00A4               	movwf	_e_i_watts_max_for_start^(0+384)
  4031                           
  4032                           ;main.c: 935:     e_i_tenths_init_max_swr = Bcd2Dec(eeprom_read(9)) * 10;
  4033  0D66  3009               	movlw	9
  4034  0D67  31AC  24C0  318C   	fcall	_eeprom_read
  4035  0D6A  31AC  24D3  318C   	fcall	_Bcd2Dec
  4036  0D6D  00A9               	movwf	??_cells_init
  4037  0D6E  01AA               	clrf	??_cells_init+1
  4038  0D6F  0829               	movf	??_cells_init,w
  4039  0D70  00A3               	movwf	___wmul@multiplier
  4040  0D71  082A               	movf	??_cells_init+1,w
  4041  0D72  00A4               	movwf	___wmul@multiplier+1
  4042  0D73  300A               	movlw	10
  4043  0D74  00A5               	movwf	___wmul@multiplicand
  4044  0D75  3000               	movlw	0
  4045  0D76  00A6               	movwf	___wmul@multiplicand+1
  4046  0D77  31AD  2515  318C   	fcall	___wmul
  4047  0D7A  0824               	movf	?___wmul+1,w
  4048  0D7B  0023               	movlb	3	; select bank3
  4049  0D7C  00A3               	movwf	(_e_i_tenths_init_max_swr+1)^(0+384)
  4050  0D7D  0020               	movlb	0	; select bank0
  4051  0D7E  0823               	movf	?___wmul,w
  4052  0D7F  0023               	movlb	3	; select bank3
  4053  0D80  00A2               	movwf	_e_i_tenths_init_max_swr^(0+384)
  4054                           
  4055                           ;main.c: 936:     e_c_num_L_q = eeprom_read(10);
  4056  0D81  300A               	movlw	10
  4057  0D82  31AC  24C0  318C   	fcall	_eeprom_read
  4058  0D85  0020               	movlb	0	; select bank0
  4059  0D86  00A9               	movwf	??_cells_init
  4060  0D87  0829               	movf	??_cells_init,w
  4061  0D88  0022               	movlb	2	; select bank2
  4062  0D89  00ED               	movwf	_e_c_num_L_q^(0+256)
  4063                           
  4064                           ;main.c: 937:     e_c_b_L_linear = eeprom_read(11);
  4065  0D8A  300B               	movlw	11
  4066  0D8B  31AC  24C0  318C   	fcall	_eeprom_read
  4067  0D8E  0020               	movlb	0	; select bank0
  4068  0D8F  00A9               	movwf	??_cells_init
  4069  0D90  0829               	movf	??_cells_init,w
  4070  0D91  0022               	movlb	2	; select bank2
  4071  0D92  00B5               	movwf	_e_c_b_L_linear^(0+256)
  4072                           
  4073                           ;main.c: 938:     e_c_num_C_q = eeprom_read(12);
  4074  0D93  300C               	movlw	12
  4075  0D94  31AC  24C0  318C   	fcall	_eeprom_read
  4076  0D97  0020               	movlb	0	; select bank0
  4077  0D98  00A9               	movwf	??_cells_init
  4078  0D99  0829               	movf	??_cells_init,w
  4079  0D9A  0022               	movlb	2	; select bank2
  4080  0D9B  00EC               	movwf	_e_c_num_C_q^(0+256)
  4081                           
  4082                           ;main.c: 939:     e_c_b_C_linear = eeprom_read(13);
  4083  0D9C  300D               	movlw	13
  4084  0D9D  31AC  24C0  318C   	fcall	_eeprom_read
  4085  0DA0  0020               	movlb	0	; select bank0
  4086  0DA1  00A9               	movwf	??_cells_init
  4087  0DA2  0829               	movf	??_cells_init,w
  4088  0DA3  0022               	movlb	2	; select bank2
  4089  0DA4  00B4               	movwf	_e_c_b_C_linear^(0+256)
  4090                           
  4091                           ;main.c: 940:     e_c_b_D_correction = eeprom_read(14);
  4092  0DA5  300E               	movlw	14
  4093  0DA6  31AC  24C0  318C   	fcall	_eeprom_read
  4094  0DA9  0020               	movlb	0	; select bank0
  4095  0DAA  00A9               	movwf	??_cells_init
  4096  0DAB  0829               	movf	??_cells_init,w
  4097  0DAC  0022               	movlb	2	; select bank2
  4098  0DAD  00EB               	movwf	_e_c_b_D_correction^(0+256)
  4099                           
  4100                           ;main.c: 941:     e_c_b_L_invert = eeprom_read(15);
  4101  0DAE  300F               	movlw	15
  4102  0DAF  31AC  24C0  318C   	fcall	_eeprom_read
  4103  0DB2  0020               	movlb	0	; select bank0
  4104  0DB3  00A9               	movwf	??_cells_init
  4105  0DB4  0829               	movf	??_cells_init,w
  4106  0DB5  0022               	movlb	2	; select bank2
  4107  0DB6  00B3               	movwf	_e_c_b_L_invert^(0+256)
  4108  0DB7  0064               	clrwdt	;# 
  4109                           
  4110                           ;main.c: 944:     e_i_Ind1 = Bcd2Dec(eeprom_read(16)) * 100 + Bcd2Dec(eeprom_read(17));
  4111  0DB8  3011               	movlw	17
  4112  0DB9  31AC  24C0  318C   	fcall	_eeprom_read
  4113  0DBC  31AC  24D3  318C   	fcall	_Bcd2Dec
  4114  0DBF  00A9               	movwf	??_cells_init
  4115  0DC0  01AA               	clrf	??_cells_init+1
  4116  0DC1  3010               	movlw	16
  4117  0DC2  31AC  24C0  318C   	fcall	_eeprom_read
  4118  0DC5  31AC  24D3  318C   	fcall	_Bcd2Dec
  4119  0DC8  00AB               	movwf	??_cells_init+2
  4120  0DC9  01AC               	clrf	??_cells_init+3
  4121  0DCA  082B               	movf	??_cells_init+2,w
  4122  0DCB  00A3               	movwf	___wmul@multiplier
  4123  0DCC  082C               	movf	??_cells_init+3,w
  4124  0DCD  00A4               	movwf	___wmul@multiplier+1
  4125  0DCE  3064               	movlw	100
  4126  0DCF  00A5               	movwf	___wmul@multiplicand
  4127  0DD0  3000               	movlw	0
  4128  0DD1  00A6               	movwf	___wmul@multiplicand+1
  4129  0DD2  31AD  2515  318C   	fcall	___wmul
  4130  0DD5  0829               	movf	??_cells_init,w
  4131  0DD6  0723               	addwf	?___wmul,w
  4132  0DD7  0023               	movlb	3	; select bank3
  4133  0DD8  00B6               	movwf	_e_i_Ind1^(0+384)
  4134  0DD9  0020               	movlb	0	; select bank0
  4135  0DDA  082A               	movf	??_cells_init+1,w
  4136  0DDB  3D24               	addwfc	?___wmul+1,w
  4137  0DDC  0023               	movlb	3	; select bank3
  4138  0DDD  00B7               	movwf	(_e_i_Ind1+1)^(0+384)
  4139                           
  4140                           ;main.c: 945:     e_i_Ind2 = Bcd2Dec(eeprom_read(18)) * 100 + Bcd2Dec(eeprom_read(19));
  4141  0DDE  3013               	movlw	19
  4142  0DDF  31AC  24C0  318C   	fcall	_eeprom_read
  4143  0DE2  31AC  24D3  318C   	fcall	_Bcd2Dec
  4144  0DE5  00A9               	movwf	??_cells_init
  4145  0DE6  01AA               	clrf	??_cells_init+1
  4146  0DE7  3012               	movlw	18
  4147  0DE8  31AC  24C0  318C   	fcall	_eeprom_read
  4148  0DEB  31AC  24D3  318C   	fcall	_Bcd2Dec
  4149  0DEE  00AB               	movwf	??_cells_init+2
  4150  0DEF  01AC               	clrf	??_cells_init+3
  4151  0DF0  082B               	movf	??_cells_init+2,w
  4152  0DF1  00A3               	movwf	___wmul@multiplier
  4153  0DF2  082C               	movf	??_cells_init+3,w
  4154  0DF3  00A4               	movwf	___wmul@multiplier+1
  4155  0DF4  3064               	movlw	100
  4156  0DF5  00A5               	movwf	___wmul@multiplicand
  4157  0DF6  3000               	movlw	0
  4158  0DF7  00A6               	movwf	___wmul@multiplicand+1
  4159  0DF8  31AD  2515  318C   	fcall	___wmul
  4160  0DFB  0829               	movf	??_cells_init,w
  4161  0DFC  0723               	addwf	?___wmul,w
  4162  0DFD  0023               	movlb	3	; select bank3
  4163  0DFE  00B4               	movwf	_e_i_Ind2^(0+384)
  4164  0DFF  0020               	movlb	0	; select bank0
  4165  0E00  082A               	movf	??_cells_init+1,w
  4166  0E01  3D24               	addwfc	?___wmul+1,w
  4167  0E02  0023               	movlb	3	; select bank3
  4168  0E03  00B5               	movwf	(_e_i_Ind2+1)^(0+384)
  4169                           
  4170                           ;main.c: 946:     e_i_Ind3 = Bcd2Dec(eeprom_read(20)) * 100 + Bcd2Dec(eeprom_read(21));
  4171  0E04  3015               	movlw	21
  4172  0E05  31AC  24C0  318C   	fcall	_eeprom_read
  4173  0E08  31AC  24D3  318C   	fcall	_Bcd2Dec
  4174  0E0B  00A9               	movwf	??_cells_init
  4175  0E0C  01AA               	clrf	??_cells_init+1
  4176  0E0D  3014               	movlw	20
  4177  0E0E  31AC  24C0  318C   	fcall	_eeprom_read
  4178  0E11  31AC  24D3  318C   	fcall	_Bcd2Dec
  4179  0E14  00AB               	movwf	??_cells_init+2
  4180  0E15  01AC               	clrf	??_cells_init+3
  4181  0E16  082B               	movf	??_cells_init+2,w
  4182  0E17  00A3               	movwf	___wmul@multiplier
  4183  0E18  082C               	movf	??_cells_init+3,w
  4184  0E19  00A4               	movwf	___wmul@multiplier+1
  4185  0E1A  3064               	movlw	100
  4186  0E1B  00A5               	movwf	___wmul@multiplicand
  4187  0E1C  3000               	movlw	0
  4188  0E1D  00A6               	movwf	___wmul@multiplicand+1
  4189  0E1E  31AD  2515  318C   	fcall	___wmul
  4190  0E21  0829               	movf	??_cells_init,w
  4191  0E22  0723               	addwf	?___wmul,w
  4192  0E23  0023               	movlb	3	; select bank3
  4193  0E24  00B2               	movwf	_e_i_Ind3^(0+384)
  4194  0E25  0020               	movlb	0	; select bank0
  4195  0E26  082A               	movf	??_cells_init+1,w
  4196  0E27  3D24               	addwfc	?___wmul+1,w
  4197  0E28  0023               	movlb	3	; select bank3
  4198  0E29  00B3               	movwf	(_e_i_Ind3+1)^(0+384)
  4199                           
  4200                           ;main.c: 947:     e_i_Ind4 = Bcd2Dec(eeprom_read(22)) * 100 + Bcd2Dec(eeprom_read(23));
  4201  0E2A  3017               	movlw	23
  4202  0E2B  31AC  24C0  318C   	fcall	_eeprom_read
  4203  0E2E  31AC  24D3  318C   	fcall	_Bcd2Dec
  4204  0E31  00A9               	movwf	??_cells_init
  4205  0E32  01AA               	clrf	??_cells_init+1
  4206  0E33  3016               	movlw	22
  4207  0E34  31AC  24C0  318C   	fcall	_eeprom_read
  4208  0E37  31AC  24D3  318C   	fcall	_Bcd2Dec
  4209  0E3A  00AB               	movwf	??_cells_init+2
  4210  0E3B  01AC               	clrf	??_cells_init+3
  4211  0E3C  082B               	movf	??_cells_init+2,w
  4212  0E3D  00A3               	movwf	___wmul@multiplier
  4213  0E3E  082C               	movf	??_cells_init+3,w
  4214  0E3F  00A4               	movwf	___wmul@multiplier+1
  4215  0E40  3064               	movlw	100
  4216  0E41  00A5               	movwf	___wmul@multiplicand
  4217  0E42  3000               	movlw	0
  4218  0E43  00A6               	movwf	___wmul@multiplicand+1
  4219  0E44  31AD  2515  318C   	fcall	___wmul
  4220  0E47  0829               	movf	??_cells_init,w
  4221  0E48  0723               	addwf	?___wmul,w
  4222  0E49  0023               	movlb	3	; select bank3
  4223  0E4A  00B0               	movwf	_e_i_Ind4^(0+384)
  4224  0E4B  0020               	movlb	0	; select bank0
  4225  0E4C  082A               	movf	??_cells_init+1,w
  4226  0E4D  3D24               	addwfc	?___wmul+1,w
  4227  0E4E  0023               	movlb	3	; select bank3
  4228  0E4F  00B1               	movwf	(_e_i_Ind4+1)^(0+384)
  4229                           
  4230                           ;main.c: 948:     e_i_Ind5 = Bcd2Dec(eeprom_read(24)) * 100 + Bcd2Dec(eeprom_read(25));
  4231  0E50  3019               	movlw	25
  4232  0E51  31AC  24C0  318C   	fcall	_eeprom_read
  4233  0E54  31AC  24D3  318C   	fcall	_Bcd2Dec
  4234  0E57  00A9               	movwf	??_cells_init
  4235  0E58  01AA               	clrf	??_cells_init+1
  4236  0E59  3018               	movlw	24
  4237  0E5A  31AC  24C0  318C   	fcall	_eeprom_read
  4238  0E5D  31AC  24D3  318C   	fcall	_Bcd2Dec
  4239  0E60  00AB               	movwf	??_cells_init+2
  4240  0E61  01AC               	clrf	??_cells_init+3
  4241  0E62  082B               	movf	??_cells_init+2,w
  4242  0E63  00A3               	movwf	___wmul@multiplier
  4243  0E64  082C               	movf	??_cells_init+3,w
  4244  0E65  00A4               	movwf	___wmul@multiplier+1
  4245  0E66  3064               	movlw	100
  4246  0E67  00A5               	movwf	___wmul@multiplicand
  4247  0E68  3000               	movlw	0
  4248  0E69  00A6               	movwf	___wmul@multiplicand+1
  4249  0E6A  31AD  2515  318C   	fcall	___wmul
  4250  0E6D  0829               	movf	??_cells_init,w
  4251  0E6E  0723               	addwf	?___wmul,w
  4252  0E6F  0023               	movlb	3	; select bank3
  4253  0E70  00AE               	movwf	_e_i_Ind5^(0+384)
  4254  0E71  0020               	movlb	0	; select bank0
  4255  0E72  082A               	movf	??_cells_init+1,w
  4256  0E73  3D24               	addwfc	?___wmul+1,w
  4257  0E74  0023               	movlb	3	; select bank3
  4258  0E75  00AF               	movwf	(_e_i_Ind5+1)^(0+384)
  4259                           
  4260                           ;main.c: 949:     e_i_Ind6 = Bcd2Dec(eeprom_read(26)) * 100 + Bcd2Dec(eeprom_read(27));
  4261  0E76  301B               	movlw	27
  4262  0E77  31AC  24C0  318C   	fcall	_eeprom_read
  4263  0E7A  31AC  24D3  318C   	fcall	_Bcd2Dec
  4264  0E7D  00A9               	movwf	??_cells_init
  4265  0E7E  01AA               	clrf	??_cells_init+1
  4266  0E7F  301A               	movlw	26
  4267  0E80  31AC  24C0  318C   	fcall	_eeprom_read
  4268  0E83  31AC  24D3  318C   	fcall	_Bcd2Dec
  4269  0E86  00AB               	movwf	??_cells_init+2
  4270  0E87  01AC               	clrf	??_cells_init+3
  4271  0E88  082B               	movf	??_cells_init+2,w
  4272  0E89  00A3               	movwf	___wmul@multiplier
  4273  0E8A  082C               	movf	??_cells_init+3,w
  4274  0E8B  00A4               	movwf	___wmul@multiplier+1
  4275  0E8C  3064               	movlw	100
  4276  0E8D  00A5               	movwf	___wmul@multiplicand
  4277  0E8E  3000               	movlw	0
  4278  0E8F  00A6               	movwf	___wmul@multiplicand+1
  4279  0E90  31AD  2515  318C   	fcall	___wmul
  4280  0E93  0829               	movf	??_cells_init,w
  4281  0E94  0723               	addwf	?___wmul,w
  4282  0E95  0023               	movlb	3	; select bank3
  4283  0E96  00AC               	movwf	_e_i_Ind6^(0+384)
  4284  0E97  0020               	movlb	0	; select bank0
  4285  0E98  082A               	movf	??_cells_init+1,w
  4286  0E99  3D24               	addwfc	?___wmul+1,w
  4287  0E9A  0023               	movlb	3	; select bank3
  4288  0E9B  00AD               	movwf	(_e_i_Ind6+1)^(0+384)
  4289                           
  4290                           ;main.c: 950:     e_i_Ind7 = Bcd2Dec(eeprom_read(28)) * 100 + Bcd2Dec(eeprom_read(29));
  4291  0E9C  301D               	movlw	29
  4292  0E9D  31AC  24C0  318C   	fcall	_eeprom_read
  4293  0EA0  31AC  24D3  318C   	fcall	_Bcd2Dec
  4294  0EA3  00A9               	movwf	??_cells_init
  4295  0EA4  01AA               	clrf	??_cells_init+1
  4296  0EA5  301C               	movlw	28
  4297  0EA6  31AC  24C0  318C   	fcall	_eeprom_read
  4298  0EA9  31AC  24D3  318C   	fcall	_Bcd2Dec
  4299  0EAC  00AB               	movwf	??_cells_init+2
  4300  0EAD  01AC               	clrf	??_cells_init+3
  4301  0EAE  082B               	movf	??_cells_init+2,w
  4302  0EAF  00A3               	movwf	___wmul@multiplier
  4303  0EB0  082C               	movf	??_cells_init+3,w
  4304  0EB1  00A4               	movwf	___wmul@multiplier+1
  4305  0EB2  3064               	movlw	100
  4306  0EB3  00A5               	movwf	___wmul@multiplicand
  4307  0EB4  3000               	movlw	0
  4308  0EB5  00A6               	movwf	___wmul@multiplicand+1
  4309  0EB6  31AD  2515  318C   	fcall	___wmul
  4310  0EB9  0829               	movf	??_cells_init,w
  4311  0EBA  0723               	addwf	?___wmul,w
  4312  0EBB  0023               	movlb	3	; select bank3
  4313  0EBC  00AA               	movwf	_e_i_Ind7^(0+384)
  4314  0EBD  0020               	movlb	0	; select bank0
  4315  0EBE  082A               	movf	??_cells_init+1,w
  4316  0EBF  3D24               	addwfc	?___wmul+1,w
  4317  0EC0  0023               	movlb	3	; select bank3
  4318  0EC1  00AB               	movwf	(_e_i_Ind7+1)^(0+384)
  4319                           
  4320                           ;main.c: 952:     e_i_Cap1 = Bcd2Dec(eeprom_read(32)) * 100 + Bcd2Dec(eeprom_read(33));
  4321  0EC2  3021               	movlw	33
  4322  0EC3  31AC  24C0  318C   	fcall	_eeprom_read
  4323  0EC6  31AC  24D3  318C   	fcall	_Bcd2Dec
  4324  0EC9  00A9               	movwf	??_cells_init
  4325  0ECA  01AA               	clrf	??_cells_init+1
  4326  0ECB  3020               	movlw	32
  4327  0ECC  31AC  24C0  318C   	fcall	_eeprom_read
  4328  0ECF  31AC  24D3  318C   	fcall	_Bcd2Dec
  4329  0ED2  00AB               	movwf	??_cells_init+2
  4330  0ED3  01AC               	clrf	??_cells_init+3
  4331  0ED4  082B               	movf	??_cells_init+2,w
  4332  0ED5  00A3               	movwf	___wmul@multiplier
  4333  0ED6  082C               	movf	??_cells_init+3,w
  4334  0ED7  00A4               	movwf	___wmul@multiplier+1
  4335  0ED8  3064               	movlw	100
  4336  0ED9  00A5               	movwf	___wmul@multiplicand
  4337  0EDA  3000               	movlw	0
  4338  0EDB  00A6               	movwf	___wmul@multiplicand+1
  4339  0EDC  31AD  2515  318C   	fcall	___wmul
  4340  0EDF  0829               	movf	??_cells_init,w
  4341  0EE0  0723               	addwf	?___wmul,w
  4342  0EE1  0023               	movlb	3	; select bank3
  4343  0EE2  00C4               	movwf	_e_i_Cap1^(0+384)
  4344  0EE3  0020               	movlb	0	; select bank0
  4345  0EE4  082A               	movf	??_cells_init+1,w
  4346  0EE5  3D24               	addwfc	?___wmul+1,w
  4347  0EE6  0023               	movlb	3	; select bank3
  4348  0EE7  00C5               	movwf	(_e_i_Cap1+1)^(0+384)
  4349                           
  4350                           ;main.c: 953:     e_i_Cap2 = Bcd2Dec(eeprom_read(34)) * 100 + Bcd2Dec(eeprom_read(35));
  4351  0EE8  3023               	movlw	35
  4352  0EE9  31AC  24C0  318C   	fcall	_eeprom_read
  4353  0EEC  31AC  24D3  318C   	fcall	_Bcd2Dec
  4354  0EEF  00A9               	movwf	??_cells_init
  4355  0EF0  01AA               	clrf	??_cells_init+1
  4356  0EF1  3022               	movlw	34
  4357  0EF2  31AC  24C0  318C   	fcall	_eeprom_read
  4358  0EF5  31AC  24D3  318C   	fcall	_Bcd2Dec
  4359  0EF8  00AB               	movwf	??_cells_init+2
  4360  0EF9  01AC               	clrf	??_cells_init+3
  4361  0EFA  082B               	movf	??_cells_init+2,w
  4362  0EFB  00A3               	movwf	___wmul@multiplier
  4363  0EFC  082C               	movf	??_cells_init+3,w
  4364  0EFD  00A4               	movwf	___wmul@multiplier+1
  4365  0EFE  3064               	movlw	100
  4366  0EFF  00A5               	movwf	___wmul@multiplicand
  4367  0F00  3000               	movlw	0
  4368  0F01  00A6               	movwf	___wmul@multiplicand+1
  4369  0F02  31AD  2515  318C   	fcall	___wmul
  4370  0F05  0829               	movf	??_cells_init,w
  4371  0F06  0723               	addwf	?___wmul,w
  4372  0F07  0023               	movlb	3	; select bank3
  4373  0F08  00C2               	movwf	_e_i_Cap2^(0+384)
  4374  0F09  0020               	movlb	0	; select bank0
  4375  0F0A  082A               	movf	??_cells_init+1,w
  4376  0F0B  3D24               	addwfc	?___wmul+1,w
  4377  0F0C  0023               	movlb	3	; select bank3
  4378  0F0D  00C3               	movwf	(_e_i_Cap2+1)^(0+384)
  4379                           
  4380                           ;main.c: 954:     e_i_Cap3 = Bcd2Dec(eeprom_read(36)) * 100 + Bcd2Dec(eeprom_read(37));
  4381  0F0E  3025               	movlw	37
  4382  0F0F  31AC  24C0  318C   	fcall	_eeprom_read
  4383  0F12  31AC  24D3  318C   	fcall	_Bcd2Dec
  4384  0F15  00A9               	movwf	??_cells_init
  4385  0F16  01AA               	clrf	??_cells_init+1
  4386  0F17  3024               	movlw	36
  4387  0F18  31AC  24C0  318C   	fcall	_eeprom_read
  4388  0F1B  31AC  24D3  318C   	fcall	_Bcd2Dec
  4389  0F1E  00AB               	movwf	??_cells_init+2
  4390  0F1F  01AC               	clrf	??_cells_init+3
  4391  0F20  082B               	movf	??_cells_init+2,w
  4392  0F21  00A3               	movwf	___wmul@multiplier
  4393  0F22  082C               	movf	??_cells_init+3,w
  4394  0F23  00A4               	movwf	___wmul@multiplier+1
  4395  0F24  3064               	movlw	100
  4396  0F25  00A5               	movwf	___wmul@multiplicand
  4397  0F26  3000               	movlw	0
  4398  0F27  00A6               	movwf	___wmul@multiplicand+1
  4399  0F28  31AD  2515  318C   	fcall	___wmul
  4400  0F2B  0829               	movf	??_cells_init,w
  4401  0F2C  0723               	addwf	?___wmul,w
  4402  0F2D  0023               	movlb	3	; select bank3
  4403  0F2E  00C0               	movwf	_e_i_Cap3^(0+384)
  4404  0F2F  0020               	movlb	0	; select bank0
  4405  0F30  082A               	movf	??_cells_init+1,w
  4406  0F31  3D24               	addwfc	?___wmul+1,w
  4407  0F32  0023               	movlb	3	; select bank3
  4408  0F33  00C1               	movwf	(_e_i_Cap3+1)^(0+384)
  4409                           
  4410                           ;main.c: 955:     e_i_Cap4 = Bcd2Dec(eeprom_read(38)) * 100 + Bcd2Dec(eeprom_read(39));
  4411  0F34  3027               	movlw	39
  4412  0F35  31AC  24C0  318C   	fcall	_eeprom_read
  4413  0F38  31AC  24D3  318C   	fcall	_Bcd2Dec
  4414  0F3B  00A9               	movwf	??_cells_init
  4415  0F3C  01AA               	clrf	??_cells_init+1
  4416  0F3D  3026               	movlw	38
  4417  0F3E  31AC  24C0  318C   	fcall	_eeprom_read
  4418  0F41  31AC  24D3  318C   	fcall	_Bcd2Dec
  4419  0F44  00AB               	movwf	??_cells_init+2
  4420  0F45  01AC               	clrf	??_cells_init+3
  4421  0F46  082B               	movf	??_cells_init+2,w
  4422  0F47  00A3               	movwf	___wmul@multiplier
  4423  0F48  082C               	movf	??_cells_init+3,w
  4424  0F49  00A4               	movwf	___wmul@multiplier+1
  4425  0F4A  3064               	movlw	100
  4426  0F4B  00A5               	movwf	___wmul@multiplicand
  4427  0F4C  3000               	movlw	0
  4428  0F4D  00A6               	movwf	___wmul@multiplicand+1
  4429  0F4E  31AD  2515  318C   	fcall	___wmul
  4430  0F51  0829               	movf	??_cells_init,w
  4431  0F52  0723               	addwf	?___wmul,w
  4432  0F53  0023               	movlb	3	; select bank3
  4433  0F54  00BE               	movwf	_e_i_Cap4^(0+384)
  4434  0F55  0020               	movlb	0	; select bank0
  4435  0F56  082A               	movf	??_cells_init+1,w
  4436  0F57  3D24               	addwfc	?___wmul+1,w
  4437  0F58  0023               	movlb	3	; select bank3
  4438  0F59  00BF               	movwf	(_e_i_Cap4+1)^(0+384)
  4439                           
  4440                           ;main.c: 956:     e_i_Cap5 = Bcd2Dec(eeprom_read(40)) * 100 + Bcd2Dec(eeprom_read(41));
  4441  0F5A  3029               	movlw	41
  4442  0F5B  31AC  24C0  318C   	fcall	_eeprom_read
  4443  0F5E  31AC  24D3  318C   	fcall	_Bcd2Dec
  4444  0F61  00A9               	movwf	??_cells_init
  4445  0F62  01AA               	clrf	??_cells_init+1
  4446  0F63  3028               	movlw	40
  4447  0F64  31AC  24C0  318C   	fcall	_eeprom_read
  4448  0F67  31AC  24D3  318C   	fcall	_Bcd2Dec
  4449  0F6A  00AB               	movwf	??_cells_init+2
  4450  0F6B  01AC               	clrf	??_cells_init+3
  4451  0F6C  082B               	movf	??_cells_init+2,w
  4452  0F6D  00A3               	movwf	___wmul@multiplier
  4453  0F6E  082C               	movf	??_cells_init+3,w
  4454  0F6F  00A4               	movwf	___wmul@multiplier+1
  4455  0F70  3064               	movlw	100
  4456  0F71  00A5               	movwf	___wmul@multiplicand
  4457  0F72  3000               	movlw	0
  4458  0F73  00A6               	movwf	___wmul@multiplicand+1
  4459  0F74  31AD  2515  318C   	fcall	___wmul
  4460  0F77  0829               	movf	??_cells_init,w
  4461  0F78  0723               	addwf	?___wmul,w
  4462  0F79  0023               	movlb	3	; select bank3
  4463  0F7A  00BC               	movwf	_e_i_Cap5^(0+384)
  4464  0F7B  0020               	movlb	0	; select bank0
  4465  0F7C  082A               	movf	??_cells_init+1,w
  4466  0F7D  3D24               	addwfc	?___wmul+1,w
  4467  0F7E  0023               	movlb	3	; select bank3
  4468  0F7F  00BD               	movwf	(_e_i_Cap5+1)^(0+384)
  4469                           
  4470                           ;main.c: 957:     e_i_Cap6 = Bcd2Dec(eeprom_read(42)) * 100 + Bcd2Dec(eeprom_read(43));
  4471  0F80  302B               	movlw	43
  4472  0F81  31AC  24C0  318C   	fcall	_eeprom_read
  4473  0F84  31AC  24D3  318C   	fcall	_Bcd2Dec
  4474  0F87  00A9               	movwf	??_cells_init
  4475  0F88  01AA               	clrf	??_cells_init+1
  4476  0F89  302A               	movlw	42
  4477  0F8A  31AC  24C0  318C   	fcall	_eeprom_read
  4478  0F8D  31AC  24D3  318C   	fcall	_Bcd2Dec
  4479  0F90  00AB               	movwf	??_cells_init+2
  4480  0F91  01AC               	clrf	??_cells_init+3
  4481  0F92  082B               	movf	??_cells_init+2,w
  4482  0F93  00A3               	movwf	___wmul@multiplier
  4483  0F94  082C               	movf	??_cells_init+3,w
  4484  0F95  00A4               	movwf	___wmul@multiplier+1
  4485  0F96  3064               	movlw	100
  4486  0F97  00A5               	movwf	___wmul@multiplicand
  4487  0F98  3000               	movlw	0
  4488  0F99  00A6               	movwf	___wmul@multiplicand+1
  4489  0F9A  31AD  2515  318C   	fcall	___wmul
  4490  0F9D  0829               	movf	??_cells_init,w
  4491  0F9E  0723               	addwf	?___wmul,w
  4492  0F9F  0023               	movlb	3	; select bank3
  4493  0FA0  00BA               	movwf	_e_i_Cap6^(0+384)
  4494  0FA1  0020               	movlb	0	; select bank0
  4495  0FA2  082A               	movf	??_cells_init+1,w
  4496  0FA3  3D24               	addwfc	?___wmul+1,w
  4497  0FA4  0023               	movlb	3	; select bank3
  4498  0FA5  00BB               	movwf	(_e_i_Cap6+1)^(0+384)
  4499                           
  4500                           ;main.c: 958:     e_i_Cap7 = Bcd2Dec(eeprom_read(44)) * 100 + Bcd2Dec(eeprom_read(45));
  4501  0FA6  302D               	movlw	45
  4502  0FA7  31AC  24C0  318C   	fcall	_eeprom_read
  4503  0FAA  31AC  24D3  318C   	fcall	_Bcd2Dec
  4504  0FAD  00A9               	movwf	??_cells_init
  4505  0FAE  01AA               	clrf	??_cells_init+1
  4506  0FAF  302C               	movlw	44
  4507  0FB0  31AC  24C0  318C   	fcall	_eeprom_read
  4508  0FB3  31AC  24D3  318C   	fcall	_Bcd2Dec
  4509  0FB6  00AB               	movwf	??_cells_init+2
  4510  0FB7  01AC               	clrf	??_cells_init+3
  4511  0FB8  082B               	movf	??_cells_init+2,w
  4512  0FB9  00A3               	movwf	___wmul@multiplier
  4513  0FBA  082C               	movf	??_cells_init+3,w
  4514  0FBB  00A4               	movwf	___wmul@multiplier+1
  4515  0FBC  3064               	movlw	100
  4516  0FBD  00A5               	movwf	___wmul@multiplicand
  4517  0FBE  3000               	movlw	0
  4518  0FBF  00A6               	movwf	___wmul@multiplicand+1
  4519  0FC0  31AD  2515  318C   	fcall	___wmul
  4520  0FC3  0829               	movf	??_cells_init,w
  4521  0FC4  0723               	addwf	?___wmul,w
  4522  0FC5  0023               	movlb	3	; select bank3
  4523  0FC6  00B8               	movwf	_e_i_Cap7^(0+384)
  4524  0FC7  0020               	movlb	0	; select bank0
  4525  0FC8  082A               	movf	??_cells_init+1,w
  4526  0FC9  3D24               	addwfc	?___wmul+1,w
  4527  0FCA  0023               	movlb	3	; select bank3
  4528  0FCB  00B9               	movwf	(_e_i_Cap7+1)^(0+384)
  4529                           
  4530                           ;main.c: 960:     e_c_b_P_High = eeprom_read(0x30);
  4531  0FCC  3030               	movlw	48
  4532  0FCD  31AC  24C0  318C   	fcall	_eeprom_read
  4533  0FD0  0020               	movlb	0	; select bank0
  4534  0FD1  00A9               	movwf	??_cells_init
  4535  0FD2  0829               	movf	??_cells_init,w
  4536  0FD3  0022               	movlb	2	; select bank2
  4537  0FD4  00B1               	movwf	_e_c_b_P_High^(0+256)
  4538                           
  4539                           ;main.c: 961:     e_c_K_Mult = Bcd2Dec(eeprom_read(0x31));
  4540  0FD5  3031               	movlw	49
  4541  0FD6  31AC  24C0  318C   	fcall	_eeprom_read
  4542  0FD9  31AC  24D3  318C   	fcall	_Bcd2Dec
  4543  0FDC  00A9               	movwf	??_cells_init
  4544  0FDD  0829               	movf	??_cells_init,w
  4545  0FDE  0023               	movlb	3	; select bank3
  4546  0FDF  00D9               	movwf	_e_c_K_Mult^(0+384)
  4547                           
  4548                           ;main.c: 963:     e_c_b_Loss_ind = eeprom_read(0x33);
  4549  0FE0  3033               	movlw	51
  4550  0FE1  31AC  24C0  318C   	fcall	_eeprom_read
  4551  0FE4  0020               	movlb	0	; select bank0
  4552  0FE5  00A9               	movwf	??_cells_init
  4553  0FE6  0829               	movf	??_cells_init,w
  4554  0FE7  0022               	movlb	2	; select bank2
  4555  0FE8  00B0               	movwf	_e_c_b_Loss_ind^(0+256)
  4556                           
  4557                           ;main.c: 964:     e_c_tenths_Fid_loss = Bcd2Dec(eeprom_read(0x34));
  4558  0FE9  3034               	movlw	52
  4559  0FEA  31AC  24C0  318C   	fcall	_eeprom_read
  4560  0FED  31AC  24D3  318C   	fcall	_Bcd2Dec
  4561  0FF0  00A9               	movwf	??_cells_init
  4562  0FF1  0829               	movf	??_cells_init,w
  4563  0FF2  0022               	movlb	2	; select bank2
  4564  0FF3  00B2               	movwf	_e_c_tenths_Fid_loss^(0+256)
  4565                           
  4566                           ;main.c: 965:     e_c_b_Relay_off = Bcd2Dec(eeprom_read(0x35));
  4567  0FF4  3035               	movlw	53
  4568  0FF5  31AC  24C0  318C   	fcall	_eeprom_read
  4569  0FF8  31AC  24D3         	fcall	_Bcd2Dec
  4570  0FFA  00A9               	movwf	??_cells_init
  4571  0FFB  0829               	movf	??_cells_init,w
  4572  0FFC  0023               	movlb	3	; select bank3
  4573  0FFD  00D3               	movwf	_e_c_b_Relay_off^(0+384)
  4574  0FFE  0064               	clrwdt	;# 
  4575  0FFF  0008               	return
  4576  1000                     __end_of_cells_init:
  4577                           
  4578                           	psect	text5
  4579  2CC0                     __ptext5:	
  4580 ;; *************** function _eeprom_read *****************
  4581 ;; Defined at:
  4582 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eeread.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  addr            1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  addr            1    6[COMMON] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      unsigned char 
  4589 ;; Registers used:
  4590 ;;		wreg, status,2, status,0
  4591 ;; Tracked objects:
  4592 ;;		On entry : 0/2
  4593 ;;		On exit  : 1F/3
  4594 ;;		Unchanged: 0/0
  4595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4597 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4600 ;;Total ram usage:        4 bytes
  4601 ;; Hardware stack levels used: 1
  4602 ;; Hardware stack levels required when called: 2
  4603 ;; This function calls:
  4604 ;;		Nothing
  4605 ;; This function is called by:
  4606 ;;		_main
  4607 ;;		_cells_init
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611  2CC0                     _eeprom_read:	
  4612                           ;psect for function _eeprom_read
  4613                           
  4614                           
  4615                           ;incstack = 0
  4616                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4617                           ;eeprom_read@addr stored from wreg
  4618  2CC0  00F6               	movwf	eeprom_read@addr
  4619  2CC1                     l1092:	
  4620                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eeread.c: 6: eeprom_read(uns
      +                          igned char addr);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eeread.c: 7:
      +                           {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eeread.c: 8:  do
  4621                           
  4622  2CC1  0064               	clrwdt	;# 
  4623  2CC2  0023               	movlb	3	; select bank3
  4624  2CC3  1895               	btfsc	21,1	;volsfr
  4625  2CC4  2CC1               	goto	l1092
  4626                           
  4627                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eeread.c: 18:  return ( EEAD
      +                          R = addr, EECON1 &= 0x3F, EECON1bits.RD = 1, EEDATA);
  4628  2CC5  0876               	movf	eeprom_read@addr,w
  4629  2CC6  00F3               	movwf	??_eeprom_read
  4630  2CC7  01F4               	clrf	??_eeprom_read+1
  4631  2CC8  0873               	movf	??_eeprom_read,w
  4632  2CC9  0091               	movwf	17	;volatile
  4633  2CCA  0874               	movf	??_eeprom_read+1,w
  4634  2CCB  0092               	movwf	18	;volatile
  4635  2CCC  303F               	movlw	63
  4636  2CCD  00F5               	movwf	??_eeprom_read+2
  4637  2CCE  0875               	movf	??_eeprom_read+2,w
  4638  2CCF  0595               	andwf	21,f	;volsfr
  4639  2CD0  1415               	bsf	21,0	;volsfr
  4640  2CD1  0813               	movf	19,w	;volatile
  4641  2CD2  0008               	return
  4642  2CD3                     __end_of_eeprom_read:
  4643                           
  4644                           	psect	text6
  4645  2CD3                     __ptext6:	
  4646 ;; *************** function _Bcd2Dec *****************
  4647 ;; Defined at:
  4648 ;;		line 118 in file "cross_compiler.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  bcdnum          1    wreg     unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  bcdnum          1    7[COMMON] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      unsigned char 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, pclath, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 1F/3
  4659 ;;		On exit  : 1F/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4666 ;;Total ram usage:        4 bytes
  4667 ;; Hardware stack levels used: 1
  4668 ;; Hardware stack levels required when called: 3
  4669 ;; This function calls:
  4670 ;;		___bmul
  4671 ;; This function is called by:
  4672 ;;		_cells_init
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676  2CD3                     _Bcd2Dec:	
  4677                           ;psect for function _Bcd2Dec
  4678                           
  4679                           
  4680                           ;incstack = 0
  4681                           ; Regs used in _Bcd2Dec: [wreg+status,2+status,0+pclath+cstack]
  4682                           ;Bcd2Dec@bcdnum stored from wreg
  4683  2CD3  00F7               	movwf	Bcd2Dec@bcdnum
  4684                           
  4685                           ;cross_compiler.c: 118: unsigned char Bcd2Dec(unsigned char bcdnum);cross_compiler.c: 11
      +                          9: {;cross_compiler.c: 120:   return ((bcdnum / 16 * 10) + (bcdnum % 16));
  4686  2CD4  300F               	movlw	15
  4687  2CD5  0577               	andwf	Bcd2Dec@bcdnum,w
  4688  2CD6  0020               	movlb	0	; select bank0
  4689  2CD7  00A0               	movwf	??_Bcd2Dec
  4690  2CD8  300A               	movlw	10
  4691  2CD9  00A1               	movwf	??_Bcd2Dec+1
  4692  2CDA  0821               	movf	??_Bcd2Dec+1,w
  4693  2CDB  00F3               	movwf	___bmul@multiplicand
  4694  2CDC  0877               	movf	Bcd2Dec@bcdnum,w
  4695  2CDD  00A2               	movwf	??_Bcd2Dec+2
  4696  2CDE  3004               	movlw	4
  4697  2CDF                     u14225:
  4698  2CDF  36A2               	lsrf	??_Bcd2Dec+2,f
  4699  2CE0  0B89               	decfsz	9,f
  4700  2CE1  2CDF               	goto	u14225
  4701  2CE2  0822               	movf	??_Bcd2Dec+2,w
  4702  2CE3  31AC  249D         	fcall	___bmul
  4703  2CE5  0020               	movlb	0	; select bank0
  4704  2CE6  0720               	addwf	??_Bcd2Dec,w
  4705  2CE7  0008               	return
  4706  2CE8                     __end_of_Bcd2Dec:
  4707                           
  4708                           	psect	text7
  4709  20C5                     __ptext7:	
  4710 ;; *************** function _button_proc_test *****************
  4711 ;; Defined at:
  4712 ;;		line 165 in file "main.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;Total ram usage:        2 bytes
  4731 ;; Hardware stack levels used: 1
  4732 ;; Hardware stack levels required when called: 7
  4733 ;; This function calls:
  4734 ;;		_Button
  4735 ;;		_Delay_ms
  4736 ;;		_lcd_ind
  4737 ;;		_lcd_pwr
  4738 ;;		_set_cap
  4739 ;;		_set_ind
  4740 ;;		_set_sw
  4741 ;;		_uart_wr_str
  4742 ;; This function is called by:
  4743 ;;		_main
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747  20C5                     _button_proc_test:	
  4748                           ;psect for function _button_proc_test
  4749                           
  4750                           
  4751                           ;main.c: 166:     if (Button(&PORTB, 0, 50, 0)) {
  4752                           
  4753                           ;incstack = 0
  4754                           ; Regs used in _button_proc_test: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4755  20C5  300D               	movlw	13
  4756  20C6  0020               	movlb	0	; select bank0
  4757  20C7  00A0               	movwf	Button@port
  4758  20C8  3000               	movlw	0
  4759  20C9  00A1               	movwf	Button@port+1
  4760  20CA  01A2               	clrf	Button@pin
  4761  20CB  3032               	movlw	50
  4762  20CC  0021               	movlb	1	; select bank1
  4763  20CD  00ED               	movwf	??_button_proc_test^(0+128)
  4764  20CE  086D               	movf	??_button_proc_test^(0+128),w
  4765  20CF  0020               	movlb	0	; select bank0
  4766  20D0  00A3               	movwf	Button@time
  4767  20D1  01A4               	clrf	Button@active_state
  4768  20D2  3190  2005  31A0   	fcall	_Button
  4769  20D5  3A00               	xorlw	0
  4770  20D6  1903               	skipnz
  4771  20D7  2907               	goto	l9474
  4772                           
  4773                           ;main.c: 167:         Delay_ms(250);
  4774  20D8  30FA               	movlw	250
  4775  20D9  00F3               	movwf	Delay_ms@time_in_ms
  4776  20DA  3000               	movlw	0
  4777  20DB  00F4               	movwf	Delay_ms@time_in_ms+1
  4778  20DC  31AC  24FE  31A0   	fcall	_Delay_ms
  4779  20DF  0064               	clrwdt	;# 
  4780                           
  4781                           ;main.c: 170:             if (g_c_SW == 0)
  4782  20E0  0022               	movlb	2	; select bank2
  4783  20E1  083B               	movf	_g_c_SW^(0+256),w
  4784  20E2  1D03               	btfss	3,2
  4785  20E3  28E7               	goto	l9438
  4786                           
  4787                           ;main.c: 171:                 g_c_SW = 1;
  4788  20E4  01BB               	clrf	_g_c_SW^(0+256)
  4789  20E5  0ABB               	incf	_g_c_SW^(0+256),f
  4790  20E6  28E8               	goto	l9440
  4791  20E7                     l9438:
  4792                           
  4793                           ;main.c: 173:                 g_c_SW = 0;
  4794  20E7  01BB               	clrf	_g_c_SW^(0+256)
  4795  20E8                     l9440:
  4796                           
  4797                           ;main.c: 174:             set_sw(g_c_SW);
  4798  20E8  083B               	movf	_g_c_SW^(0+256),w
  4799  20E9  31AC  24AE  31A0   	fcall	_set_sw
  4800                           
  4801                           ;main.c: 175:             lcd_ind();
  4802  20EC  3195  2597  31A0   	fcall	_lcd_ind
  4803  20EF                     l9472:	
  4804                           ;main.c: 176:         } else {
  4805                           
  4806                           
  4807                           ;main.c: 193:         while (Button(&PORTB, 0, 50, 0)) {
  4808  20EF  300D               	movlw	13
  4809  20F0  0020               	movlb	0	; select bank0
  4810  20F1  00A0               	movwf	Button@port
  4811  20F2  3000               	movlw	0
  4812  20F3  00A1               	movwf	Button@port+1
  4813  20F4  01A2               	clrf	Button@pin
  4814  20F5  3032               	movlw	50
  4815  20F6  0021               	movlb	1	; select bank1
  4816  20F7  00ED               	movwf	??_button_proc_test^(0+128)
  4817  20F8  086D               	movf	??_button_proc_test^(0+128),w
  4818  20F9  0020               	movlb	0	; select bank0
  4819  20FA  00A3               	movwf	Button@time
  4820  20FB  01A4               	clrf	Button@active_state
  4821  20FC  3190  2005  31A0   	fcall	_Button
  4822  20FF  3A00               	xorlw	0
  4823  2100  1903               	btfsc	3,2
  4824  2101  2907               	goto	l9474
  4825                           
  4826                           ;main.c: 194:             lcd_pwr();
  4827  2102  318A  2246  31A0   	fcall	_lcd_pwr
  4828  2105  0064               	clrwdt	;# 
  4829  2106  28EF               	goto	l9472
  4830  2107                     l9474:
  4831                           
  4832                           ;main.c: 199:     if (Button(&PORTB, 2, 50, 0)) {
  4833  2107  300D               	movlw	13
  4834  2108  00A0               	movwf	Button@port
  4835  2109  3000               	movlw	0
  4836  210A  00A1               	movwf	Button@port+1
  4837  210B  3002               	movlw	2
  4838  210C  0021               	movlb	1	; select bank1
  4839  210D  00ED               	movwf	??_button_proc_test^(0+128)
  4840  210E  086D               	movf	??_button_proc_test^(0+128),w
  4841  210F  0020               	movlb	0	; select bank0
  4842  2110  00A2               	movwf	Button@pin
  4843  2111  3032               	movlw	50
  4844  2112  0021               	movlb	1	; select bank1
  4845  2113  00EE               	movwf	(??_button_proc_test+1)^(0+128)
  4846  2114  086E               	movf	(??_button_proc_test+1)^(0+128),w
  4847  2115  0020               	movlb	0	; select bank0
  4848  2116  00A3               	movwf	Button@time
  4849  2117  01A4               	clrf	Button@active_state
  4850  2118  3190  2005  31A0   	fcall	_Button
  4851  211B  3A00               	xorlw	0
  4852  211C  1D03               	btfss	3,2
  4853  211D  0064               	clrwdt	;# 
  4854                           
  4855                           ;main.c: 216:     if (Button(&PORTB, 1, 50, 0) & (g_b_Bypas_mode == 0)) {
  4856                           
  4857                           ;main.c: 201:         while (in_dummy == 0) {
  4858  211E  0022               	movlb	2	; select bank2
  4859  211F  082D               	movf	_g_b_Bypas_mode^(0+256),w
  4860  2120  1D03               	btfss	3,2
  4861  2121  2924               	goto	u14780
  4862  2122  3001               	movlw	1
  4863  2123  2925               	goto	u14790
  4864  2124                     u14780:
  4865  2124  3000               	movlw	0
  4866  2125                     u14790:
  4867  2125  0021               	movlb	1	; select bank1
  4868  2126  00ED               	movwf	??_button_proc_test^(0+128)
  4869  2127  300D               	movlw	13
  4870  2128  0020               	movlb	0	; select bank0
  4871  2129  00A0               	movwf	Button@port
  4872  212A  3000               	movlw	0
  4873  212B  00A1               	movwf	Button@port+1
  4874  212C  01A2               	clrf	Button@pin
  4875  212D  0AA2               	incf	Button@pin,f
  4876  212E  3032               	movlw	50
  4877  212F  0021               	movlb	1	; select bank1
  4878  2130  00EE               	movwf	(??_button_proc_test+1)^(0+128)
  4879  2131  086E               	movf	(??_button_proc_test+1)^(0+128),w
  4880  2132  0020               	movlb	0	; select bank0
  4881  2133  00A3               	movwf	Button@time
  4882  2134  01A4               	clrf	Button@active_state
  4883  2135  3190  2005  31A0   	fcall	_Button
  4884  2138  0021               	movlb	1	; select bank1
  4885  2139  056D               	andwf	??_button_proc_test^(0+128),w
  4886  213A  1903               	btfsc	3,2
  4887  213B  0008               	return
  4888  213C  0064               	clrwdt	;# 
  4889                           
  4890                           ;main.c: 218:         while (in_dummy == 0) {
  4891  213D  0008               	return
  4892  213E                     __end_of_button_proc_test:
  4893                           
  4894                           	psect	text8
  4895  1D15                     __ptext8:	
  4896 ;; *************** function _button_proc *****************
  4897 ;; Defined at:
  4898 ;;		line 235 in file "main.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;  uartChar        1   28[BANK2 ] unsigned char 
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  1    wreg      void 
  4905 ;; Registers used:
  4906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/3
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;Total ram usage:        2 bytes
  4917 ;; Hardware stack levels used: 1
  4918 ;; Hardware stack levels required when called: 14
  4919 ;; This function calls:
  4920 ;;		_Delay_ms
  4921 ;;		_eeprom_write
  4922 ;;		_lcd_ind
  4923 ;;		_set_cap
  4924 ;;		_set_ind
  4925 ;;		_set_sw
  4926 ;;		_show_reset
  4927 ;;		_tune_btn_push
  4928 ;;		_uartGetChar
  4929 ;;		_uart_wr_str
  4930 ;; This function is called by:
  4931 ;;		_main
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935  1D15                     _button_proc:	
  4936                           ;psect for function _button_proc
  4937                           
  4938                           
  4939                           ;main.c: 236:     char uartChar = uartGetChar();
  4940                           
  4941                           ;incstack = 0
  4942                           ; Regs used in _button_proc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4943  1D15  31AC  248C  319D   	fcall	_uartGetChar
  4944  1D18  0022               	movlb	2	; select bank2
  4945  1D19  00E8               	movwf	??_button_proc^(0+256)
  4946  1D1A  0868               	movf	??_button_proc^(0+256),w
  4947  1D1B  00E9               	movwf	button_proc@uartChar^(0+256)
  4948                           
  4949                           ;main.c: 239:     if (uartChar == 'r') {
  4950  1D1C  3072               	movlw	114
  4951  1D1D  0669               	xorwf	button_proc@uartChar^(0+256),w
  4952  1D1E  1D03               	btfss	3,2
  4953  1D1F  2D2D               	goto	l9290
  4954                           
  4955                           ;main.c: 240:         Delay_ms(250);
  4956  1D20  30FA               	movlw	250
  4957  1D21  00F3               	movwf	Delay_ms@time_in_ms
  4958  1D22  3000               	movlw	0
  4959  1D23  00F4               	movwf	Delay_ms@time_in_ms+1
  4960  1D24  31AC  24FE  319D   	fcall	_Delay_ms
  4961  1D27  0064               	clrwdt	;# 
  4962                           
  4963                           ;main.c: 242:         show_reset();
  4964  1D28  31A4  2484  319D   	fcall	_show_reset
  4965                           
  4966                           ;main.c: 243:         g_b_Bypas_mode = 0;
  4967  1D2B  0022               	movlb	2	; select bank2
  4968  1D2C  01AD               	clrf	_g_b_Bypas_mode^(0+256)
  4969  1D2D                     l9290:
  4970                           
  4971                           ;main.c: 247:     if (uartChar == 't' || g_b_Soft_tune) {
  4972  1D2D  3074               	movlw	116
  4973  1D2E  0669               	xorwf	button_proc@uartChar^(0+256),w
  4974  1D2F  1903               	btfsc	3,2
  4975  1D30  2D35               	goto	l9294
  4976  1D31  0023               	movlb	3	; select bank3
  4977  1D32  0851               	movf	_g_b_Soft_tune^(0+384),w
  4978  1D33  1903               	btfsc	3,2
  4979  1D34  2D4F               	goto	l9308
  4980  1D35                     l9294:
  4981                           
  4982                           ;main.c: 248:         Delay_ms(250);
  4983  1D35  30FA               	movlw	250
  4984  1D36  00F3               	movwf	Delay_ms@time_in_ms
  4985  1D37  3000               	movlw	0
  4986  1D38  00F4               	movwf	Delay_ms@time_in_ms+1
  4987  1D39  31AC  24FE  319D   	fcall	_Delay_ms
  4988  1D3C  0064               	clrwdt	;# 
  4989                           
  4990                           ;main.c: 250:         out_dummy = 1;
  4991  1D3D  0023               	movlb	3	; select bank3
  4992  1D3E  01D2               	clrf	_out_dummy^(0+384)
  4993  1D3F  0AD2               	incf	_out_dummy^(0+384),f
  4994                           
  4995                           ;main.c: 251:         out_dummy = 0;
  4996  1D40  01D2               	clrf	_out_dummy^(0+384)
  4997                           
  4998                           ;main.c: 252:         Delay_ms(250);
  4999  1D41  30FA               	movlw	250
  5000  1D42  00F3               	movwf	Delay_ms@time_in_ms
  5001  1D43  3000               	movlw	0
  5002  1D44  00F4               	movwf	Delay_ms@time_in_ms+1
  5003  1D45  31AC  24FE  319D   	fcall	_Delay_ms
  5004                           
  5005                           ;main.c: 253:         tune_btn_push();
  5006  1D48  31A6  2686  319D   	fcall	_tune_btn_push
  5007                           
  5008                           ;main.c: 254:         g_b_Bypas_mode = 0;
  5009  1D4B  0022               	movlb	2	; select bank2
  5010  1D4C  01AD               	clrf	_g_b_Bypas_mode^(0+256)
  5011                           
  5012                           ;main.c: 255:         g_b_Soft_tune = 0;
  5013  1D4D  0023               	movlb	3	; select bank3
  5014  1D4E  01D1               	clrf	_g_b_Soft_tune^(0+384)
  5015  1D4F                     l9308:
  5016                           
  5017                           ;main.c: 260:     if (uartChar == 'b') {
  5018  1D4F  3062               	movlw	98
  5019  1D50  0022               	movlb	2	; select bank2
  5020  1D51  0669               	xorwf	button_proc@uartChar^(0+256),w
  5021  1D52  1D03               	btfss	3,2
  5022  1D53  2E18               	goto	l9388
  5023  1D54  0064               	clrwdt	;# 
  5024                           
  5025                           ;main.c: 262:         if (g_b_Bypas_mode == 0) {
  5026  1D55  0022               	movlb	2	; select bank2
  5027  1D56  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5028  1D57  1D03               	btfss	3,2
  5029  1D58  2D96               	goto	l9342
  5030                           
  5031                           ;main.c: 263:             g_b_Bypas_mode = 1;
  5032  1D59  01AD               	clrf	_g_b_Bypas_mode^(0+256)
  5033  1D5A  0AAD               	incf	_g_b_Bypas_mode^(0+256),f
  5034                           
  5035                           ;main.c: 264:             g_c_cap_mem = g_c_cap;
  5036  1D5B  087A               	movf	_g_c_cap,w
  5037  1D5C  00E8               	movwf	??_button_proc^(0+256)
  5038  1D5D  0868               	movf	??_button_proc^(0+256),w
  5039  1D5E  0023               	movlb	3	; select bank3
  5040  1D5F  00D0               	movwf	_g_c_cap_mem^(0+384)
  5041                           
  5042                           ;main.c: 265:             g_c_ind_mem = g_c_ind;
  5043  1D60  0022               	movlb	2	; select bank2
  5044  1D61  083C               	movf	_g_c_ind^(0+256),w
  5045  1D62  00E8               	movwf	??_button_proc^(0+256)
  5046  1D63  0868               	movf	??_button_proc^(0+256),w
  5047  1D64  0023               	movlb	3	; select bank3
  5048  1D65  00CF               	movwf	_g_c_ind_mem^(0+384)
  5049                           
  5050                           ;main.c: 266:             g_c_SW_mem = g_c_SW;
  5051  1D66  0022               	movlb	2	; select bank2
  5052  1D67  083B               	movf	_g_c_SW^(0+256),w
  5053  1D68  00E8               	movwf	??_button_proc^(0+256)
  5054  1D69  0868               	movf	??_button_proc^(0+256),w
  5055  1D6A  0023               	movlb	3	; select bank3
  5056  1D6B  00CE               	movwf	_g_c_SW_mem^(0+384)
  5057                           
  5058                           ;main.c: 267:             g_c_cap = 0;
  5059  1D6C  01FA               	clrf	_g_c_cap
  5060                           
  5061                           ;main.c: 268:             if (e_c_b_L_invert)
  5062  1D6D  0022               	movlb	2	; select bank2
  5063  1D6E  0833               	movf	_e_c_b_L_invert^(0+256),w
  5064  1D6F  1903               	btfsc	3,2
  5065  1D70  2D76               	goto	l9324
  5066                           
  5067                           ;main.c: 269:                 g_c_ind = 255;
  5068  1D71  30FF               	movlw	255
  5069  1D72  00E8               	movwf	??_button_proc^(0+256)
  5070  1D73  0868               	movf	??_button_proc^(0+256),w
  5071  1D74  00BC               	movwf	_g_c_ind^(0+256)
  5072  1D75  2D77               	goto	l9326
  5073  1D76                     l9324:
  5074                           
  5075                           ;main.c: 271:                 g_c_ind = 0;
  5076  1D76  01BC               	clrf	_g_c_ind^(0+256)
  5077  1D77                     l9326:
  5078                           
  5079                           ;main.c: 272:             g_c_SW = 1;
  5080  1D77  01BB               	clrf	_g_c_SW^(0+256)
  5081  1D78  0ABB               	incf	_g_c_SW^(0+256),f
  5082                           
  5083                           ;main.c: 273:             set_ind(g_c_ind);
  5084  1D79  083C               	movf	_g_c_ind^(0+256),w
  5085  1D7A  31A2  22BA  319D   	fcall	_set_ind
  5086                           
  5087                           ;main.c: 274:             set_cap(g_c_cap);
  5088  1D7D  087A               	movf	_g_c_cap,w
  5089  1D7E  31AE  2636  319D   	fcall	_set_cap
  5090                           
  5091                           ;main.c: 275:             set_sw(g_c_SW);
  5092  1D81  0022               	movlb	2	; select bank2
  5093  1D82  083B               	movf	_g_c_SW^(0+256),w
  5094  1D83  31AC  24AE  319D   	fcall	_set_sw
  5095                           
  5096                           ;main.c: 276:             if (g_b_Loss_mode == 0)
  5097  1D86  0022               	movlb	2	; select bank2
  5098  1D87  082B               	movf	_g_b_Loss_mode^(0+256),w
  5099  1D88  1D03               	btfss	3,2
  5100  1D89  2D8D               	goto	l9338
  5101                           
  5102                           ;main.c: 277:                 lcd_ind();
  5103  1D8A  3195  2597  319D   	fcall	_lcd_ind
  5104  1D8D                     l9338:
  5105                           
  5106                           ;main.c: 278:             g_c_Auto_mem = g_b_Auto_mode;
  5107  1D8D  0022               	movlb	2	; select bank2
  5108  1D8E  082E               	movf	_g_b_Auto_mode^(0+256),w
  5109  1D8F  00E8               	movwf	??_button_proc^(0+256)
  5110  1D90  0868               	movf	??_button_proc^(0+256),w
  5111  1D91  0023               	movlb	3	; select bank3
  5112  1D92  00CD               	movwf	_g_c_Auto_mem^(0+384)
  5113                           
  5114                           ;main.c: 279:             g_b_Auto_mode = 0;
  5115  1D93  0022               	movlb	2	; select bank2
  5116  1D94  01AE               	clrf	_g_b_Auto_mode^(0+256)
  5117                           
  5118                           ;main.c: 280:         } else {
  5119  1D95  2DC4               	goto	l9362
  5120  1D96                     l9342:
  5121                           
  5122                           ;main.c: 281:             g_b_Bypas_mode = 0;
  5123  1D96  01AD               	clrf	_g_b_Bypas_mode^(0+256)
  5124                           
  5125                           ;main.c: 282:             g_c_cap = g_c_cap_mem;
  5126  1D97  0023               	movlb	3	; select bank3
  5127  1D98  0850               	movf	_g_c_cap_mem^(0+384),w
  5128  1D99  0022               	movlb	2	; select bank2
  5129  1D9A  00E8               	movwf	??_button_proc^(0+256)
  5130  1D9B  0868               	movf	??_button_proc^(0+256),w
  5131  1D9C  00FA               	movwf	_g_c_cap
  5132                           
  5133                           ;main.c: 283:             g_c_ind = g_c_ind_mem;
  5134  1D9D  0023               	movlb	3	; select bank3
  5135  1D9E  084F               	movf	_g_c_ind_mem^(0+384),w
  5136  1D9F  0022               	movlb	2	; select bank2
  5137  1DA0  00E8               	movwf	??_button_proc^(0+256)
  5138  1DA1  0868               	movf	??_button_proc^(0+256),w
  5139  1DA2  00BC               	movwf	_g_c_ind^(0+256)
  5140                           
  5141                           ;main.c: 284:             g_c_SW = g_c_SW_mem;
  5142  1DA3  0023               	movlb	3	; select bank3
  5143  1DA4  084E               	movf	_g_c_SW_mem^(0+384),w
  5144  1DA5  0022               	movlb	2	; select bank2
  5145  1DA6  00E8               	movwf	??_button_proc^(0+256)
  5146  1DA7  0868               	movf	??_button_proc^(0+256),w
  5147  1DA8  00BB               	movwf	_g_c_SW^(0+256)
  5148                           
  5149                           ;main.c: 285:             set_cap(g_c_cap);
  5150  1DA9  087A               	movf	_g_c_cap,w
  5151  1DAA  31AE  2636  319D   	fcall	_set_cap
  5152                           
  5153                           ;main.c: 286:             set_ind(g_c_ind);
  5154  1DAD  0022               	movlb	2	; select bank2
  5155  1DAE  083C               	movf	_g_c_ind^(0+256),w
  5156  1DAF  31A2  22BA  319D   	fcall	_set_ind
  5157                           
  5158                           ;main.c: 287:             set_sw(g_c_SW);
  5159  1DB2  0022               	movlb	2	; select bank2
  5160  1DB3  083B               	movf	_g_c_SW^(0+256),w
  5161  1DB4  31AC  24AE  319D   	fcall	_set_sw
  5162                           
  5163                           ;main.c: 288:             if (g_b_Loss_mode == 0)
  5164  1DB7  0022               	movlb	2	; select bank2
  5165  1DB8  082B               	movf	_g_b_Loss_mode^(0+256),w
  5166  1DB9  1D03               	btfss	3,2
  5167  1DBA  2DBE               	goto	l9360
  5168                           
  5169                           ;main.c: 289:                 lcd_ind();
  5170  1DBB  3195  2597  319D   	fcall	_lcd_ind
  5171  1DBE                     l9360:
  5172                           
  5173                           ;main.c: 290:             g_b_Auto_mode = g_c_Auto_mem;
  5174  1DBE  0023               	movlb	3	; select bank3
  5175  1DBF  084D               	movf	_g_c_Auto_mem^(0+384),w
  5176  1DC0  0022               	movlb	2	; select bank2
  5177  1DC1  00E8               	movwf	??_button_proc^(0+256)
  5178  1DC2  0868               	movf	??_button_proc^(0+256),w
  5179  1DC3  00AE               	movwf	_g_b_Auto_mode^(0+256)
  5180  1DC4                     l9362:
  5181                           
  5182                           ;main.c: 292:         if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  5183  1DC4  3004               	movlw	4
  5184  1DC5  062F               	xorwf	_e_c_ledtype^(0+256),w
  5185  1DC6  1903               	btfsc	3,2
  5186  1DC7  2DCC               	goto	l9366
  5187  1DC8  3005               	movlw	5
  5188  1DC9  062F               	xorwf	_e_c_ledtype^(0+256),w
  5189  1DCA  1D03               	btfss	3,2
  5190  1DCB  2DE4               	goto	l9376
  5191  1DCC                     l9366:
  5192                           
  5193                           ;main.c: 293:             if (g_b_Auto_mode & !g_b_Bypas_mode)
  5194  1DCC  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5195  1DCD  1D03               	btfss	3,2
  5196  1DCE  2DD1               	goto	u14430
  5197  1DCF  3001               	movlw	1
  5198  1DD0  2DD2               	goto	u14440
  5199  1DD1                     u14430:
  5200  1DD1  3000               	movlw	0
  5201  1DD2                     u14440:
  5202  1DD2  052E               	andwf	_g_b_Auto_mode^(0+256),w
  5203  1DD3  1903               	btfsc	3,2
  5204  1DD4  2DD7               	goto	l9370
  5205                           
  5206                           ;main.c: 294:                 uart_wr_str(0, 16 + 8 * 12, ".", 1);
  5207  1DD5  3070               	movlw	112
  5208  1DD6  2DF1               	goto	L5
  5209  1DD7                     l9370:
  5210  1DD7  082E               	movf	_g_b_Auto_mode^(0+256),w
  5211  1DD8  1D03               	btfss	3,2
  5212  1DD9  2DDC               	goto	u14460
  5213  1DDA  3001               	movlw	1
  5214  1DDB  2DDD               	goto	u14470
  5215  1DDC                     u14460:
  5216  1DDC  3000               	movlw	0
  5217  1DDD                     u14470:
  5218  1DDD  052D               	andwf	_g_b_Bypas_mode^(0+256),w
  5219  1DDE  1903               	btfsc	3,2
  5220  1DDF  2DE2               	goto	l9374
  5221                           
  5222                           ;main.c: 296:                 uart_wr_str(0, 16 + 8 * 12, "_", 1);
  5223  1DE0  3070               	movlw	112
  5224  1DE1  2E02               	goto	L6
  5225  1DE2                     l9374:
  5226                           
  5227                           ;main.c: 298:                 uart_wr_str(0, 16 + 8 * 12, " ", 1);
  5228  1DE2  3070               	movlw	112
  5229  1DE3  2E0A               	goto	L7
  5230  1DE4                     l9376:
  5231  1DE4  082F               	movf	_e_c_ledtype^(0+256),w
  5232  1DE5  1903               	btfsc	3,2
  5233  1DE6  2E17               	goto	l498
  5234                           
  5235                           ;main.c: 300:             if (g_b_Auto_mode & !g_b_Bypas_mode)
  5236  1DE7  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5237  1DE8  1D03               	btfss	3,2
  5238  1DE9  2DEC               	goto	u14500
  5239  1DEA  3001               	movlw	1
  5240  1DEB  2DED               	goto	u14510
  5241  1DEC                     u14500:
  5242  1DEC  3000               	movlw	0
  5243  1DED                     u14510:
  5244  1DED  052E               	andwf	_g_b_Auto_mode^(0+256),w
  5245  1DEE  1903               	btfsc	3,2
  5246  1DEF  2DF8               	goto	l9382
  5247                           
  5248                           ;main.c: 301:                 uart_wr_str(0, 8, ".", 1);
  5249  1DF0  3008               	movlw	8
  5250  1DF1                     L5:
  5251  1DF1  00E8               	movwf	??_button_proc^(0+256)
  5252  1DF2  0868               	movf	??_button_proc^(0+256),w
  5253  1DF3  00F3               	movwf	uart_wr_str@col
  5254  1DF4  30BE               	movlw	low (STR_5| (0+32768))
  5255  1DF5  00F4               	movwf	uart_wr_str@str
  5256  1DF6  30B0               	movlw	high (STR_5| (0+32768))
  5257  1DF7  2E10               	goto	L3
  5258  1DF8                     l9382:
  5259  1DF8  082E               	movf	_g_b_Auto_mode^(0+256),w
  5260  1DF9  1D03               	btfss	3,2
  5261  1DFA  2DFD               	goto	u14530
  5262  1DFB  3001               	movlw	1
  5263  1DFC  2DFE               	goto	u14540
  5264  1DFD                     u14530:
  5265  1DFD  3000               	movlw	0
  5266  1DFE                     u14540:
  5267  1DFE  052D               	andwf	_g_b_Bypas_mode^(0+256),w
  5268  1DFF  1903               	btfsc	3,2
  5269  1E00  2E09               	goto	l9386
  5270                           
  5271                           ;main.c: 303:                 uart_wr_str(0, 8, "_", 1);
  5272  1E01  3008               	movlw	8
  5273  1E02                     L6:
  5274  1E02  00E8               	movwf	??_button_proc^(0+256)
  5275  1E03  0868               	movf	??_button_proc^(0+256),w
  5276  1E04  00F3               	movwf	uart_wr_str@col
  5277  1E05  30C0               	movlw	low (STR_6| (0+32768))
  5278  1E06  00F4               	movwf	uart_wr_str@str
  5279  1E07  30B0               	movlw	high (STR_6| (0+32768))
  5280  1E08  2E10               	goto	L3
  5281  1E09                     l9386:
  5282                           
  5283                           ;main.c: 305:                 uart_wr_str(0, 8, " ", 1);
  5284  1E09  3008               	movlw	8
  5285  1E0A                     L7:
  5286  1E0A  00E8               	movwf	??_button_proc^(0+256)
  5287  1E0B  0868               	movf	??_button_proc^(0+256),w
  5288  1E0C  00F3               	movwf	uart_wr_str@col
  5289  1E0D  3009               	movlw	low ((STR_28+9)| (0+32768))
  5290  1E0E  00F4               	movwf	uart_wr_str@str
  5291  1E0F  30B0               	movlw	high ((STR_28+9)| (0+32768))
  5292  1E10                     L3:
  5293  1E10  00F5               	movwf	uart_wr_str@str+1
  5294  1E11  01F6               	clrf	uart_wr_str@len
  5295  1E12  0AF6               	incf	uart_wr_str@len,f
  5296  1E13  3000               	movlw	0
  5297  1E14  31AF  2710  319D   	fcall	_uart_wr_str
  5298  1E17                     l498:
  5299  1E17  0064               	clrwdt	;# 
  5300  1E18                     l9388:
  5301                           
  5302                           ;main.c: 311:     if (uartChar == 'a' && g_b_Bypas_mode == 0) {
  5303  1E18  3061               	movlw	97
  5304  1E19  0022               	movlb	2	; select bank2
  5305  1E1A  0669               	xorwf	button_proc@uartChar^(0+256),w
  5306  1E1B  1D03               	btfss	3,2
  5307  1E1C  0008               	return
  5308  1E1D  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5309  1E1E  1D03               	btfss	3,2
  5310  1E1F  0008               	return
  5311  1E20  0064               	clrwdt	;# 
  5312                           
  5313                           ;main.c: 313:         if (g_b_Auto_mode == 0)
  5314  1E21  0022               	movlb	2	; select bank2
  5315  1E22  082E               	movf	_g_b_Auto_mode^(0+256),w
  5316  1E23  1D03               	btfss	3,2
  5317  1E24  2E28               	goto	l9398
  5318                           
  5319                           ;main.c: 314:             g_b_Auto_mode = 1;
  5320  1E25  01AE               	clrf	_g_b_Auto_mode^(0+256)
  5321  1E26  0AAE               	incf	_g_b_Auto_mode^(0+256),f
  5322  1E27  2E29               	goto	l9400
  5323  1E28                     l9398:
  5324                           
  5325                           ;main.c: 316:             g_b_Auto_mode = 0;
  5326  1E28  01AE               	clrf	_g_b_Auto_mode^(0+256)
  5327  1E29                     l9400:
  5328                           
  5329                           ;main.c: 317:         eeprom_write(2, g_b_Auto_mode);
  5330  1E29  082E               	movf	_g_b_Auto_mode^(0+256),w
  5331  1E2A  00E8               	movwf	??_button_proc^(0+256)
  5332  1E2B  0868               	movf	??_button_proc^(0+256),w
  5333  1E2C  0020               	movlb	0	; select bank0
  5334  1E2D  00A4               	movwf	eeprom_write@value
  5335  1E2E  3002               	movlw	2
  5336  1E2F  3198  2004  319D   	fcall	_eeprom_write
  5337                           
  5338                           ;main.c: 318:         if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  5339  1E32  3004               	movlw	4
  5340  1E33  0022               	movlb	2	; select bank2
  5341  1E34  062F               	xorwf	_e_c_ledtype^(0+256),w
  5342  1E35  1903               	btfsc	3,2
  5343  1E36  2E3B               	goto	l9406
  5344  1E37  3005               	movlw	5
  5345  1E38  062F               	xorwf	_e_c_ledtype^(0+256),w
  5346  1E39  1D03               	btfss	3,2
  5347  1E3A  2E53               	goto	l9416
  5348  1E3B                     l9406:
  5349                           
  5350                           ;main.c: 319:             if (g_b_Auto_mode & !g_b_Bypas_mode)
  5351  1E3B  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5352  1E3C  1D03               	btfss	3,2
  5353  1E3D  2E40               	goto	u14610
  5354  1E3E  3001               	movlw	1
  5355  1E3F  2E41               	goto	u14620
  5356  1E40                     u14610:
  5357  1E40  3000               	movlw	0
  5358  1E41                     u14620:
  5359  1E41  052E               	andwf	_g_b_Auto_mode^(0+256),w
  5360  1E42  1903               	btfsc	3,2
  5361  1E43  2E46               	goto	l9410
  5362                           
  5363                           ;main.c: 320:                 uart_wr_str(0, 16 + 8 * 12, ".", 1);
  5364  1E44  3070               	movlw	112
  5365  1E45  2E60               	goto	L8
  5366  1E46                     l9410:
  5367  1E46  082E               	movf	_g_b_Auto_mode^(0+256),w
  5368  1E47  1D03               	btfss	3,2
  5369  1E48  2E4B               	goto	u14640
  5370  1E49  3001               	movlw	1
  5371  1E4A  2E4C               	goto	u14650
  5372  1E4B                     u14640:
  5373  1E4B  3000               	movlw	0
  5374  1E4C                     u14650:
  5375  1E4C  052D               	andwf	_g_b_Bypas_mode^(0+256),w
  5376  1E4D  1903               	btfsc	3,2
  5377  1E4E  2E51               	goto	l9414
  5378                           
  5379                           ;main.c: 322:                 uart_wr_str(0, 16 + 8 * 12, "_", 1);
  5380  1E4F  3070               	movlw	112
  5381  1E50  2E71               	goto	L9
  5382  1E51                     l9414:
  5383                           
  5384                           ;main.c: 324:                 uart_wr_str(0, 16 + 8 * 12, " ", 1);
  5385  1E51  3070               	movlw	112
  5386  1E52  2E79               	goto	L10
  5387  1E53                     l9416:
  5388  1E53  082F               	movf	_e_c_ledtype^(0+256),w
  5389  1E54  1903               	btfsc	3,2
  5390  1E55  2E85               	goto	l514
  5391                           
  5392                           ;main.c: 326:             if (g_b_Auto_mode & !g_b_Bypas_mode)
  5393  1E56  082D               	movf	_g_b_Bypas_mode^(0+256),w
  5394  1E57  1D03               	btfss	3,2
  5395  1E58  2E5B               	goto	u14680
  5396  1E59  3001               	movlw	1
  5397  1E5A  2E5C               	goto	u14690
  5398  1E5B                     u14680:
  5399  1E5B  3000               	movlw	0
  5400  1E5C                     u14690:
  5401  1E5C  052E               	andwf	_g_b_Auto_mode^(0+256),w
  5402  1E5D  1903               	btfsc	3,2
  5403  1E5E  2E67               	goto	l9422
  5404                           
  5405                           ;main.c: 327:                 uart_wr_str(0, 8, ".", 1);
  5406  1E5F  3008               	movlw	8
  5407  1E60                     L8:
  5408  1E60  00E8               	movwf	??_button_proc^(0+256)
  5409  1E61  0868               	movf	??_button_proc^(0+256),w
  5410  1E62  00F3               	movwf	uart_wr_str@col
  5411  1E63  30BE               	movlw	low (STR_5| (0+32768))
  5412  1E64  00F4               	movwf	uart_wr_str@str
  5413  1E65  30B0               	movlw	high (STR_5| (0+32768))
  5414  1E66  2E7F               	goto	L4
  5415  1E67                     l9422:
  5416  1E67  082E               	movf	_g_b_Auto_mode^(0+256),w
  5417  1E68  1D03               	btfss	3,2
  5418  1E69  2E6C               	goto	u14710
  5419  1E6A  3001               	movlw	1
  5420  1E6B  2E6D               	goto	u14720
  5421  1E6C                     u14710:
  5422  1E6C  3000               	movlw	0
  5423  1E6D                     u14720:
  5424  1E6D  052D               	andwf	_g_b_Bypas_mode^(0+256),w
  5425  1E6E  1903               	btfsc	3,2
  5426  1E6F  2E78               	goto	l9426
  5427                           
  5428                           ;main.c: 329:                 uart_wr_str(0, 8, "_", 1);
  5429  1E70  3008               	movlw	8
  5430  1E71                     L9:
  5431  1E71  00E8               	movwf	??_button_proc^(0+256)
  5432  1E72  0868               	movf	??_button_proc^(0+256),w
  5433  1E73  00F3               	movwf	uart_wr_str@col
  5434  1E74  30C0               	movlw	low (STR_6| (0+32768))
  5435  1E75  00F4               	movwf	uart_wr_str@str
  5436  1E76  30B0               	movlw	high (STR_6| (0+32768))
  5437  1E77  2E7F               	goto	L4
  5438  1E78                     l9426:
  5439                           
  5440                           ;main.c: 331:                 uart_wr_str(0, 8, " ", 1);
  5441  1E78  3008               	movlw	8
  5442  1E79                     L10:
  5443  1E79  00E8               	movwf	??_button_proc^(0+256)
  5444  1E7A  0868               	movf	??_button_proc^(0+256),w
  5445  1E7B  00F3               	movwf	uart_wr_str@col
  5446  1E7C  3009               	movlw	low ((STR_28+9)| (0+32768))
  5447  1E7D  00F4               	movwf	uart_wr_str@str
  5448  1E7E  30B0               	movlw	high ((STR_28+9)| (0+32768))
  5449  1E7F                     L4:
  5450  1E7F  00F5               	movwf	uart_wr_str@str+1
  5451  1E80  01F6               	clrf	uart_wr_str@len
  5452  1E81  0AF6               	incf	uart_wr_str@len,f
  5453  1E82  3000               	movlw	0
  5454  1E83  31AF  2710         	fcall	_uart_wr_str
  5455  1E85                     l514:
  5456  1E85  0064               	clrwdt	;# 
  5457  1E86  0008               	return
  5458  1E87                     __end_of_button_proc:
  5459                           
  5460                           	psect	text9
  5461  2C8C                     __ptext9:	
  5462 ;; *************** function _uartGetChar *****************
  5463 ;; Defined at:
  5464 ;;		line 117 in file "uart.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  ret             1    4[COMMON] unsigned char 
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      unsigned char 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/3
  5475 ;;		On exit  : 1F/3
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;Total ram usage:        2 bytes
  5483 ;; Hardware stack levels used: 1
  5484 ;; Hardware stack levels required when called: 2
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_button_proc
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492  2C8C                     _uartGetChar:	
  5493                           ;psect for function _uartGetChar
  5494                           
  5495                           
  5496                           ;uart.c: 118:     char ret = inbuf;
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in _uartGetChar: [wreg+status,2]
  5500  2C8C  0023               	movlb	3	; select bank3
  5501  2C8D  0848               	movf	_inbuf^(0+384),w
  5502  2C8E  00F3               	movwf	??_uartGetChar
  5503  2C8F  0873               	movf	??_uartGetChar,w
  5504  2C90  00F4               	movwf	uartGetChar@ret
  5505                           
  5506                           ;uart.c: 119:     inbuf = 0;
  5507  2C91  01C8               	clrf	_inbuf^(0+384)
  5508                           
  5509                           ;uart.c: 120:     return ret;
  5510  2C92  0874               	movf	uartGetChar@ret,w
  5511  2C93  0008               	return
  5512  2C94                     __end_of_uartGetChar:
  5513                           
  5514                           	psect	text10
  5515  2686                     __ptext10:	
  5516 ;; *************** function _tune_btn_push *****************
  5517 ;; Defined at:
  5518 ;;		line 376 in file "main.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : 0/3
  5529 ;;		On exit  : 0/0
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5534 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  5535 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  5536 ;;Total ram usage:        2 bytes
  5537 ;; Hardware stack levels used: 1
  5538 ;; Hardware stack levels required when called: 13
  5539 ;; This function calls:
  5540 ;;		___awdiv
  5541 ;;		_eeprom_write
  5542 ;;		_lcd_ind
  5543 ;;		_lcd_pwr
  5544 ;;		_tune
  5545 ;;		_uart_wr_str
  5546 ;; This function is called by:
  5547 ;;		_button_proc
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551  2686                     _tune_btn_push:	
  5552                           ;psect for function _tune_btn_push
  5553                           
  5554                           
  5555                           ;incstack = 0
  5556                           ; Regs used in _tune_btn_push: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5557  2686  0064               	clrwdt	;# 
  5558                           
  5559                           ;main.c: 378:     if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  5560  2687  3004               	movlw	4
  5561  2688  0022               	movlb	2	; select bank2
  5562  2689  062F               	xorwf	_e_c_ledtype^(0+256),w
  5563  268A  1903               	btfsc	3,2
  5564  268B  2E90               	goto	l9164
  5565  268C  3005               	movlw	5
  5566  268D  062F               	xorwf	_e_c_ledtype^(0+256),w
  5567  268E  1D03               	btfss	3,2
  5568  268F  2EA1               	goto	l9166
  5569  2690                     l9164:
  5570                           
  5571                           ;main.c: 379:         uart_wr_str(2, 16 + 12 * 4, "TUNE", 4);
  5572  2690  3040               	movlw	64
  5573  2691  00E6               	movwf	??_tune_btn_push^(0+256)
  5574  2692  0866               	movf	??_tune_btn_push^(0+256),w
  5575  2693  00F3               	movwf	uart_wr_str@col
  5576  2694  30AD               	movlw	low (STR_21| (0+32768))
  5577  2695  00F4               	movwf	uart_wr_str@str
  5578  2696  30B0               	movlw	high (STR_21| (0+32768))
  5579  2697  00F5               	movwf	uart_wr_str@str+1
  5580  2698  3004               	movlw	4
  5581  2699  00E7               	movwf	(??_tune_btn_push+1)^(0+256)
  5582  269A  0867               	movf	(??_tune_btn_push+1)^(0+256),w
  5583  269B  00F6               	movwf	uart_wr_str@len
  5584  269C  3002               	movlw	2
  5585  269D  31AF  2710  31A6   	fcall	_uart_wr_str
  5586                           
  5587                           ;main.c: 380:     } else if (e_c_ledtype != 0) {
  5588  26A0  2EB7               	goto	l9170
  5589  26A1                     l9166:
  5590  26A1  082F               	movf	_e_c_ledtype^(0+256),w
  5591  26A2  1903               	btfsc	3,2
  5592  26A3  2EB5               	goto	l536
  5593                           
  5594                           ;main.c: 381:         uart_wr_str(1, 4, "TUNE", 4);
  5595  26A4  3004               	movlw	4
  5596  26A5  00E6               	movwf	??_tune_btn_push^(0+256)
  5597  26A6  0866               	movf	??_tune_btn_push^(0+256),w
  5598  26A7  00F3               	movwf	uart_wr_str@col
  5599  26A8  30AD               	movlw	low (STR_21| (0+32768))
  5600  26A9  00F4               	movwf	uart_wr_str@str
  5601  26AA  30B0               	movlw	high (STR_21| (0+32768))
  5602  26AB  00F5               	movwf	uart_wr_str@str+1
  5603  26AC  3004               	movlw	4
  5604  26AD  00E7               	movwf	(??_tune_btn_push+1)^(0+256)
  5605  26AE  0867               	movf	(??_tune_btn_push+1)^(0+256),w
  5606  26AF  00F6               	movwf	uart_wr_str@len
  5607  26B0  3001               	movlw	1
  5608  26B1  31AF  2710  31A6   	fcall	_uart_wr_str
  5609                           
  5610                           ;main.c: 382:     } else {
  5611  26B4  2EB7               	goto	l9170
  5612  26B5                     l536:
  5613                           
  5614                           ;main.c: 383:         LATBbits.LATB6 = 1;
  5615  26B5  170D               	bsf	13,6	;volatile
  5616                           
  5617                           ;main.c: 384:         LATBbits.LATB7 = 1;
  5618  26B6  178D               	bsf	13,7	;volatile
  5619  26B7                     l9170:
  5620                           
  5621                           ;main.c: 386:     tune();
  5622  26B7  319B  2356  31A6   	fcall	_tune
  5623                           
  5624                           ;main.c: 387:     if (e_c_ledtype == 0) {
  5625  26BA  0022               	movlb	2	; select bank2
  5626  26BB  082F               	movf	_e_c_ledtype^(0+256),w
  5627  26BC  1D03               	btfss	3,2
  5628  26BD  2EE0               	goto	l9182
  5629                           
  5630                           ;main.c: 388:         if (g_i_SWR <= 150) {
  5631  26BE  0879               	movf	_g_i_SWR+1,w
  5632  26BF  3A80               	xorlw	128
  5633  26C0  00E6               	movwf	??_tune_btn_push^(0+256)
  5634  26C1  3080               	movlw	128
  5635  26C2  0266               	subwf	??_tune_btn_push^(0+256),w
  5636  26C3  1D03               	skipz
  5637  26C4  2EC7               	goto	u14185
  5638  26C5  3097               	movlw	151
  5639  26C6  0278               	subwf	_g_i_SWR,w
  5640  26C7                     u14185:
  5641  26C7  1803               	skipnc
  5642  26C8  2ECD               	goto	l9178
  5643                           
  5644                           ;main.c: 389:             LATBbits.LATB6 = 0;
  5645  26C9  0022               	movlb	2	; select bank2
  5646  26CA  130D               	bcf	13,6	;volatile
  5647                           
  5648                           ;main.c: 390:             LATBbits.LATB7 = 1;
  5649  26CB  178D               	bsf	13,7	;volatile
  5650                           
  5651                           ;main.c: 391:         }
  5652  26CC  2EE8               	goto	l9188
  5653  26CD                     l9178:
  5654  26CD  0879               	movf	_g_i_SWR+1,w
  5655  26CE  3A80               	xorlw	128
  5656  26CF  0022               	movlb	2	; select bank2
  5657  26D0  00E6               	movwf	??_tune_btn_push^(0+256)
  5658  26D1  3080               	movlw	128
  5659  26D2  0266               	subwf	??_tune_btn_push^(0+256),w
  5660  26D3  1D03               	skipz
  5661  26D4  2ED7               	goto	u14195
  5662  26D5  30FB               	movlw	251
  5663  26D6  0278               	subwf	_g_i_SWR,w
  5664  26D7                     u14195:
  5665  26D7  1803               	skipnc
  5666  26D8  2EDC               	goto	l541
  5667                           
  5668                           ;main.c: 393:             LATBbits.LATB6 = 0;
  5669  26D9  0022               	movlb	2	; select bank2
  5670  26DA  130D               	bcf	13,6	;volatile
  5671  26DB  2EDE               	goto	L11
  5672  26DC                     l541:	
  5673                           ;main.c: 396:         else {
  5674                           
  5675                           ;main.c: 395:         }
  5676                           
  5677                           ;main.c: 394:             LATBbits.LATB7 = 0;
  5678                           
  5679                           
  5680                           ;main.c: 397:             LATBbits.LATB6 = 1;
  5681  26DC  0022               	movlb	2	; select bank2
  5682  26DD  170D               	bsf	13,6	;volatile
  5683  26DE                     L11:
  5684                           
  5685                           ;main.c: 398:             LATBbits.LATB7 = 0;
  5686  26DE  138D               	bcf	13,7	;volatile
  5687  26DF  2EE8               	goto	l9188
  5688  26E0                     l9182:
  5689  26E0  082B               	movf	_g_b_Loss_mode^(0+256),w
  5690  26E1  1D03               	btfss	3,2
  5691  26E2  0830               	movf	_e_c_b_Loss_ind^(0+256),w
  5692  26E3  1D03               	btfss	3,2
  5693  26E4  2EE8               	goto	l9188
  5694                           
  5695                           ;main.c: 401:         lcd_ind();
  5696  26E5  3195  2597  31A6   	fcall	_lcd_ind
  5697  26E8                     l9188:
  5698                           
  5699                           ;main.c: 402:     eeprom_write(255, g_c_cap);
  5700  26E8  087A               	movf	_g_c_cap,w
  5701  26E9  0022               	movlb	2	; select bank2
  5702  26EA  00E6               	movwf	??_tune_btn_push^(0+256)
  5703  26EB  0866               	movf	??_tune_btn_push^(0+256),w
  5704  26EC  0020               	movlb	0	; select bank0
  5705  26ED  00A4               	movwf	eeprom_write@value
  5706  26EE  30FF               	movlw	255
  5707  26EF  3198  2004  31A6   	fcall	_eeprom_write
  5708                           
  5709                           ;main.c: 403:     eeprom_write(254, g_c_ind);
  5710  26F2  0022               	movlb	2	; select bank2
  5711  26F3  083C               	movf	_g_c_ind^(0+256),w
  5712  26F4  00E6               	movwf	??_tune_btn_push^(0+256)
  5713  26F5  0866               	movf	??_tune_btn_push^(0+256),w
  5714  26F6  0020               	movlb	0	; select bank0
  5715  26F7  00A4               	movwf	eeprom_write@value
  5716  26F8  30FE               	movlw	254
  5717  26F9  3198  2004  31A6   	fcall	_eeprom_write
  5718                           
  5719                           ;main.c: 404:     eeprom_write(253, g_c_SW);
  5720  26FC  0022               	movlb	2	; select bank2
  5721  26FD  083B               	movf	_g_c_SW^(0+256),w
  5722  26FE  00E6               	movwf	??_tune_btn_push^(0+256)
  5723  26FF  0866               	movf	??_tune_btn_push^(0+256),w
  5724  2700  0020               	movlb	0	; select bank0
  5725  2701  00A4               	movwf	eeprom_write@value
  5726  2702  30FD               	movlw	253
  5727  2703  3198  2004  31A6   	fcall	_eeprom_write
  5728                           
  5729                           ;main.c: 405:     eeprom_write(252, (char) (g_i_swr_a / 256));
  5730  2706  3000               	movlw	0
  5731  2707  00F3               	movwf	___awdiv@divisor
  5732  2708  3001               	movlw	1
  5733  2709  00F4               	movwf	___awdiv@divisor+1
  5734  270A  0022               	movlb	2	; select bank2
  5735  270B  084C               	movf	(_g_i_swr_a+1)^(0+256),w
  5736  270C  00F6               	movwf	___awdiv@dividend+1
  5737  270D  084B               	movf	_g_i_swr_a^(0+256),w
  5738  270E  00F5               	movwf	___awdiv@dividend
  5739  270F  31AF  27AE  31A6   	fcall	___awdiv
  5740  2712  0873               	movf	?___awdiv,w
  5741  2713  0022               	movlb	2	; select bank2
  5742  2714  00E6               	movwf	??_tune_btn_push^(0+256)
  5743  2715  0866               	movf	??_tune_btn_push^(0+256),w
  5744  2716  0020               	movlb	0	; select bank0
  5745  2717  00A4               	movwf	eeprom_write@value
  5746  2718  30FC               	movlw	252
  5747  2719  3198  2004  31A6   	fcall	_eeprom_write
  5748                           
  5749                           ;main.c: 406:     eeprom_write(251, (char) (g_i_swr_a % 256));
  5750  271C  0022               	movlb	2	; select bank2
  5751  271D  084B               	movf	_g_i_swr_a^(0+256),w
  5752  271E  00E6               	movwf	??_tune_btn_push^(0+256)
  5753  271F  0866               	movf	??_tune_btn_push^(0+256),w
  5754  2720  0020               	movlb	0	; select bank0
  5755  2721  00A4               	movwf	eeprom_write@value
  5756  2722  30FB               	movlw	251
  5757  2723  3198  2004  31A6   	fcall	_eeprom_write
  5758                           
  5759                           ;main.c: 407:     g_i_SWR_old = 10000;
  5760  2726  3010               	movlw	16
  5761  2727  00D4               	movwf	_g_i_SWR_old^(0+384)
  5762  2728  3027               	movlw	39
  5763  2729  00D5               	movwf	(_g_i_SWR_old^(0+384)+1)
  5764                           
  5765                           ;main.c: 408:     g_i_Power_old = 10000;
  5766  272A  3010               	movlw	16
  5767  272B  00D6               	movwf	_g_i_Power_old^(0+384)
  5768  272C  3027               	movlw	39
  5769  272D  00D7               	movwf	(_g_i_Power_old^(0+384)+1)
  5770                           
  5771                           ;main.c: 409:     lcd_pwr();
  5772  272E  318A  2246         	fcall	_lcd_pwr
  5773                           
  5774                           ;main.c: 410:     g_i_SWR_fixed_old = g_i_SWR;
  5775  2730  0879               	movf	_g_i_SWR+1,w
  5776  2731  0022               	movlb	2	; select bank2
  5777  2732  00A1               	movwf	(_g_i_SWR_fixed_old+1)^(0+256)
  5778  2733  0878               	movf	_g_i_SWR,w
  5779  2734  00A0               	movwf	_g_i_SWR_fixed_old^(0+256)
  5780                           
  5781                           ;main.c: 411:     out_dummy = 0;
  5782  2735  0023               	movlb	3	; select bank3
  5783  2736  01D2               	clrf	_out_dummy^(0+384)
  5784                           
  5785                           ;main.c: 412:     out_dummy = 1;
  5786  2737  01D2               	clrf	_out_dummy^(0+384)
  5787  2738  0AD2               	incf	_out_dummy^(0+384),f
  5788  2739  0064               	clrwdt	;# 
  5789  273A  0008               	return
  5790  273B                     __end_of_tune_btn_push:
  5791                           
  5792                           	psect	text11
  5793  1B56                     __ptext11:	
  5794 ;; *************** function _tune *****************
  5795 ;; Defined at:
  5796 ;;		line 551 in file "./main.h"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 1E/3
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;Total ram usage:        1 bytes
  5815 ;; Hardware stack levels used: 1
  5816 ;; Hardware stack levels required when called: 12
  5817 ;; This function calls:
  5818 ;;		_Delay_ms
  5819 ;;		_atu_reset
  5820 ;;		_get_swr
  5821 ;;		_lcd_ind
  5822 ;;		_sharp_cap
  5823 ;;		_sharp_ind
  5824 ;;		_sub_tune
  5825 ;; This function is called by:
  5826 ;;		_tune_btn_push
  5827 ;; This function uses a non-reentrant model
  5828 ;;
  5829                           
  5830  1B56                     _tune:	
  5831                           ;psect for function _tune
  5832                           
  5833                           
  5834                           ;incstack = 0
  5835                           ; Regs used in _tune: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5836  1B56  0064               	clrwdt	;# 
  5837                           
  5838                           ;./main.h: 554:     g_char_p_cnt = 0;
  5839  1B57  0022               	movlb	2	; select bank2
  5840  1B58  01B7               	clrf	_g_char_p_cnt^(0+256)
  5841                           
  5842                           ;./main.h: 555:     g_i_P_max = 0;
  5843  1B59  01A4               	clrf	_g_i_P_max^(0+256)
  5844  1B5A  01A5               	clrf	(_g_i_P_max+1)^(0+256)
  5845                           
  5846                           ;./main.h: 557:     g_b_rready = 0;
  5847  1B5B  01B8               	clrf	_g_b_rready^(0+256)
  5848                           
  5849                           ;./main.h: 558:     get_swr();
  5850  1B5C  3198  20F2  319B   	fcall	_get_swr
  5851                           
  5852                           ;./main.h: 559:     if (g_i_SWR < 110)
  5853  1B5F  0879               	movf	_g_i_SWR+1,w
  5854  1B60  3A80               	xorlw	128
  5855  1B61  0021               	movlb	1	; select bank1
  5856  1B62  00EF               	movwf	??_tune^(0+128)
  5857  1B63  3080               	movlw	128
  5858  1B64  026F               	subwf	??_tune^(0+128),w
  5859  1B65  1D03               	skipz
  5860  1B66  2B69               	goto	u13875
  5861  1B67  306E               	movlw	110
  5862  1B68  0278               	subwf	_g_i_SWR,w
  5863  1B69                     u13875:
  5864  1B69  1C03               	btfss	3,0
  5865  1B6A  0008               	return
  5866                           
  5867                           ;./main.h: 561:     atu_reset();
  5868  1B6B  31AC  24E8  319B   	fcall	_atu_reset
  5869                           
  5870                           ;./main.h: 562:     if (e_c_b_Loss_ind == 0)
  5871  1B6E  0022               	movlb	2	; select bank2
  5872  1B6F  0830               	movf	_e_c_b_Loss_ind^(0+256),w
  5873  1B70  1D03               	btfss	3,2
  5874  1B71  2B75               	goto	l9024
  5875                           
  5876                           ;./main.h: 563:         lcd_ind();
  5877  1B72  3195  2597  319B   	fcall	_lcd_ind
  5878  1B75                     l9024:
  5879                           
  5880                           ;./main.h: 564:     Delay_ms(50);
  5881  1B75  3032               	movlw	50
  5882  1B76  00F3               	movwf	Delay_ms@time_in_ms
  5883  1B77  3000               	movlw	0
  5884  1B78  00F4               	movwf	Delay_ms@time_in_ms+1
  5885  1B79  31AC  24FE  319B   	fcall	_Delay_ms
  5886                           
  5887                           ;./main.h: 565:     get_swr();
  5888  1B7C  3198  20F2  319B   	fcall	_get_swr
  5889                           
  5890                           ;./main.h: 566:     g_i_swr_a = g_i_SWR;
  5891  1B7F  0879               	movf	_g_i_SWR+1,w
  5892  1B80  0022               	movlb	2	; select bank2
  5893  1B81  00CC               	movwf	(_g_i_swr_a+1)^(0+256)
  5894  1B82  0878               	movf	_g_i_SWR,w
  5895  1B83  00CB               	movwf	_g_i_swr_a^(0+256)
  5896                           
  5897                           ;./main.h: 567:     if (g_i_SWR < 110)
  5898  1B84  0879               	movf	_g_i_SWR+1,w
  5899  1B85  3A80               	xorlw	128
  5900  1B86  0021               	movlb	1	; select bank1
  5901  1B87  00EF               	movwf	??_tune^(0+128)
  5902  1B88  3080               	movlw	128
  5903  1B89  026F               	subwf	??_tune^(0+128),w
  5904  1B8A  1D03               	skipz
  5905  1B8B  2B8E               	goto	u13895
  5906  1B8C  306E               	movlw	110
  5907  1B8D  0278               	subwf	_g_i_SWR,w
  5908  1B8E                     u13895:
  5909  1B8E  1C03               	btfss	3,0
  5910  1B8F  0008               	return
  5911                           
  5912                           ;./main.h: 569:     if (e_i_tenths_init_max_swr > 110 & g_i_SWR > e_i_tenths_init_max_sw
      +                          r)
  5913  1B90  0023               	movlb	3	; select bank3
  5914  1B91  0823               	movf	(_e_i_tenths_init_max_swr+1)^(0+384),w
  5915  1B92  3A80               	xorlw	128
  5916  1B93  0021               	movlb	1	; select bank1
  5917  1B94  00EF               	movwf	??_tune^(0+128)
  5918  1B95  3080               	movlw	128
  5919  1B96  026F               	subwf	??_tune^(0+128),w
  5920  1B97  1D03               	skipz
  5921  1B98  2B9C               	goto	u13905
  5922  1B99  306F               	movlw	111
  5923  1B9A  0023               	movlb	3	; select bank3
  5924  1B9B  0222               	subwf	_e_i_tenths_init_max_swr^(0+384),w
  5925  1B9C                     u13905:
  5926  1B9C  1C03               	skipc
  5927  1B9D  2BAD               	goto	l9040
  5928  1B9E  0023               	movlb	3	; select bank3
  5929  1B9F  0823               	movf	(_e_i_tenths_init_max_swr+1)^(0+384),w
  5930  1BA0  3A80               	xorlw	128
  5931  1BA1  0021               	movlb	1	; select bank1
  5932  1BA2  00EF               	movwf	??_tune^(0+128)
  5933  1BA3  0879               	movf	_g_i_SWR+1,w
  5934  1BA4  3A80               	xorlw	128
  5935  1BA5  026F               	subwf	??_tune^(0+128),w
  5936  1BA6  1D03               	skipz
  5937  1BA7  2BAB               	goto	u13915
  5938  1BA8  0878               	movf	_g_i_SWR,w
  5939  1BA9  0023               	movlb	3	; select bank3
  5940  1BAA  0222               	subwf	_e_i_tenths_init_max_swr^(0+384),w
  5941  1BAB                     u13915:
  5942  1BAB  1C03               	btfss	3,0
  5943  1BAC  0008               	return
  5944  1BAD                     l9040:
  5945                           
  5946                           ;./main.h: 572:     sub_tune();
  5947  1BAD  3190  203E  319B   	fcall	_sub_tune
  5948                           
  5949                           ;./main.h: 573:     if (g_i_SWR == 0) {
  5950  1BB0  0878               	movf	_g_i_SWR,w
  5951  1BB1  0479               	iorwf	_g_i_SWR+1,w
  5952  1BB2  1D03               	btfss	3,2
  5953  1BB3  2BB7               	goto	l9048
  5954                           
  5955                           ;./main.h: 574:         atu_reset();
  5956  1BB4  31AC  24E8         	fcall	_atu_reset
  5957  1BB6  0008               	return
  5958  1BB7                     l9048:
  5959                           
  5960                           ;./main.h: 577:     if (g_i_SWR < 120)
  5961  1BB7  0879               	movf	_g_i_SWR+1,w
  5962  1BB8  3A80               	xorlw	128
  5963  1BB9  0021               	movlb	1	; select bank1
  5964  1BBA  00EF               	movwf	??_tune^(0+128)
  5965  1BBB  3080               	movlw	128
  5966  1BBC  026F               	subwf	??_tune^(0+128),w
  5967  1BBD  1D03               	skipz
  5968  1BBE  2BC1               	goto	u13935
  5969  1BBF  3078               	movlw	120
  5970  1BC0  0278               	subwf	_g_i_SWR,w
  5971  1BC1                     u13935:
  5972  1BC1  1C03               	btfss	3,0
  5973  1BC2  0008               	return
  5974                           
  5975                           ;./main.h: 579:     if (e_c_num_C_q == 5 & e_c_num_L_q == 5)
  5976  1BC3  3005               	movlw	5
  5977  1BC4  0022               	movlb	2	; select bank2
  5978  1BC5  066C               	xorwf	_e_c_num_C_q^(0+256),w
  5979  1BC6  1D03               	btfss	3,2
  5980  1BC7  2BCC               	goto	l9058
  5981  1BC8  3005               	movlw	5
  5982  1BC9  066D               	xorwf	_e_c_num_L_q^(0+256),w
  5983  1BCA  1903               	btfsc	3,2
  5984  1BCB  0008               	return
  5985  1BCC                     l9058:
  5986                           
  5987                           ;./main.h: 582:     if (e_c_num_L_q > 5) {
  5988  1BCC  3006               	movlw	6
  5989  1BCD  026D               	subwf	_e_c_num_L_q^(0+256),w
  5990  1BCE  1C03               	skipc
  5991  1BCF  2BDB               	goto	l9066
  5992                           
  5993                           ;./main.h: 583:         g_c_step_ind = g_c_L_mult;
  5994  1BD0  086F               	movf	_g_c_L_mult^(0+256),w
  5995  1BD1  0021               	movlb	1	; select bank1
  5996  1BD2  00EF               	movwf	??_tune^(0+128)
  5997  1BD3  086F               	movf	??_tune^(0+128),w
  5998  1BD4  0022               	movlb	2	; select bank2
  5999  1BD5  00B9               	movwf	_g_c_step_ind^(0+256)
  6000                           
  6001                           ;./main.h: 584:         g_c_L_mult = 1;
  6002  1BD6  01EF               	clrf	_g_c_L_mult^(0+256)
  6003  1BD7  0AEF               	incf	_g_c_L_mult^(0+256),f
  6004                           
  6005                           ;./main.h: 585:         sharp_ind();
  6006  1BD8  3198  202C  319B   	fcall	_sharp_ind
  6007  1BDB                     l9066:
  6008                           
  6009                           ;./main.h: 587:     if (g_i_SWR < 120)
  6010  1BDB  0879               	movf	_g_i_SWR+1,w
  6011  1BDC  3A80               	xorlw	128
  6012  1BDD  0021               	movlb	1	; select bank1
  6013  1BDE  00EF               	movwf	??_tune^(0+128)
  6014  1BDF  3080               	movlw	128
  6015  1BE0  026F               	subwf	??_tune^(0+128),w
  6016  1BE1  1D03               	skipz
  6017  1BE2  2BE5               	goto	u13975
  6018  1BE3  3078               	movlw	120
  6019  1BE4  0278               	subwf	_g_i_SWR,w
  6020  1BE5                     u13975:
  6021  1BE5  1C03               	btfss	3,0
  6022  1BE6  0008               	return
  6023                           
  6024                           ;./main.h: 589:     if (e_c_num_C_q > 5) {
  6025  1BE7  3006               	movlw	6
  6026  1BE8  0022               	movlb	2	; select bank2
  6027  1BE9  026C               	subwf	_e_c_num_C_q^(0+256),w
  6028  1BEA  1C03               	skipc
  6029  1BEB  2BF7               	goto	l9078
  6030                           
  6031                           ;./main.h: 590:         g_c_step_cap = g_c_C_mult;
  6032  1BEC  086E               	movf	_g_c_C_mult^(0+256),w
  6033  1BED  0021               	movlb	1	; select bank1
  6034  1BEE  00EF               	movwf	??_tune^(0+128)
  6035  1BEF  086F               	movf	??_tune^(0+128),w
  6036  1BF0  0022               	movlb	2	; select bank2
  6037  1BF1  00BA               	movwf	_g_c_step_cap^(0+256)
  6038                           
  6039                           ;./main.h: 591:         g_c_C_mult = 1;
  6040  1BF2  01EE               	clrf	_g_c_C_mult^(0+256)
  6041  1BF3  0AEE               	incf	_g_c_C_mult^(0+256),f
  6042                           
  6043                           ;./main.h: 592:         sharp_cap();
  6044  1BF4  31A7  273B  319B   	fcall	_sharp_cap
  6045  1BF7                     l9078:
  6046                           
  6047                           ;./main.h: 594:     if (e_c_num_L_q == 5)
  6048  1BF7  3005               	movlw	5
  6049  1BF8  0022               	movlb	2	; select bank2
  6050  1BF9  066D               	xorwf	_e_c_num_L_q^(0+256),w
  6051  1BFA  1D03               	btfss	3,2
  6052  1BFB  2BFF               	goto	l9082
  6053                           
  6054                           ;./main.h: 595:         g_c_L_mult = 1;
  6055  1BFC  01EF               	clrf	_g_c_L_mult^(0+256)
  6056  1BFD  0AEF               	incf	_g_c_L_mult^(0+256),f
  6057  1BFE  2C0F               	goto	l9090
  6058  1BFF                     l9082:
  6059  1BFF  3006               	movlw	6
  6060  1C00  066D               	xorwf	_e_c_num_L_q^(0+256),w
  6061  1C01  1D03               	btfss	3,2
  6062  1C02  2C05               	goto	l9086
  6063                           
  6064                           ;./main.h: 597:         g_c_L_mult = 2;
  6065  1C03  3002               	movlw	2
  6066  1C04  2C0A               	goto	L12
  6067  1C05                     l9086:
  6068  1C05  3007               	movlw	7
  6069  1C06  066D               	xorwf	_e_c_num_L_q^(0+256),w
  6070  1C07  1D03               	btfss	3,2
  6071  1C08  2C0F               	goto	l9090
  6072                           
  6073                           ;./main.h: 599:         g_c_L_mult = 4;
  6074  1C09  3004               	movlw	4
  6075  1C0A                     L12:
  6076  1C0A  0021               	movlb	1	; select bank1
  6077  1C0B  00EF               	movwf	??_tune^(0+128)
  6078  1C0C  086F               	movf	??_tune^(0+128),w
  6079  1C0D  0022               	movlb	2	; select bank2
  6080  1C0E  00EF               	movwf	_g_c_L_mult^(0+256)
  6081  1C0F                     l9090:
  6082                           
  6083                           ;./main.h: 600:     if (e_c_num_C_q == 5)
  6084  1C0F  3005               	movlw	5
  6085  1C10  066C               	xorwf	_e_c_num_C_q^(0+256),w
  6086  1C11  1D03               	btfss	3,2
  6087  1C12  2C16               	goto	l9094
  6088                           
  6089                           ;./main.h: 601:         g_c_C_mult = 1;
  6090  1C13  01EE               	clrf	_g_c_C_mult^(0+256)
  6091  1C14  0AEE               	incf	_g_c_C_mult^(0+256),f
  6092  1C15  2C26               	goto	l357
  6093  1C16                     l9094:
  6094  1C16  3006               	movlw	6
  6095  1C17  066C               	xorwf	_e_c_num_C_q^(0+256),w
  6096  1C18  1D03               	btfss	3,2
  6097  1C19  2C1C               	goto	l9098
  6098                           
  6099                           ;./main.h: 603:         g_c_C_mult = 2;
  6100  1C1A  3002               	movlw	2
  6101  1C1B  2C21               	goto	L13
  6102  1C1C                     l9098:
  6103  1C1C  3007               	movlw	7
  6104  1C1D  066C               	xorwf	_e_c_num_C_q^(0+256),w
  6105  1C1E  1D03               	btfss	3,2
  6106  1C1F  2C26               	goto	l357
  6107                           
  6108                           ;./main.h: 605:         g_c_C_mult = 4;
  6109  1C20  3004               	movlw	4
  6110  1C21                     L13:
  6111  1C21  0021               	movlb	1	; select bank1
  6112  1C22  00EF               	movwf	??_tune^(0+128)
  6113  1C23  086F               	movf	??_tune^(0+128),w
  6114  1C24  0022               	movlb	2	; select bank2
  6115  1C25  00EE               	movwf	_g_c_C_mult^(0+256)
  6116  1C26                     l357:
  6117  1C26  0064               	clrwdt	;# 
  6118  1C27  0008               	return
  6119  1C28                     __end_of_tune:
  6120                           
  6121                           	psect	text12
  6122  103E                     __ptext12:	
  6123 ;; *************** function _sub_tune *****************
  6124 ;; Defined at:
  6125 ;;		line 463 in file "./main.h"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  l_int_swr_me    2   23[BANK2 ] int 
  6130 ;;  l_int_cap_me    2   21[BANK2 ] int 
  6131 ;;  l_int_ind_me    2   19[BANK2 ] int 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/2
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0
  6145 ;;Total ram usage:        9 bytes
  6146 ;; Hardware stack levels used: 1
  6147 ;; Hardware stack levels required when called: 11
  6148 ;; This function calls:
  6149 ;;		_Delay_ms
  6150 ;;		_atu_reset
  6151 ;;		_coarse_tune
  6152 ;;		_get_swr
  6153 ;;		_set_cap
  6154 ;;		_set_ind
  6155 ;;		_set_sw
  6156 ;;		_sharp_cap
  6157 ;;		_sharp_ind
  6158 ;; This function is called by:
  6159 ;;		_tune
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163  103E                     _sub_tune:	
  6164                           ;psect for function _sub_tune
  6165                           
  6166                           
  6167                           ;./main.h: 464:     int l_int_swr_mem, l_int_ind_mem, l_int_cap_mem;;./main.h: 466:     
      +                          l_int_swr_mem = g_i_SWR;
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _sub_tune: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6171  103E  0879               	movf	_g_i_SWR+1,w
  6172  103F  0022               	movlb	2	; select bank2
  6173  1040  00E5               	movwf	(sub_tune@l_int_swr_mem+1)^(0+256)
  6174  1041  0878               	movf	_g_i_SWR,w
  6175  1042  00E4               	movwf	sub_tune@l_int_swr_mem^(0+256)
  6176                           
  6177                           ;./main.h: 467:     coarse_tune();
  6178  1043  31A5  25D1  3190   	fcall	_coarse_tune
  6179                           
  6180                           ;./main.h: 468:     if (g_i_SWR == 0) {
  6181  1046  0878               	movf	_g_i_SWR,w
  6182  1047  0479               	iorwf	_g_i_SWR+1,w
  6183  1048  1D03               	btfss	3,2
  6184  1049  284D               	goto	l8894
  6185  104A                     l8890:
  6186                           
  6187                           ;./main.h: 469:         atu_reset();
  6188  104A  31AC  24E8         	fcall	_atu_reset
  6189  104C  0008               	return
  6190  104D                     l8894:
  6191                           
  6192                           ;./main.h: 472:     get_swr();
  6193  104D  3198  20F2  3190   	fcall	_get_swr
  6194                           
  6195                           ;./main.h: 473:     if (g_i_SWR < 120)
  6196  1050  0879               	movf	_g_i_SWR+1,w
  6197  1051  3A80               	xorlw	128
  6198  1052  0022               	movlb	2	; select bank2
  6199  1053  00DD               	movwf	??_sub_tune^(0+256)
  6200  1054  3080               	movlw	128
  6201  1055  025D               	subwf	??_sub_tune^(0+256),w
  6202  1056  1D03               	skipz
  6203  1057  285A               	goto	u13695
  6204  1058  3078               	movlw	120
  6205  1059  0278               	subwf	_g_i_SWR,w
  6206  105A                     u13695:
  6207  105A  1C03               	btfss	3,0
  6208  105B  0008               	return
  6209                           
  6210                           ;./main.h: 475:     sharp_ind();
  6211  105C  3198  202C  3190   	fcall	_sharp_ind
  6212                           
  6213                           ;./main.h: 476:     if (g_i_SWR == 0) {
  6214  105F  0878               	movf	_g_i_SWR,w
  6215  1060  0479               	iorwf	_g_i_SWR+1,w
  6216  1061  1903               	btfsc	3,2
  6217  1062  284A               	goto	l8890
  6218                           
  6219                           ;./main.h: 480:     get_swr();
  6220  1063  3198  20F2  3190   	fcall	_get_swr
  6221                           
  6222                           ;./main.h: 481:     if (g_i_SWR < 120)
  6223  1066  0879               	movf	_g_i_SWR+1,w
  6224  1067  3A80               	xorlw	128
  6225  1068  0022               	movlb	2	; select bank2
  6226  1069  00DD               	movwf	??_sub_tune^(0+256)
  6227  106A  3080               	movlw	128
  6228  106B  025D               	subwf	??_sub_tune^(0+256),w
  6229  106C  1D03               	skipz
  6230  106D  2870               	goto	u13715
  6231  106E  3078               	movlw	120
  6232  106F  0278               	subwf	_g_i_SWR,w
  6233  1070                     u13715:
  6234  1070  1C03               	btfss	3,0
  6235  1071  0008               	return
  6236                           
  6237                           ;./main.h: 483:     sharp_cap();
  6238  1072  31A7  273B  3190   	fcall	_sharp_cap
  6239                           
  6240                           ;./main.h: 484:     if (g_i_SWR == 0) {
  6241  1075  0878               	movf	_g_i_SWR,w
  6242  1076  0479               	iorwf	_g_i_SWR+1,w
  6243  1077  1903               	btfsc	3,2
  6244  1078  284A               	goto	l8890
  6245                           
  6246                           ;./main.h: 488:     get_swr();
  6247  1079  3198  20F2  3190   	fcall	_get_swr
  6248                           
  6249                           ;./main.h: 489:     if (g_i_SWR < 120)
  6250  107C  0879               	movf	_g_i_SWR+1,w
  6251  107D  3A80               	xorlw	128
  6252  107E  0022               	movlb	2	; select bank2
  6253  107F  00DD               	movwf	??_sub_tune^(0+256)
  6254  1080  3080               	movlw	128
  6255  1081  025D               	subwf	??_sub_tune^(0+256),w
  6256  1082  1D03               	skipz
  6257  1083  2886               	goto	u13735
  6258  1084  3078               	movlw	120
  6259  1085  0278               	subwf	_g_i_SWR,w
  6260  1086                     u13735:
  6261  1086  1C03               	btfss	3,0
  6262  1087  0008               	return
  6263                           
  6264                           ;./main.h: 492:     if (g_i_SWR < 200 & g_i_SWR < l_int_swr_mem & (l_int_swr_mem - g_i_S
      +                          WR) > 100)
  6265  1088  0879               	movf	_g_i_SWR+1,w
  6266  1089  3A80               	xorlw	128
  6267  108A  0022               	movlb	2	; select bank2
  6268  108B  00DD               	movwf	??_sub_tune^(0+256)
  6269  108C  3080               	movlw	128
  6270  108D  025D               	subwf	??_sub_tune^(0+256),w
  6271  108E  1D03               	skipz
  6272  108F  2892               	goto	u13745
  6273  1090  30C8               	movlw	200
  6274  1091  0278               	subwf	_g_i_SWR,w
  6275  1092                     u13745:
  6276  1092  1803               	skipnc
  6277  1093  28B3               	goto	l8936
  6278  1094  0879               	movf	_g_i_SWR+1,w
  6279  1095  3A80               	xorlw	128
  6280  1096  0022               	movlb	2	; select bank2
  6281  1097  00DD               	movwf	??_sub_tune^(0+256)
  6282  1098  0865               	movf	(sub_tune@l_int_swr_mem+1)^(0+256),w
  6283  1099  3A80               	xorlw	128
  6284  109A  025D               	subwf	??_sub_tune^(0+256),w
  6285  109B  1D03               	skipz
  6286  109C  289F               	goto	u13755
  6287  109D  0864               	movf	sub_tune@l_int_swr_mem^(0+256),w
  6288  109E  0278               	subwf	_g_i_SWR,w
  6289  109F                     u13755:
  6290  109F  1803               	skipnc
  6291  10A0  28B3               	goto	l8936
  6292  10A1  0878               	movf	_g_i_SWR,w
  6293  10A2  0022               	movlb	2	; select bank2
  6294  10A3  0264               	subwf	sub_tune@l_int_swr_mem^(0+256),w
  6295  10A4  00DD               	movwf	??_sub_tune^(0+256)
  6296  10A5  0879               	movf	_g_i_SWR+1,w
  6297  10A6  3B65               	subwfb	(sub_tune@l_int_swr_mem+1)^(0+256),w
  6298  10A7  00DE               	movwf	(??_sub_tune+1)^(0+256)
  6299  10A8  085E               	movf	(??_sub_tune+1)^(0+256),w
  6300  10A9  3A80               	xorlw	128
  6301  10AA  00DF               	movwf	(??_sub_tune+2)^(0+256)
  6302  10AB  3080               	movlw	128
  6303  10AC  025F               	subwf	(??_sub_tune+2)^(0+256),w
  6304  10AD  1D03               	skipz
  6305  10AE  28B1               	goto	u13765
  6306  10AF  3065               	movlw	101
  6307  10B0  025D               	subwf	??_sub_tune^(0+256),w
  6308  10B1                     u13765:
  6309  10B1  1803               	btfsc	3,0
  6310  10B2  0008               	return
  6311  10B3                     l8936:
  6312                           
  6313                           ;./main.h: 494:     l_int_swr_mem = g_i_SWR;
  6314  10B3  0879               	movf	_g_i_SWR+1,w
  6315  10B4  0022               	movlb	2	; select bank2
  6316  10B5  00E5               	movwf	(sub_tune@l_int_swr_mem+1)^(0+256)
  6317  10B6  0878               	movf	_g_i_SWR,w
  6318  10B7  00E4               	movwf	sub_tune@l_int_swr_mem^(0+256)
  6319                           
  6320                           ;./main.h: 495:     l_int_ind_mem = g_c_ind;
  6321  10B8  083C               	movf	_g_c_ind^(0+256),w
  6322  10B9  00DD               	movwf	??_sub_tune^(0+256)
  6323  10BA  01DE               	clrf	(??_sub_tune^(0+256)+1)
  6324  10BB  085D               	movf	??_sub_tune^(0+256),w
  6325  10BC  00E0               	movwf	sub_tune@l_int_ind_mem^(0+256)
  6326  10BD  085E               	movf	(??_sub_tune+1)^(0+256),w
  6327  10BE  00E1               	movwf	(sub_tune@l_int_ind_mem+1)^(0+256)
  6328                           
  6329                           ;./main.h: 496:     l_int_cap_mem = g_c_cap;
  6330  10BF  087A               	movf	_g_c_cap,w
  6331  10C0  00DD               	movwf	??_sub_tune^(0+256)
  6332  10C1  01DE               	clrf	(??_sub_tune^(0+256)+1)
  6333  10C2  085D               	movf	??_sub_tune^(0+256),w
  6334  10C3  00E2               	movwf	sub_tune@l_int_cap_mem^(0+256)
  6335  10C4  085E               	movf	(??_sub_tune+1)^(0+256),w
  6336  10C5  00E3               	movwf	(sub_tune@l_int_cap_mem+1)^(0+256)
  6337                           
  6338                           ;./main.h: 498:     if (g_c_SW == 1)
  6339  10C6  033B               	decf	_g_c_SW^(0+256),w
  6340  10C7  1D03               	btfss	3,2
  6341  10C8  28CB               	goto	l326
  6342                           
  6343                           ;./main.h: 499:         g_c_SW = 0;
  6344  10C9  01BB               	clrf	_g_c_SW^(0+256)
  6345  10CA  28CD               	goto	l8942
  6346  10CB                     l326:	
  6347                           ;./main.h: 500:     else
  6348                           
  6349                           
  6350                           ;./main.h: 501:         g_c_SW = 1;
  6351  10CB  01BB               	clrf	_g_c_SW^(0+256)
  6352  10CC  0ABB               	incf	_g_c_SW^(0+256),f
  6353  10CD                     l8942:
  6354                           
  6355                           ;./main.h: 502:     atu_reset();
  6356  10CD  31AC  24E8  3190   	fcall	_atu_reset
  6357                           
  6358                           ;./main.h: 503:     set_sw(g_c_SW);
  6359  10D0  0022               	movlb	2	; select bank2
  6360  10D1  083B               	movf	_g_c_SW^(0+256),w
  6361  10D2  31AC  24AE  3190   	fcall	_set_sw
  6362                           
  6363                           ;./main.h: 504:     Delay_ms(50);
  6364  10D5  3032               	movlw	50
  6365  10D6  00F3               	movwf	Delay_ms@time_in_ms
  6366  10D7  3000               	movlw	0
  6367  10D8  00F4               	movwf	Delay_ms@time_in_ms+1
  6368  10D9  31AC  24FE  3190   	fcall	_Delay_ms
  6369                           
  6370                           ;./main.h: 505:     get_swr();
  6371  10DC  3198  20F2  3190   	fcall	_get_swr
  6372                           
  6373                           ;./main.h: 506:     if (g_i_SWR < 120)
  6374  10DF  0879               	movf	_g_i_SWR+1,w
  6375  10E0  3A80               	xorlw	128
  6376  10E1  0022               	movlb	2	; select bank2
  6377  10E2  00DD               	movwf	??_sub_tune^(0+256)
  6378  10E3  3080               	movlw	128
  6379  10E4  025D               	subwf	??_sub_tune^(0+256),w
  6380  10E5  1D03               	skipz
  6381  10E6  28E9               	goto	u13785
  6382  10E7  3078               	movlw	120
  6383  10E8  0278               	subwf	_g_i_SWR,w
  6384  10E9                     u13785:
  6385  10E9  1C03               	btfss	3,0
  6386  10EA  0008               	return
  6387                           
  6388                           ;./main.h: 509:     coarse_tune();
  6389  10EB  31A5  25D1  3190   	fcall	_coarse_tune
  6390                           
  6391                           ;./main.h: 510:     if (g_i_SWR == 0) {
  6392  10EE  0878               	movf	_g_i_SWR,w
  6393  10EF  0479               	iorwf	_g_i_SWR+1,w
  6394  10F0  1903               	btfsc	3,2
  6395  10F1  284A               	goto	l8890
  6396                           
  6397                           ;./main.h: 514:     get_swr();
  6398  10F2  3198  20F2  3190   	fcall	_get_swr
  6399                           
  6400                           ;./main.h: 515:     if (g_i_SWR < 120)
  6401  10F5  0879               	movf	_g_i_SWR+1,w
  6402  10F6  3A80               	xorlw	128
  6403  10F7  0022               	movlb	2	; select bank2
  6404  10F8  00DD               	movwf	??_sub_tune^(0+256)
  6405  10F9  3080               	movlw	128
  6406  10FA  025D               	subwf	??_sub_tune^(0+256),w
  6407  10FB  1D03               	skipz
  6408  10FC  28FF               	goto	u13805
  6409  10FD  3078               	movlw	120
  6410  10FE  0278               	subwf	_g_i_SWR,w
  6411  10FF                     u13805:
  6412  10FF  1C03               	btfss	3,0
  6413  1100  0008               	return
  6414                           
  6415                           ;./main.h: 517:     sharp_ind();
  6416  1101  3198  202C  3190   	fcall	_sharp_ind
  6417                           
  6418                           ;./main.h: 518:     if (g_i_SWR == 0) {
  6419  1104  0878               	movf	_g_i_SWR,w
  6420  1105  0479               	iorwf	_g_i_SWR+1,w
  6421  1106  1903               	btfsc	3,2
  6422  1107  284A               	goto	l8890
  6423                           
  6424                           ;./main.h: 522:     get_swr();
  6425  1108  3198  20F2  3190   	fcall	_get_swr
  6426                           
  6427                           ;./main.h: 523:     if (g_i_SWR < 120)
  6428  110B  0879               	movf	_g_i_SWR+1,w
  6429  110C  3A80               	xorlw	128
  6430  110D  0022               	movlb	2	; select bank2
  6431  110E  00DD               	movwf	??_sub_tune^(0+256)
  6432  110F  3080               	movlw	128
  6433  1110  025D               	subwf	??_sub_tune^(0+256),w
  6434  1111  1D03               	skipz
  6435  1112  2915               	goto	u13825
  6436  1113  3078               	movlw	120
  6437  1114  0278               	subwf	_g_i_SWR,w
  6438  1115                     u13825:
  6439  1115  1C03               	btfss	3,0
  6440  1116  0008               	return
  6441                           
  6442                           ;./main.h: 525:     sharp_cap();
  6443  1117  31A7  273B  3190   	fcall	_sharp_cap
  6444                           
  6445                           ;./main.h: 526:     if (g_i_SWR == 0) {
  6446  111A  0878               	movf	_g_i_SWR,w
  6447  111B  0479               	iorwf	_g_i_SWR+1,w
  6448  111C  1903               	btfsc	3,2
  6449  111D  284A               	goto	l8890
  6450                           
  6451                           ;./main.h: 530:     get_swr();
  6452  111E  3198  20F2  3190   	fcall	_get_swr
  6453                           
  6454                           ;./main.h: 531:     if (g_i_SWR < 120)
  6455  1121  0879               	movf	_g_i_SWR+1,w
  6456  1122  3A80               	xorlw	128
  6457  1123  0022               	movlb	2	; select bank2
  6458  1124  00DD               	movwf	??_sub_tune^(0+256)
  6459  1125  3080               	movlw	128
  6460  1126  025D               	subwf	??_sub_tune^(0+256),w
  6461  1127  1D03               	skipz
  6462  1128  292B               	goto	u13845
  6463  1129  3078               	movlw	120
  6464  112A  0278               	subwf	_g_i_SWR,w
  6465  112B                     u13845:
  6466  112B  1C03               	btfss	3,0
  6467  112C  0008               	return
  6468                           
  6469                           ;./main.h: 534:     if (g_i_SWR > l_int_swr_mem) {
  6470  112D  0022               	movlb	2	; select bank2
  6471  112E  0865               	movf	(sub_tune@l_int_swr_mem+1)^(0+256),w
  6472  112F  3A80               	xorlw	128
  6473  1130  00DD               	movwf	??_sub_tune^(0+256)
  6474  1131  0879               	movf	_g_i_SWR+1,w
  6475  1132  3A80               	xorlw	128
  6476  1133  025D               	subwf	??_sub_tune^(0+256),w
  6477  1134  1D03               	skipz
  6478  1135  2938               	goto	u13855
  6479  1136  0878               	movf	_g_i_SWR,w
  6480  1137  0264               	subwf	sub_tune@l_int_swr_mem^(0+256),w
  6481  1138                     u13855:
  6482  1138  1803               	skipnc
  6483  1139  295B               	goto	l335
  6484                           
  6485                           ;./main.h: 535:         if (g_c_SW == 1)
  6486  113A  0022               	movlb	2	; select bank2
  6487  113B  033B               	decf	_g_c_SW^(0+256),w
  6488  113C  1D03               	btfss	3,2
  6489  113D  2940               	goto	l336
  6490                           
  6491                           ;./main.h: 536:             g_c_SW = 0;
  6492  113E  01BB               	clrf	_g_c_SW^(0+256)
  6493  113F  2942               	goto	l8998
  6494  1140                     l336:	
  6495                           ;./main.h: 537:         else
  6496                           
  6497                           
  6498                           ;./main.h: 538:             g_c_SW = 1;
  6499  1140  01BB               	clrf	_g_c_SW^(0+256)
  6500  1141  0ABB               	incf	_g_c_SW^(0+256),f
  6501  1142                     l8998:
  6502                           
  6503                           ;./main.h: 539:         set_sw(g_c_SW);
  6504  1142  083B               	movf	_g_c_SW^(0+256),w
  6505  1143  31AC  24AE  3190   	fcall	_set_sw
  6506                           
  6507                           ;./main.h: 540:         g_c_ind = (char) (l_int_ind_mem);
  6508  1146  0022               	movlb	2	; select bank2
  6509  1147  0860               	movf	sub_tune@l_int_ind_mem^(0+256),w
  6510  1148  00DD               	movwf	??_sub_tune^(0+256)
  6511  1149  085D               	movf	??_sub_tune^(0+256),w
  6512  114A  00BC               	movwf	_g_c_ind^(0+256)
  6513                           
  6514                           ;./main.h: 541:         g_c_cap = (char) (l_int_cap_mem);
  6515  114B  0862               	movf	sub_tune@l_int_cap_mem^(0+256),w
  6516  114C  00DD               	movwf	??_sub_tune^(0+256)
  6517  114D  085D               	movf	??_sub_tune^(0+256),w
  6518  114E  00FA               	movwf	_g_c_cap
  6519                           
  6520                           ;./main.h: 542:         set_ind(g_c_ind);
  6521  114F  083C               	movf	_g_c_ind^(0+256),w
  6522  1150  31A2  22BA  3190   	fcall	_set_ind
  6523                           
  6524                           ;./main.h: 543:         set_cap(g_c_cap);
  6525  1153  087A               	movf	_g_c_cap,w
  6526  1154  31AE  2636         	fcall	_set_cap
  6527                           
  6528                           ;./main.h: 544:         g_i_SWR = l_int_swr_mem;
  6529  1156  0022               	movlb	2	; select bank2
  6530  1157  0865               	movf	(sub_tune@l_int_swr_mem+1)^(0+256),w
  6531  1158  00F9               	movwf	_g_i_SWR+1
  6532  1159  0864               	movf	sub_tune@l_int_swr_mem^(0+256),w
  6533  115A  00F8               	movwf	_g_i_SWR
  6534  115B                     l335:	
  6535                           ;./main.h: 545:     }
  6536                           
  6537  115B  0064               	clrwdt	;# 
  6538  115C  0008               	return
  6539  115D                     __end_of_sub_tune:
  6540                           
  6541                           	psect	text13
  6542  182C                     __ptext13:	
  6543 ;; *************** function _sharp_ind *****************
  6544 ;; Defined at:
  6545 ;;		line 420 in file "./main.h"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  l_sharp_ind_    2   10[BANK2 ] int 
  6550 ;;  l_sharp_ind_    1   12[BANK2 ] unsigned char 
  6551 ;;  l_sharp_ind_    1    9[BANK2 ] unsigned char 
  6552 ;;  l_sharp_ind_    1    8[BANK2 ] unsigned char 
  6553 ;;  l_sharp_ind_    1    7[BANK2 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/2
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:       11 bytes
  6568 ;; Hardware stack levels used: 1
  6569 ;; Hardware stack levels required when called: 9
  6570 ;; This function calls:
  6571 ;;		_Delay_ms
  6572 ;;		___bmul
  6573 ;;		_get_swr
  6574 ;;		_set_ind
  6575 ;; This function is called by:
  6576 ;;		_sub_tune
  6577 ;;		_tune
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581  182C                     _sharp_ind:	
  6582                           ;psect for function _sharp_ind
  6583                           
  6584                           
  6585                           ;./main.h: 421:     char l_sharp_ind_range, l_sharp_ind_count, l_sharp_ind_max_range, l_
      +                          sharp_ind_min_range;;./main.h: 422:     int l_sharp_ind_min_SWR;;./main.h: 423:     l_sh
      +                          arp_ind_range = g_c_step_ind * g_c_L_mult;
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _sharp_ind: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6589  182C  0022               	movlb	2	; select bank2
  6590  182D  086F               	movf	_g_c_L_mult^(0+256),w
  6591  182E  00CF               	movwf	??_sharp_ind^(0+256)
  6592  182F  084F               	movf	??_sharp_ind^(0+256),w
  6593  1830  00F3               	movwf	___bmul@multiplicand
  6594  1831  0839               	movf	_g_c_step_ind^(0+256),w
  6595  1832  31AC  249D  3198   	fcall	___bmul
  6596  1835  0022               	movlb	2	; select bank2
  6597  1836  00D0               	movwf	(??_sharp_ind+1)^(0+256)
  6598  1837  0850               	movf	(??_sharp_ind+1)^(0+256),w
  6599  1838  00D6               	movwf	sharp_ind@l_sharp_ind_range^(0+256)
  6600                           
  6601                           ;./main.h: 425:     l_sharp_ind_max_range = g_c_ind + l_sharp_ind_range;
  6602  1839  083C               	movf	_g_c_ind^(0+256),w
  6603  183A  0756               	addwf	sharp_ind@l_sharp_ind_range^(0+256),w
  6604  183B  00CF               	movwf	??_sharp_ind^(0+256)
  6605  183C  084F               	movf	??_sharp_ind^(0+256),w
  6606  183D  00D4               	movwf	sharp_ind@l_sharp_ind_max_range^(0+256)
  6607                           
  6608                           ;./main.h: 426:     if (l_sharp_ind_max_range > 32 * g_c_L_mult - 1)
  6609  183E  086F               	movf	_g_c_L_mult^(0+256),w
  6610  183F  00CF               	movwf	??_sharp_ind^(0+256)
  6611  1840  01D0               	clrf	(??_sharp_ind^(0+256)+1)
  6612  1841  3005               	movlw	5
  6613  1842                     u13575:
  6614  1842  35CF               	lslf	??_sharp_ind^(0+256),f
  6615  1843  0DD0               	rlf	(??_sharp_ind^(0+256)+1),f
  6616  1844  0B89               	decfsz	9,f
  6617  1845  2842               	goto	u13575
  6618  1846  084F               	movf	??_sharp_ind^(0+256),w
  6619  1847  3EFF               	addlw	255
  6620  1848  00D1               	movwf	(??_sharp_ind+2)^(0+256)
  6621  1849  30FF               	movlw	255
  6622  184A  3D50               	addwfc	(??_sharp_ind+1)^(0+256),w
  6623  184B  00D2               	movwf	(??_sharp_ind+3)^(0+256)
  6624  184C  0852               	movf	(??_sharp_ind+3)^(0+256),w
  6625  184D  3A80               	xorlw	128
  6626  184E  00D3               	movwf	(??_sharp_ind+4)^(0+256)
  6627  184F  3080               	movlw	128
  6628  1850  0253               	subwf	(??_sharp_ind+4)^(0+256),w
  6629  1851  1D03               	skipz
  6630  1852  2855               	goto	u13585
  6631  1853  0854               	movf	sharp_ind@l_sharp_ind_max_range^(0+256),w
  6632  1854  0251               	subwf	(??_sharp_ind+2)^(0+256),w
  6633  1855                     u13585:
  6634  1855  1803               	skipnc
  6635  1856  2864               	goto	l8830
  6636                           
  6637                           ;./main.h: 427:         l_sharp_ind_max_range = 32 * g_c_L_mult - 1;
  6638  1857  0022               	movlb	2	; select bank2
  6639  1858  086F               	movf	_g_c_L_mult^(0+256),w
  6640  1859  00CF               	movwf	??_sharp_ind^(0+256)
  6641  185A  3004               	movlw	4
  6642  185B                     u13595:
  6643  185B  35CF               	lslf	??_sharp_ind^(0+256),f
  6644  185C  3EFF               	addlw	-1
  6645  185D  1D03               	skipz
  6646  185E  285B               	goto	u13595
  6647  185F  354F               	lslf	??_sharp_ind^(0+256),w
  6648  1860  3EFF               	addlw	255
  6649  1861  00D0               	movwf	(??_sharp_ind+1)^(0+256)
  6650  1862  0850               	movf	(??_sharp_ind+1)^(0+256),w
  6651  1863  00D4               	movwf	sharp_ind@l_sharp_ind_max_range^(0+256)
  6652  1864                     l8830:
  6653                           
  6654                           ;./main.h: 428:     if (g_c_ind > l_sharp_ind_range)
  6655  1864  0022               	movlb	2	; select bank2
  6656  1865  083C               	movf	_g_c_ind^(0+256),w
  6657  1866  0256               	subwf	sharp_ind@l_sharp_ind_range^(0+256),w
  6658  1867  1803               	skipnc
  6659  1868  286F               	goto	l8834
  6660                           
  6661                           ;./main.h: 429:         l_sharp_ind_min_range = g_c_ind - l_sharp_ind_range;
  6662  1869  0856               	movf	sharp_ind@l_sharp_ind_range^(0+256),w
  6663  186A  023C               	subwf	_g_c_ind^(0+256),w
  6664  186B  00CF               	movwf	??_sharp_ind^(0+256)
  6665  186C  084F               	movf	??_sharp_ind^(0+256),w
  6666  186D  00D5               	movwf	sharp_ind@l_sharp_ind_min_range^(0+256)
  6667  186E  2870               	goto	l8836
  6668  186F                     l8834:
  6669                           
  6670                           ;./main.h: 431:         l_sharp_ind_min_range = 0;
  6671  186F  01D5               	clrf	sharp_ind@l_sharp_ind_min_range^(0+256)
  6672  1870                     l8836:
  6673                           
  6674                           ;./main.h: 432:     g_c_ind = l_sharp_ind_min_range;
  6675  1870  0855               	movf	sharp_ind@l_sharp_ind_min_range^(0+256),w
  6676  1871  00CF               	movwf	??_sharp_ind^(0+256)
  6677  1872  084F               	movf	??_sharp_ind^(0+256),w
  6678  1873  00BC               	movwf	_g_c_ind^(0+256)
  6679                           
  6680                           ;./main.h: 433:     set_ind(g_c_ind);
  6681  1874  083C               	movf	_g_c_ind^(0+256),w
  6682  1875  31A2  22BA  3198   	fcall	_set_ind
  6683                           
  6684                           ;./main.h: 434:     get_swr();
  6685  1878  3198  20F2  3198   	fcall	_get_swr
  6686                           
  6687                           ;./main.h: 435:     if (g_i_SWR == 0)
  6688  187B  0878               	movf	_g_i_SWR,w
  6689  187C  0479               	iorwf	_g_i_SWR+1,w
  6690  187D  1903               	btfsc	3,2
  6691  187E  0008               	return
  6692                           
  6693                           ;./main.h: 437:     l_sharp_ind_min_SWR = g_i_SWR;
  6694  187F  0879               	movf	_g_i_SWR+1,w
  6695  1880  0022               	movlb	2	; select bank2
  6696  1881  00D8               	movwf	(sharp_ind@l_sharp_ind_min_SWR+1)^(0+256)
  6697  1882  0878               	movf	_g_i_SWR,w
  6698  1883  00D7               	movwf	sharp_ind@l_sharp_ind_min_SWR^(0+256)
  6699                           
  6700                           ;./main.h: 438:     for (l_sharp_ind_count = l_sharp_ind_min_range + g_c_L_mult; l_sharp
      +                          _ind_count <= l_sharp_ind_max_range; l_sharp_ind_count += g_c_L_mult) {
  6701  1884  0855               	movf	sharp_ind@l_sharp_ind_min_range^(0+256),w
  6702  1885  076F               	addwf	_g_c_L_mult^(0+256),w
  6703  1886  00CF               	movwf	??_sharp_ind^(0+256)
  6704  1887  084F               	movf	??_sharp_ind^(0+256),w
  6705  1888  00D9               	movwf	sharp_ind@l_sharp_ind_count^(0+256)
  6706  1889                     l8878:
  6707  1889  0859               	movf	sharp_ind@l_sharp_ind_count^(0+256),w
  6708  188A  0254               	subwf	sharp_ind@l_sharp_ind_max_range^(0+256),w
  6709  188B  1C03               	btfss	3,0
  6710  188C  28ED               	goto	l8880
  6711                           
  6712                           ;./main.h: 439:         set_ind(l_sharp_ind_count);
  6713  188D  0859               	movf	sharp_ind@l_sharp_ind_count^(0+256),w
  6714  188E  31A2  22BA  3198   	fcall	_set_ind
  6715                           
  6716                           ;./main.h: 440:         get_swr();
  6717  1891  3198  20F2  3198   	fcall	_get_swr
  6718                           
  6719                           ;./main.h: 441:         if (g_i_SWR == 0)
  6720  1894  0878               	movf	_g_i_SWR,w
  6721  1895  0479               	iorwf	_g_i_SWR+1,w
  6722  1896  1903               	btfsc	3,2
  6723  1897  0008               	return
  6724                           
  6725                           ;./main.h: 443:         if (g_i_SWR >= l_sharp_ind_min_SWR) {
  6726  1898  0879               	movf	_g_i_SWR+1,w
  6727  1899  3A80               	xorlw	128
  6728  189A  0022               	movlb	2	; select bank2
  6729  189B  00CF               	movwf	??_sharp_ind^(0+256)
  6730  189C  0858               	movf	(sharp_ind@l_sharp_ind_min_SWR+1)^(0+256),w
  6731  189D  3A80               	xorlw	128
  6732  189E  024F               	subwf	??_sharp_ind^(0+256),w
  6733  189F  1D03               	skipz
  6734  18A0  28A3               	goto	u13635
  6735  18A1  0857               	movf	sharp_ind@l_sharp_ind_min_SWR^(0+256),w
  6736  18A2  0278               	subwf	_g_i_SWR,w
  6737  18A3                     u13635:
  6738  18A3  1C03               	skipc
  6739  18A4  28AF               	goto	l8864
  6740                           
  6741                           ;./main.h: 444:             Delay_ms(10);
  6742  18A5  300A               	movlw	10
  6743  18A6  00F3               	movwf	Delay_ms@time_in_ms
  6744  18A7  3000               	movlw	0
  6745  18A8  00F4               	movwf	Delay_ms@time_in_ms+1
  6746  18A9  31AC  24FE  3198   	fcall	_Delay_ms
  6747                           
  6748                           ;./main.h: 445:             get_swr();
  6749  18AC  3198  20F2  3198   	fcall	_get_swr
  6750  18AF                     l8864:
  6751                           
  6752                           ;./main.h: 447:         if (g_i_SWR >= l_sharp_ind_min_SWR) {
  6753  18AF  0879               	movf	_g_i_SWR+1,w
  6754  18B0  3A80               	xorlw	128
  6755  18B1  0022               	movlb	2	; select bank2
  6756  18B2  00CF               	movwf	??_sharp_ind^(0+256)
  6757  18B3  0858               	movf	(sharp_ind@l_sharp_ind_min_SWR+1)^(0+256),w
  6758  18B4  3A80               	xorlw	128
  6759  18B5  024F               	subwf	??_sharp_ind^(0+256),w
  6760  18B6  1D03               	skipz
  6761  18B7  28BA               	goto	u13645
  6762  18B8  0857               	movf	sharp_ind@l_sharp_ind_min_SWR^(0+256),w
  6763  18B9  0278               	subwf	_g_i_SWR,w
  6764  18BA                     u13645:
  6765  18BA  1C03               	skipc
  6766  18BB  28C6               	goto	l8870
  6767                           
  6768                           ;./main.h: 448:             Delay_ms(10);
  6769  18BC  300A               	movlw	10
  6770  18BD  00F3               	movwf	Delay_ms@time_in_ms
  6771  18BE  3000               	movlw	0
  6772  18BF  00F4               	movwf	Delay_ms@time_in_ms+1
  6773  18C0  31AC  24FE  3198   	fcall	_Delay_ms
  6774                           
  6775                           ;./main.h: 449:             get_swr();
  6776  18C3  3198  20F2  3198   	fcall	_get_swr
  6777  18C6                     l8870:
  6778                           
  6779                           ;./main.h: 451:         if (g_i_SWR < l_sharp_ind_min_SWR) {
  6780  18C6  0879               	movf	_g_i_SWR+1,w
  6781  18C7  3A80               	xorlw	128
  6782  18C8  0022               	movlb	2	; select bank2
  6783  18C9  00CF               	movwf	??_sharp_ind^(0+256)
  6784  18CA  0858               	movf	(sharp_ind@l_sharp_ind_min_SWR+1)^(0+256),w
  6785  18CB  3A80               	xorlw	128
  6786  18CC  024F               	subwf	??_sharp_ind^(0+256),w
  6787  18CD  1D03               	skipz
  6788  18CE  28D1               	goto	u13655
  6789  18CF  0857               	movf	sharp_ind@l_sharp_ind_min_SWR^(0+256),w
  6790  18D0  0278               	subwf	_g_i_SWR,w
  6791  18D1                     u13655:
  6792  18D1  1803               	skipnc
  6793  18D2  28ED               	goto	l8880
  6794                           
  6795                           ;./main.h: 452:             l_sharp_ind_min_SWR = g_i_SWR;
  6796  18D3  0879               	movf	_g_i_SWR+1,w
  6797  18D4  0022               	movlb	2	; select bank2
  6798  18D5  00D8               	movwf	(sharp_ind@l_sharp_ind_min_SWR+1)^(0+256)
  6799  18D6  0878               	movf	_g_i_SWR,w
  6800  18D7  00D7               	movwf	sharp_ind@l_sharp_ind_min_SWR^(0+256)
  6801                           
  6802                           ;./main.h: 453:             g_c_ind = l_sharp_ind_count;
  6803  18D8  0859               	movf	sharp_ind@l_sharp_ind_count^(0+256),w
  6804  18D9  00CF               	movwf	??_sharp_ind^(0+256)
  6805  18DA  084F               	movf	??_sharp_ind^(0+256),w
  6806  18DB  00BC               	movwf	_g_c_ind^(0+256)
  6807                           
  6808                           ;./main.h: 454:             if (g_i_SWR < 120)
  6809  18DC  0879               	movf	_g_i_SWR+1,w
  6810  18DD  3A80               	xorlw	128
  6811  18DE  00CF               	movwf	??_sharp_ind^(0+256)
  6812  18DF  3080               	movlw	128
  6813  18E0  024F               	subwf	??_sharp_ind^(0+256),w
  6814  18E1  1D03               	skipz
  6815  18E2  28E5               	goto	u13665
  6816  18E3  3078               	movlw	120
  6817  18E4  0278               	subwf	_g_i_SWR,w
  6818  18E5                     u13665:
  6819  18E5  1C03               	btfss	3,0
  6820  18E6  28ED               	goto	l8880
  6821                           
  6822                           ;./main.h: 458:     }
  6823  18E7  0022               	movlb	2	; select bank2
  6824  18E8  086F               	movf	_g_c_L_mult^(0+256),w
  6825  18E9  00CF               	movwf	??_sharp_ind^(0+256)
  6826  18EA  084F               	movf	??_sharp_ind^(0+256),w
  6827  18EB  07D9               	addwf	sharp_ind@l_sharp_ind_count^(0+256),f
  6828  18EC  2889               	goto	l8878
  6829  18ED                     l8880:
  6830                           
  6831                           ;./main.h: 459:     set_ind(g_c_ind);
  6832  18ED  0022               	movlb	2	; select bank2
  6833  18EE  083C               	movf	_g_c_ind^(0+256),w
  6834  18EF  31A2  22BA         	fcall	_set_ind
  6835  18F1  0008               	return
  6836  18F2                     __end_of_sharp_ind:
  6837                           
  6838                           	psect	text14
  6839  273B                     __ptext14:	
  6840 ;; *************** function _sharp_cap *****************
  6841 ;; Defined at:
  6842 ;;		line 377 in file "./main.h"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;  l_sharp_cap_    2   10[BANK2 ] int 
  6847 ;;  l_sharp_cap_    1   12[BANK2 ] unsigned char 
  6848 ;;  l_sharp_cap_    1    9[BANK2 ] unsigned char 
  6849 ;;  l_sharp_cap_    1    8[BANK2 ] unsigned char 
  6850 ;;  l_sharp_cap_    1    7[BANK2 ] unsigned char 
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/2
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Temps:          0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Totals:         0       0       0      11       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;Total ram usage:       11 bytes
  6865 ;; Hardware stack levels used: 1
  6866 ;; Hardware stack levels required when called: 9
  6867 ;; This function calls:
  6868 ;;		_Delay_ms
  6869 ;;		___bmul
  6870 ;;		_get_swr
  6871 ;;		_set_cap
  6872 ;; This function is called by:
  6873 ;;		_sub_tune
  6874 ;;		_tune
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878  273B                     _sharp_cap:	
  6879                           ;psect for function _sharp_cap
  6880                           
  6881                           
  6882                           ;./main.h: 378:     char l_sharp_cap_range, l_sharp_cap_count, l_sharp_cap_max_range, l_
      +                          sharp_cap_min_range;;./main.h: 379:     int l_sharp_cap_min_SWR;;./main.h: 380:     l_sh
      +                          arp_cap_range = g_c_step_cap * g_c_C_mult;
  6883                           
  6884                           ;incstack = 0
  6885                           ; Regs used in _sharp_cap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6886  273B  0022               	movlb	2	; select bank2
  6887  273C  086E               	movf	_g_c_C_mult^(0+256),w
  6888  273D  00CF               	movwf	??_sharp_cap^(0+256)
  6889  273E  084F               	movf	??_sharp_cap^(0+256),w
  6890  273F  00F3               	movwf	___bmul@multiplicand
  6891  2740  083A               	movf	_g_c_step_cap^(0+256),w
  6892  2741  31AC  249D  31A7   	fcall	___bmul
  6893  2744  0022               	movlb	2	; select bank2
  6894  2745  00D0               	movwf	(??_sharp_cap+1)^(0+256)
  6895  2746  0850               	movf	(??_sharp_cap+1)^(0+256),w
  6896  2747  00D6               	movwf	sharp_cap@l_sharp_cap_range^(0+256)
  6897                           
  6898                           ;./main.h: 382:     l_sharp_cap_max_range = g_c_cap + l_sharp_cap_range;
  6899  2748  087A               	movf	_g_c_cap,w
  6900  2749  0756               	addwf	sharp_cap@l_sharp_cap_range^(0+256),w
  6901  274A  00CF               	movwf	??_sharp_cap^(0+256)
  6902  274B  084F               	movf	??_sharp_cap^(0+256),w
  6903  274C  00D4               	movwf	sharp_cap@l_sharp_cap_max_range^(0+256)
  6904                           
  6905                           ;./main.h: 383:     if (l_sharp_cap_max_range > 32 * g_c_C_mult - 1)
  6906  274D  086E               	movf	_g_c_C_mult^(0+256),w
  6907  274E  00CF               	movwf	??_sharp_cap^(0+256)
  6908  274F  01D0               	clrf	(??_sharp_cap^(0+256)+1)
  6909  2750  3005               	movlw	5
  6910  2751                     u13465:
  6911  2751  35CF               	lslf	??_sharp_cap^(0+256),f
  6912  2752  0DD0               	rlf	(??_sharp_cap^(0+256)+1),f
  6913  2753  0B89               	decfsz	9,f
  6914  2754  2F51               	goto	u13465
  6915  2755  084F               	movf	??_sharp_cap^(0+256),w
  6916  2756  3EFF               	addlw	255
  6917  2757  00D1               	movwf	(??_sharp_cap+2)^(0+256)
  6918  2758  30FF               	movlw	255
  6919  2759  3D50               	addwfc	(??_sharp_cap+1)^(0+256),w
  6920  275A  00D2               	movwf	(??_sharp_cap+3)^(0+256)
  6921  275B  0852               	movf	(??_sharp_cap+3)^(0+256),w
  6922  275C  3A80               	xorlw	128
  6923  275D  00D3               	movwf	(??_sharp_cap+4)^(0+256)
  6924  275E  3080               	movlw	128
  6925  275F  0253               	subwf	(??_sharp_cap+4)^(0+256),w
  6926  2760  1D03               	skipz
  6927  2761  2F64               	goto	u13475
  6928  2762  0854               	movf	sharp_cap@l_sharp_cap_max_range^(0+256),w
  6929  2763  0251               	subwf	(??_sharp_cap+2)^(0+256),w
  6930  2764                     u13475:
  6931  2764  1803               	skipnc
  6932  2765  2F73               	goto	l8768
  6933                           
  6934                           ;./main.h: 384:         l_sharp_cap_max_range = 32 * g_c_C_mult - 1;
  6935  2766  0022               	movlb	2	; select bank2
  6936  2767  086E               	movf	_g_c_C_mult^(0+256),w
  6937  2768  00CF               	movwf	??_sharp_cap^(0+256)
  6938  2769  3004               	movlw	4
  6939  276A                     u13485:
  6940  276A  35CF               	lslf	??_sharp_cap^(0+256),f
  6941  276B  3EFF               	addlw	-1
  6942  276C  1D03               	skipz
  6943  276D  2F6A               	goto	u13485
  6944  276E  354F               	lslf	??_sharp_cap^(0+256),w
  6945  276F  3EFF               	addlw	255
  6946  2770  00D0               	movwf	(??_sharp_cap+1)^(0+256)
  6947  2771  0850               	movf	(??_sharp_cap+1)^(0+256),w
  6948  2772  00D4               	movwf	sharp_cap@l_sharp_cap_max_range^(0+256)
  6949  2773                     l8768:
  6950                           
  6951                           ;./main.h: 385:     if (g_c_cap > l_sharp_cap_range)
  6952  2773  087A               	movf	_g_c_cap,w
  6953  2774  0022               	movlb	2	; select bank2
  6954  2775  0256               	subwf	sharp_cap@l_sharp_cap_range^(0+256),w
  6955  2776  1803               	skipnc
  6956  2777  2F7E               	goto	l8772
  6957                           
  6958                           ;./main.h: 386:         l_sharp_cap_min_range = g_c_cap - l_sharp_cap_range;
  6959  2778  0856               	movf	sharp_cap@l_sharp_cap_range^(0+256),w
  6960  2779  027A               	subwf	_g_c_cap,w
  6961  277A  00CF               	movwf	??_sharp_cap^(0+256)
  6962  277B  084F               	movf	??_sharp_cap^(0+256),w
  6963  277C  00D5               	movwf	sharp_cap@l_sharp_cap_min_range^(0+256)
  6964  277D  2F7F               	goto	l8774
  6965  277E                     l8772:
  6966                           
  6967                           ;./main.h: 388:         l_sharp_cap_min_range = 0;
  6968  277E  01D5               	clrf	sharp_cap@l_sharp_cap_min_range^(0+256)
  6969  277F                     l8774:
  6970                           
  6971                           ;./main.h: 389:     g_c_cap = l_sharp_cap_min_range;
  6972  277F  0855               	movf	sharp_cap@l_sharp_cap_min_range^(0+256),w
  6973  2780  00CF               	movwf	??_sharp_cap^(0+256)
  6974  2781  084F               	movf	??_sharp_cap^(0+256),w
  6975  2782  00FA               	movwf	_g_c_cap
  6976                           
  6977                           ;./main.h: 390:     set_cap(g_c_cap);
  6978  2783  087A               	movf	_g_c_cap,w
  6979  2784  31AE  2636  31A7   	fcall	_set_cap
  6980                           
  6981                           ;./main.h: 391:     get_swr();
  6982  2787  3198  20F2  31A7   	fcall	_get_swr
  6983                           
  6984                           ;./main.h: 392:     if (g_i_SWR == 0)
  6985  278A  0878               	movf	_g_i_SWR,w
  6986  278B  0479               	iorwf	_g_i_SWR+1,w
  6987  278C  1903               	btfsc	3,2
  6988  278D  0008               	return
  6989                           
  6990                           ;./main.h: 394:     l_sharp_cap_min_SWR = g_i_SWR;
  6991  278E  0879               	movf	_g_i_SWR+1,w
  6992  278F  0022               	movlb	2	; select bank2
  6993  2790  00D8               	movwf	(sharp_cap@l_sharp_cap_min_SWR+1)^(0+256)
  6994  2791  0878               	movf	_g_i_SWR,w
  6995  2792  00D7               	movwf	sharp_cap@l_sharp_cap_min_SWR^(0+256)
  6996                           
  6997                           ;./main.h: 395:     for (l_sharp_cap_count = l_sharp_cap_min_range + g_c_C_mult; l_sharp
      +                          _cap_count <= l_sharp_cap_max_range; l_sharp_cap_count += g_c_C_mult) {
  6998  2793  0855               	movf	sharp_cap@l_sharp_cap_min_range^(0+256),w
  6999  2794  076E               	addwf	_g_c_C_mult^(0+256),w
  7000  2795  00CF               	movwf	??_sharp_cap^(0+256)
  7001  2796  084F               	movf	??_sharp_cap^(0+256),w
  7002  2797  00D9               	movwf	sharp_cap@l_sharp_cap_count^(0+256)
  7003  2798                     l8816:
  7004  2798  0859               	movf	sharp_cap@l_sharp_cap_count^(0+256),w
  7005  2799  0254               	subwf	sharp_cap@l_sharp_cap_max_range^(0+256),w
  7006  279A  1C03               	btfss	3,0
  7007  279B  2FFC               	goto	l8818
  7008                           
  7009                           ;./main.h: 396:         set_cap(l_sharp_cap_count);
  7010  279C  0859               	movf	sharp_cap@l_sharp_cap_count^(0+256),w
  7011  279D  31AE  2636  31A7   	fcall	_set_cap
  7012                           
  7013                           ;./main.h: 397:         get_swr();
  7014  27A0  3198  20F2  31A7   	fcall	_get_swr
  7015                           
  7016                           ;./main.h: 398:         if (g_i_SWR == 0)
  7017  27A3  0878               	movf	_g_i_SWR,w
  7018  27A4  0479               	iorwf	_g_i_SWR+1,w
  7019  27A5  1903               	btfsc	3,2
  7020  27A6  0008               	return
  7021                           
  7022                           ;./main.h: 400:         if (g_i_SWR >= l_sharp_cap_min_SWR) {
  7023  27A7  0879               	movf	_g_i_SWR+1,w
  7024  27A8  3A80               	xorlw	128
  7025  27A9  0022               	movlb	2	; select bank2
  7026  27AA  00CF               	movwf	??_sharp_cap^(0+256)
  7027  27AB  0858               	movf	(sharp_cap@l_sharp_cap_min_SWR+1)^(0+256),w
  7028  27AC  3A80               	xorlw	128
  7029  27AD  024F               	subwf	??_sharp_cap^(0+256),w
  7030  27AE  1D03               	skipz
  7031  27AF  2FB2               	goto	u13525
  7032  27B0  0857               	movf	sharp_cap@l_sharp_cap_min_SWR^(0+256),w
  7033  27B1  0278               	subwf	_g_i_SWR,w
  7034  27B2                     u13525:
  7035  27B2  1C03               	skipc
  7036  27B3  2FBE               	goto	l8802
  7037                           
  7038                           ;./main.h: 401:             Delay_ms(10);
  7039  27B4  300A               	movlw	10
  7040  27B5  00F3               	movwf	Delay_ms@time_in_ms
  7041  27B6  3000               	movlw	0
  7042  27B7  00F4               	movwf	Delay_ms@time_in_ms+1
  7043  27B8  31AC  24FE  31A7   	fcall	_Delay_ms
  7044                           
  7045                           ;./main.h: 402:             get_swr();
  7046  27BB  3198  20F2  31A7   	fcall	_get_swr
  7047  27BE                     l8802:
  7048                           
  7049                           ;./main.h: 404:         if (g_i_SWR >= l_sharp_cap_min_SWR) {
  7050  27BE  0879               	movf	_g_i_SWR+1,w
  7051  27BF  3A80               	xorlw	128
  7052  27C0  0022               	movlb	2	; select bank2
  7053  27C1  00CF               	movwf	??_sharp_cap^(0+256)
  7054  27C2  0858               	movf	(sharp_cap@l_sharp_cap_min_SWR+1)^(0+256),w
  7055  27C3  3A80               	xorlw	128
  7056  27C4  024F               	subwf	??_sharp_cap^(0+256),w
  7057  27C5  1D03               	skipz
  7058  27C6  2FC9               	goto	u13535
  7059  27C7  0857               	movf	sharp_cap@l_sharp_cap_min_SWR^(0+256),w
  7060  27C8  0278               	subwf	_g_i_SWR,w
  7061  27C9                     u13535:
  7062  27C9  1C03               	skipc
  7063  27CA  2FD5               	goto	l8808
  7064                           
  7065                           ;./main.h: 405:             Delay_ms(10);
  7066  27CB  300A               	movlw	10
  7067  27CC  00F3               	movwf	Delay_ms@time_in_ms
  7068  27CD  3000               	movlw	0
  7069  27CE  00F4               	movwf	Delay_ms@time_in_ms+1
  7070  27CF  31AC  24FE  31A7   	fcall	_Delay_ms
  7071                           
  7072                           ;./main.h: 406:             get_swr();
  7073  27D2  3198  20F2  31A7   	fcall	_get_swr
  7074  27D5                     l8808:
  7075                           
  7076                           ;./main.h: 408:         if (g_i_SWR < l_sharp_cap_min_SWR) {
  7077  27D5  0879               	movf	_g_i_SWR+1,w
  7078  27D6  3A80               	xorlw	128
  7079  27D7  0022               	movlb	2	; select bank2
  7080  27D8  00CF               	movwf	??_sharp_cap^(0+256)
  7081  27D9  0858               	movf	(sharp_cap@l_sharp_cap_min_SWR+1)^(0+256),w
  7082  27DA  3A80               	xorlw	128
  7083  27DB  024F               	subwf	??_sharp_cap^(0+256),w
  7084  27DC  1D03               	skipz
  7085  27DD  2FE0               	goto	u13545
  7086  27DE  0857               	movf	sharp_cap@l_sharp_cap_min_SWR^(0+256),w
  7087  27DF  0278               	subwf	_g_i_SWR,w
  7088  27E0                     u13545:
  7089  27E0  1803               	skipnc
  7090  27E1  2FFC               	goto	l8818
  7091                           
  7092                           ;./main.h: 409:             l_sharp_cap_min_SWR = g_i_SWR;
  7093  27E2  0879               	movf	_g_i_SWR+1,w
  7094  27E3  0022               	movlb	2	; select bank2
  7095  27E4  00D8               	movwf	(sharp_cap@l_sharp_cap_min_SWR+1)^(0+256)
  7096  27E5  0878               	movf	_g_i_SWR,w
  7097  27E6  00D7               	movwf	sharp_cap@l_sharp_cap_min_SWR^(0+256)
  7098                           
  7099                           ;./main.h: 410:             g_c_cap = l_sharp_cap_count;
  7100  27E7  0859               	movf	sharp_cap@l_sharp_cap_count^(0+256),w
  7101  27E8  00CF               	movwf	??_sharp_cap^(0+256)
  7102  27E9  084F               	movf	??_sharp_cap^(0+256),w
  7103  27EA  00FA               	movwf	_g_c_cap
  7104                           
  7105                           ;./main.h: 411:             if (g_i_SWR < 120)
  7106  27EB  0879               	movf	_g_i_SWR+1,w
  7107  27EC  3A80               	xorlw	128
  7108  27ED  00CF               	movwf	??_sharp_cap^(0+256)
  7109  27EE  3080               	movlw	128
  7110  27EF  024F               	subwf	??_sharp_cap^(0+256),w
  7111  27F0  1D03               	skipz
  7112  27F1  2FF4               	goto	u13555
  7113  27F2  3078               	movlw	120
  7114  27F3  0278               	subwf	_g_i_SWR,w
  7115  27F4                     u13555:
  7116  27F4  1C03               	btfss	3,0
  7117  27F5  2FFC               	goto	l8818
  7118                           
  7119                           ;./main.h: 415:     }
  7120  27F6  0022               	movlb	2	; select bank2
  7121  27F7  086E               	movf	_g_c_C_mult^(0+256),w
  7122  27F8  00CF               	movwf	??_sharp_cap^(0+256)
  7123  27F9  084F               	movf	??_sharp_cap^(0+256),w
  7124  27FA  07D9               	addwf	sharp_cap@l_sharp_cap_count^(0+256),f
  7125  27FB  2F98               	goto	l8816
  7126  27FC                     l8818:
  7127                           
  7128                           ;./main.h: 416:     set_cap(g_c_cap);
  7129  27FC  087A               	movf	_g_c_cap,w
  7130  27FD  31AE  2636         	fcall	_set_cap
  7131  27FF  0008               	return
  7132  2800                     __end_of_sharp_cap:
  7133                           
  7134                           	psect	text15
  7135  25D1                     __ptext15:	
  7136 ;; *************** function _coarse_tune *****************
  7137 ;; Defined at:
  7138 ;;		line 335 in file "./main.h"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  l_coarse_tun    2   10[BANK2 ] int 
  7143 ;;  l_coarse_tun    1   15[BANK2 ] unsigned char 
  7144 ;;  l_coarse_tun    1   14[BANK2 ] unsigned char 
  7145 ;;  l_coarse_tun    1   13[BANK2 ] unsigned char 
  7146 ;;  l_coarse_tun    1   12[BANK2 ] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/2
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7157 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  7158 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  7159 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0
  7160 ;;Total ram usage:        8 bytes
  7161 ;; Hardware stack levels used: 1
  7162 ;; Hardware stack levels required when called: 10
  7163 ;; This function calls:
  7164 ;;		_Delay_ms
  7165 ;;		___awdiv
  7166 ;;		___bmul
  7167 ;;		_coarse_cap
  7168 ;;		_get_swr
  7169 ;;		_set_cap
  7170 ;;		_set_ind
  7171 ;; This function is called by:
  7172 ;;		_sub_tune
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176  25D1                     _coarse_tune:	
  7177                           ;psect for function _coarse_tune
  7178                           
  7179                           
  7180                           ;./main.h: 336:     char l_coarse_tune_step = 3;
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _coarse_tune: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7184  25D1  3003               	movlw	3
  7185  25D2  0022               	movlb	2	; select bank2
  7186  25D3  00D5               	movwf	??_coarse_tune^(0+256)
  7187  25D4  0855               	movf	??_coarse_tune^(0+256),w
  7188  25D5  00DB               	movwf	coarse_tune@l_coarse_tune_step^(0+256)
  7189                           
  7190                           ;./main.h: 337:     char l_coarse_tune_count;;./main.h: 338:     char l_coarse_tune_mem_
      +                          cap, l_coarse_tune_mem_step_cap;;./main.h: 339:     int l_coarse_tune_min_swr;;./main.h:
      +                           341:     l_coarse_tune_mem_cap = 0;
  7191  25D6  01D9               	clrf	coarse_tune@l_coarse_tune_mem_cap^(0+256)
  7192                           
  7193                           ;./main.h: 342:     g_c_step_ind = l_coarse_tune_step;
  7194  25D7  3003               	movlw	3
  7195  25D8  00D5               	movwf	??_coarse_tune^(0+256)
  7196  25D9  0855               	movf	??_coarse_tune^(0+256),w
  7197  25DA  00B9               	movwf	_g_c_step_ind^(0+256)
  7198                           
  7199                           ;./main.h: 343:     l_coarse_tune_mem_step_cap = 3;
  7200  25DB  3003               	movlw	3
  7201  25DC  00D5               	movwf	??_coarse_tune^(0+256)
  7202  25DD  0855               	movf	??_coarse_tune^(0+256),w
  7203  25DE  00DA               	movwf	coarse_tune@l_coarse_tune_mem_step_cap^(0+256)
  7204                           
  7205                           ;./main.h: 344:     l_coarse_tune_min_swr = g_i_SWR + g_i_SWR / 20;
  7206  25DF  3014               	movlw	20
  7207  25E0  00F3               	movwf	___awdiv@divisor
  7208  25E1  3000               	movlw	0
  7209  25E2  00F4               	movwf	___awdiv@divisor+1
  7210  25E3  0879               	movf	_g_i_SWR+1,w
  7211  25E4  00F6               	movwf	___awdiv@dividend+1
  7212  25E5  0878               	movf	_g_i_SWR,w
  7213  25E6  00F5               	movwf	___awdiv@dividend
  7214  25E7  31AF  27AE  31A5   	fcall	___awdiv
  7215  25EA  0878               	movf	_g_i_SWR,w
  7216  25EB  0773               	addwf	?___awdiv,w
  7217  25EC  0022               	movlb	2	; select bank2
  7218  25ED  00D7               	movwf	coarse_tune@l_coarse_tune_min_swr^(0+256)
  7219  25EE  0879               	movf	_g_i_SWR+1,w
  7220  25EF  3D74               	addwfc	?___awdiv+1,w
  7221  25F0  00D8               	movwf	(coarse_tune@l_coarse_tune_min_swr+1)^(0+256)
  7222                           
  7223                           ;./main.h: 345:     for (l_coarse_tune_count = 0; l_coarse_tune_count <= 31;) {
  7224  25F1  01DC               	clrf	coarse_tune@l_coarse_tune_count^(0+256)
  7225  25F2                     l8712:
  7226                           
  7227                           ;./main.h: 346:         set_ind(l_coarse_tune_count * g_c_L_mult);
  7228  25F2  086F               	movf	_g_c_L_mult^(0+256),w
  7229  25F3  00D5               	movwf	??_coarse_tune^(0+256)
  7230  25F4  0855               	movf	??_coarse_tune^(0+256),w
  7231  25F5  00F3               	movwf	___bmul@multiplicand
  7232  25F6  085C               	movf	coarse_tune@l_coarse_tune_count^(0+256),w
  7233  25F7  31AC  249D  31A5   	fcall	___bmul
  7234  25FA  31A2  22BA  31A5   	fcall	_set_ind
  7235                           
  7236                           ;./main.h: 347:         coarse_cap();
  7237  25FD  31A3  23E4  31A5   	fcall	_coarse_cap
  7238                           
  7239                           ;./main.h: 348:         get_swr();
  7240  2600  3198  20F2  31A5   	fcall	_get_swr
  7241                           
  7242                           ;./main.h: 349:         if (g_i_SWR == 0)
  7243  2603  0878               	movf	_g_i_SWR,w
  7244  2604  0479               	iorwf	_g_i_SWR+1,w
  7245  2605  1903               	btfsc	3,2
  7246  2606  0008               	return
  7247                           
  7248                           ;./main.h: 351:         if (g_i_SWR < l_coarse_tune_min_swr) {
  7249  2607  0879               	movf	_g_i_SWR+1,w
  7250  2608  3A80               	xorlw	128
  7251  2609  0022               	movlb	2	; select bank2
  7252  260A  00D5               	movwf	??_coarse_tune^(0+256)
  7253  260B  0858               	movf	(coarse_tune@l_coarse_tune_min_swr+1)^(0+256),w
  7254  260C  3A80               	xorlw	128
  7255  260D  0255               	subwf	??_coarse_tune^(0+256),w
  7256  260E  1D03               	skipz
  7257  260F  2E12               	goto	u13395
  7258  2610  0857               	movf	coarse_tune@l_coarse_tune_min_swr^(0+256),w
  7259  2611  0278               	subwf	_g_i_SWR,w
  7260  2612                     u13395:
  7261  2612  1803               	skipnc
  7262  2613  2E6D               	goto	l8750
  7263                           
  7264                           ;./main.h: 352:             l_coarse_tune_min_swr = g_i_SWR + g_i_SWR / 20;
  7265  2614  3014               	movlw	20
  7266  2615  00F3               	movwf	___awdiv@divisor
  7267  2616  3000               	movlw	0
  7268  2617  00F4               	movwf	___awdiv@divisor+1
  7269  2618  0879               	movf	_g_i_SWR+1,w
  7270  2619  00F6               	movwf	___awdiv@dividend+1
  7271  261A  0878               	movf	_g_i_SWR,w
  7272  261B  00F5               	movwf	___awdiv@dividend
  7273  261C  31AF  27AE  31A5   	fcall	___awdiv
  7274  261F  0878               	movf	_g_i_SWR,w
  7275  2620  0773               	addwf	?___awdiv,w
  7276  2621  0022               	movlb	2	; select bank2
  7277  2622  00D7               	movwf	coarse_tune@l_coarse_tune_min_swr^(0+256)
  7278  2623  0879               	movf	_g_i_SWR+1,w
  7279  2624  3D74               	addwfc	?___awdiv+1,w
  7280  2625  00D8               	movwf	(coarse_tune@l_coarse_tune_min_swr+1)^(0+256)
  7281                           
  7282                           ;./main.h: 353:             g_c_ind = l_coarse_tune_count * g_c_L_mult;
  7283  2626  086F               	movf	_g_c_L_mult^(0+256),w
  7284  2627  00D5               	movwf	??_coarse_tune^(0+256)
  7285  2628  0855               	movf	??_coarse_tune^(0+256),w
  7286  2629  00F3               	movwf	___bmul@multiplicand
  7287  262A  085C               	movf	coarse_tune@l_coarse_tune_count^(0+256),w
  7288  262B  31AC  249D  31A5   	fcall	___bmul
  7289  262E  0022               	movlb	2	; select bank2
  7290  262F  00D6               	movwf	(??_coarse_tune+1)^(0+256)
  7291  2630  0856               	movf	(??_coarse_tune+1)^(0+256),w
  7292  2631  00BC               	movwf	_g_c_ind^(0+256)
  7293                           
  7294                           ;./main.h: 354:             l_coarse_tune_mem_cap = g_c_cap;
  7295  2632  087A               	movf	_g_c_cap,w
  7296  2633  00D5               	movwf	??_coarse_tune^(0+256)
  7297  2634  0855               	movf	??_coarse_tune^(0+256),w
  7298  2635  00D9               	movwf	coarse_tune@l_coarse_tune_mem_cap^(0+256)
  7299                           
  7300                           ;./main.h: 355:             g_c_step_ind = l_coarse_tune_step;
  7301  2636  085B               	movf	coarse_tune@l_coarse_tune_step^(0+256),w
  7302  2637  00D5               	movwf	??_coarse_tune^(0+256)
  7303  2638  0855               	movf	??_coarse_tune^(0+256),w
  7304  2639  00B9               	movwf	_g_c_step_ind^(0+256)
  7305                           
  7306                           ;./main.h: 356:             l_coarse_tune_mem_step_cap = g_c_step_cap;
  7307  263A  083A               	movf	_g_c_step_cap^(0+256),w
  7308  263B  00D5               	movwf	??_coarse_tune^(0+256)
  7309  263C  0855               	movf	??_coarse_tune^(0+256),w
  7310  263D  00DA               	movwf	coarse_tune@l_coarse_tune_mem_step_cap^(0+256)
  7311                           
  7312                           ;./main.h: 357:             if (g_i_SWR < 120)
  7313  263E  0879               	movf	_g_i_SWR+1,w
  7314  263F  3A80               	xorlw	128
  7315  2640  00D5               	movwf	??_coarse_tune^(0+256)
  7316  2641  3080               	movlw	128
  7317  2642  0255               	subwf	??_coarse_tune^(0+256),w
  7318  2643  1D03               	skipz
  7319  2644  2E47               	goto	u13405
  7320  2645  3078               	movlw	120
  7321  2646  0278               	subwf	_g_i_SWR,w
  7322  2647                     u13405:
  7323  2647  1C03               	btfss	3,0
  7324  2648  2E6D               	goto	l8750
  7325                           
  7326                           ;./main.h: 359:             l_coarse_tune_count += l_coarse_tune_step;
  7327  2649  0022               	movlb	2	; select bank2
  7328  264A  085B               	movf	coarse_tune@l_coarse_tune_step^(0+256),w
  7329  264B  00D5               	movwf	??_coarse_tune^(0+256)
  7330  264C  0855               	movf	??_coarse_tune^(0+256),w
  7331  264D  07DC               	addwf	coarse_tune@l_coarse_tune_count^(0+256),f
  7332                           
  7333                           ;./main.h: 360:             if (e_c_b_L_linear == 0 & l_coarse_tune_count == 9)
  7334  264E  0835               	movf	_e_c_b_L_linear^(0+256),w
  7335  264F  1D03               	btfss	3,2
  7336  2650  2E5A               	goto	l8742
  7337  2651  3009               	movlw	9
  7338  2652  065C               	xorwf	coarse_tune@l_coarse_tune_count^(0+256),w
  7339  2653  1D03               	btfss	3,2
  7340  2654  2E5A               	goto	l8742
  7341                           
  7342                           ;./main.h: 361:                 l_coarse_tune_count = 8;
  7343  2655  3008               	movlw	8
  7344  2656  00D5               	movwf	??_coarse_tune^(0+256)
  7345  2657  0855               	movf	??_coarse_tune^(0+256),w
  7346  2658  00DC               	movwf	coarse_tune@l_coarse_tune_count^(0+256)
  7347  2659  2E69               	goto	l8748
  7348  265A                     l8742:
  7349  265A  0835               	movf	_e_c_b_L_linear^(0+256),w
  7350  265B  1D03               	btfss	3,2
  7351  265C  2E69               	goto	l8748
  7352  265D  3011               	movlw	17
  7353  265E  065C               	xorwf	coarse_tune@l_coarse_tune_count^(0+256),w
  7354  265F  1D03               	btfss	3,2
  7355  2660  2E69               	goto	l8748
  7356                           
  7357                           ;./main.h: 363:                 l_coarse_tune_count = 16;
  7358  2661  3010               	movlw	16
  7359  2662  00D5               	movwf	??_coarse_tune^(0+256)
  7360  2663  0855               	movf	??_coarse_tune^(0+256),w
  7361  2664  00DC               	movwf	coarse_tune@l_coarse_tune_count^(0+256)
  7362                           
  7363                           ;./main.h: 364:                 l_coarse_tune_step = 4;
  7364  2665  3004               	movlw	4
  7365  2666  00D5               	movwf	??_coarse_tune^(0+256)
  7366  2667  0855               	movf	??_coarse_tune^(0+256),w
  7367  2668  00DB               	movwf	coarse_tune@l_coarse_tune_step^(0+256)
  7368  2669                     l8748:
  7369                           
  7370                           ;./main.h: 368:     }
  7371  2669  3020               	movlw	32
  7372  266A  025C               	subwf	coarse_tune@l_coarse_tune_count^(0+256),w
  7373  266B  1C03               	skipc
  7374  266C  2DF2               	goto	l8712
  7375  266D                     l8750:
  7376                           
  7377                           ;./main.h: 369:     g_c_cap = l_coarse_tune_mem_cap;
  7378  266D  0022               	movlb	2	; select bank2
  7379  266E  0859               	movf	coarse_tune@l_coarse_tune_mem_cap^(0+256),w
  7380  266F  00D5               	movwf	??_coarse_tune^(0+256)
  7381  2670  0855               	movf	??_coarse_tune^(0+256),w
  7382  2671  00FA               	movwf	_g_c_cap
  7383                           
  7384                           ;./main.h: 370:     set_ind(g_c_ind);
  7385  2672  083C               	movf	_g_c_ind^(0+256),w
  7386  2673  31A2  22BA  31A5   	fcall	_set_ind
  7387                           
  7388                           ;./main.h: 371:     set_cap(g_c_cap);
  7389  2676  087A               	movf	_g_c_cap,w
  7390  2677  31AE  2636  31A5   	fcall	_set_cap
  7391                           
  7392                           ;./main.h: 372:     g_c_step_cap = l_coarse_tune_mem_step_cap;
  7393  267A  0022               	movlb	2	; select bank2
  7394  267B  085A               	movf	coarse_tune@l_coarse_tune_mem_step_cap^(0+256),w
  7395  267C  00D5               	movwf	??_coarse_tune^(0+256)
  7396  267D  0855               	movf	??_coarse_tune^(0+256),w
  7397  267E  00BA               	movwf	_g_c_step_cap^(0+256)
  7398                           
  7399                           ;./main.h: 373:     Delay_ms(10);
  7400  267F  300A               	movlw	10
  7401  2680  00F3               	movwf	Delay_ms@time_in_ms
  7402  2681  3000               	movlw	0
  7403  2682  00F4               	movwf	Delay_ms@time_in_ms+1
  7404  2683  31AC  24FE         	fcall	_Delay_ms
  7405  2685  0008               	return
  7406  2686                     __end_of_coarse_tune:
  7407                           
  7408                           	psect	text16
  7409  23E4                     __ptext16:	
  7410 ;; *************** function _coarse_cap *****************
  7411 ;; Defined at:
  7412 ;;		line 298 in file "./main.h"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;  l_coarse_cap    2    4[BANK2 ] int 
  7417 ;;  l_coarse_cap    1    7[BANK2 ] unsigned char 
  7418 ;;  l_coarse_cap    1    6[BANK2 ] unsigned char 
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 0/2
  7425 ;;		On exit  : 0/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  7430 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  7431 ;;      Totals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0
  7432 ;;Total ram usage:        6 bytes
  7433 ;; Hardware stack levels used: 1
  7434 ;; Hardware stack levels required when called: 9
  7435 ;; This function calls:
  7436 ;;		___awdiv
  7437 ;;		___bmul
  7438 ;;		_get_swr
  7439 ;;		_set_cap
  7440 ;; This function is called by:
  7441 ;;		_coarse_tune
  7442 ;; This function uses a non-reentrant model
  7443 ;;
  7444                           
  7445  23E4                     _coarse_cap:	
  7446                           ;psect for function _coarse_cap
  7447                           
  7448                           
  7449                           ;./main.h: 299:     char l_coarse_cap_step = 3;
  7450                           
  7451                           ;incstack = 0
  7452                           ; Regs used in _coarse_cap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7453  23E4  3003               	movlw	3
  7454  23E5  0022               	movlb	2	; select bank2
  7455  23E6  00CF               	movwf	??_coarse_cap^(0+256)
  7456  23E7  084F               	movf	??_coarse_cap^(0+256),w
  7457  23E8  00D3               	movwf	coarse_cap@l_coarse_cap_step^(0+256)
  7458                           
  7459                           ;./main.h: 300:     char l_coarse_cap_count;;./main.h: 301:     int l_coarse_cap_min_swr
      +                          ;;./main.h: 303:     g_c_cap = 0;
  7460  23E9  01FA               	clrf	_g_c_cap
  7461                           
  7462                           ;./main.h: 304:     set_cap(g_c_cap);
  7463  23EA  087A               	movf	_g_c_cap,w
  7464  23EB  31AE  2636  31A3   	fcall	_set_cap
  7465                           
  7466                           ;./main.h: 305:     g_c_step_cap = l_coarse_cap_step;
  7467  23EE  3003               	movlw	3
  7468  23EF  0022               	movlb	2	; select bank2
  7469  23F0  00CF               	movwf	??_coarse_cap^(0+256)
  7470  23F1  084F               	movf	??_coarse_cap^(0+256),w
  7471  23F2  00BA               	movwf	_g_c_step_cap^(0+256)
  7472                           
  7473                           ;./main.h: 306:     get_swr();
  7474  23F3  3198  20F2  31A3   	fcall	_get_swr
  7475                           
  7476                           ;./main.h: 307:     if (g_i_SWR == 0)
  7477  23F6  0878               	movf	_g_i_SWR,w
  7478  23F7  0479               	iorwf	_g_i_SWR+1,w
  7479  23F8  1903               	btfsc	3,2
  7480  23F9  0008               	return
  7481                           
  7482                           ;./main.h: 309:     l_coarse_cap_min_swr = g_i_SWR + g_i_SWR / 20;
  7483  23FA  3014               	movlw	20
  7484  23FB  00F3               	movwf	___awdiv@divisor
  7485  23FC  3000               	movlw	0
  7486  23FD  00F4               	movwf	___awdiv@divisor+1
  7487  23FE  0879               	movf	_g_i_SWR+1,w
  7488  23FF  00F6               	movwf	___awdiv@dividend+1
  7489  2400  0878               	movf	_g_i_SWR,w
  7490  2401  00F5               	movwf	___awdiv@dividend
  7491  2402  31AF  27AE  31A3   	fcall	___awdiv
  7492  2405  0878               	movf	_g_i_SWR,w
  7493  2406  0773               	addwf	?___awdiv,w
  7494  2407  0022               	movlb	2	; select bank2
  7495  2408  00D1               	movwf	coarse_cap@l_coarse_cap_min_swr^(0+256)
  7496  2409  0879               	movf	_g_i_SWR+1,w
  7497  240A  3D74               	addwfc	?___awdiv+1,w
  7498  240B  00D2               	movwf	(coarse_cap@l_coarse_cap_min_swr+1)^(0+256)
  7499                           
  7500                           ;./main.h: 310:     for (l_coarse_cap_count = l_coarse_cap_step; l_coarse_cap_count <= 3
      +                          1;) {
  7501  240C  3003               	movlw	3
  7502  240D  00CF               	movwf	??_coarse_cap^(0+256)
  7503  240E  084F               	movf	??_coarse_cap^(0+256),w
  7504  240F  00D4               	movwf	coarse_cap@l_coarse_cap_count^(0+256)
  7505  2410                     l8660:
  7506                           
  7507                           ;./main.h: 311:         set_cap(l_coarse_cap_count * g_c_C_mult);
  7508  2410  086E               	movf	_g_c_C_mult^(0+256),w
  7509  2411  00CF               	movwf	??_coarse_cap^(0+256)
  7510  2412  084F               	movf	??_coarse_cap^(0+256),w
  7511  2413  00F3               	movwf	___bmul@multiplicand
  7512  2414  0854               	movf	coarse_cap@l_coarse_cap_count^(0+256),w
  7513  2415  31AC  249D  31A3   	fcall	___bmul
  7514  2418  31AE  2636  31A3   	fcall	_set_cap
  7515                           
  7516                           ;./main.h: 312:         get_swr();
  7517  241B  3198  20F2  31A3   	fcall	_get_swr
  7518                           
  7519                           ;./main.h: 313:         if (g_i_SWR == 0)
  7520  241E  0878               	movf	_g_i_SWR,w
  7521  241F  0479               	iorwf	_g_i_SWR+1,w
  7522  2420  1903               	btfsc	3,2
  7523  2421  0008               	return
  7524                           
  7525                           ;./main.h: 315:         if (g_i_SWR < l_coarse_cap_min_swr) {
  7526  2422  0879               	movf	_g_i_SWR+1,w
  7527  2423  3A80               	xorlw	128
  7528  2424  0022               	movlb	2	; select bank2
  7529  2425  00CF               	movwf	??_coarse_cap^(0+256)
  7530  2426  0852               	movf	(coarse_cap@l_coarse_cap_min_swr+1)^(0+256),w
  7531  2427  3A80               	xorlw	128
  7532  2428  024F               	subwf	??_coarse_cap^(0+256),w
  7533  2429  1D03               	skipz
  7534  242A  2C2D               	goto	u13315
  7535  242B  0851               	movf	coarse_cap@l_coarse_cap_min_swr^(0+256),w
  7536  242C  0278               	subwf	_g_i_SWR,w
  7537  242D                     u13315:
  7538  242D  1803               	skipnc
  7539  242E  2C80               	goto	l8692
  7540                           
  7541                           ;./main.h: 316:             l_coarse_cap_min_swr = g_i_SWR + g_i_SWR / 20;
  7542  242F  3014               	movlw	20
  7543  2430  00F3               	movwf	___awdiv@divisor
  7544  2431  3000               	movlw	0
  7545  2432  00F4               	movwf	___awdiv@divisor+1
  7546  2433  0879               	movf	_g_i_SWR+1,w
  7547  2434  00F6               	movwf	___awdiv@dividend+1
  7548  2435  0878               	movf	_g_i_SWR,w
  7549  2436  00F5               	movwf	___awdiv@dividend
  7550  2437  31AF  27AE  31A3   	fcall	___awdiv
  7551  243A  0878               	movf	_g_i_SWR,w
  7552  243B  0773               	addwf	?___awdiv,w
  7553  243C  0022               	movlb	2	; select bank2
  7554  243D  00D1               	movwf	coarse_cap@l_coarse_cap_min_swr^(0+256)
  7555  243E  0879               	movf	_g_i_SWR+1,w
  7556  243F  3D74               	addwfc	?___awdiv+1,w
  7557  2440  00D2               	movwf	(coarse_cap@l_coarse_cap_min_swr+1)^(0+256)
  7558                           
  7559                           ;./main.h: 317:             g_c_cap = l_coarse_cap_count * g_c_C_mult;
  7560  2441  086E               	movf	_g_c_C_mult^(0+256),w
  7561  2442  00CF               	movwf	??_coarse_cap^(0+256)
  7562  2443  084F               	movf	??_coarse_cap^(0+256),w
  7563  2444  00F3               	movwf	___bmul@multiplicand
  7564  2445  0854               	movf	coarse_cap@l_coarse_cap_count^(0+256),w
  7565  2446  31AC  249D  31A3   	fcall	___bmul
  7566  2449  0022               	movlb	2	; select bank2
  7567  244A  00D0               	movwf	(??_coarse_cap+1)^(0+256)
  7568  244B  0850               	movf	(??_coarse_cap+1)^(0+256),w
  7569  244C  00FA               	movwf	_g_c_cap
  7570                           
  7571                           ;./main.h: 318:             g_c_step_cap = l_coarse_cap_step;
  7572  244D  0853               	movf	coarse_cap@l_coarse_cap_step^(0+256),w
  7573  244E  00CF               	movwf	??_coarse_cap^(0+256)
  7574  244F  084F               	movf	??_coarse_cap^(0+256),w
  7575  2450  00BA               	movwf	_g_c_step_cap^(0+256)
  7576                           
  7577                           ;./main.h: 319:             if (g_i_SWR < 120)
  7578  2451  0879               	movf	_g_i_SWR+1,w
  7579  2452  3A80               	xorlw	128
  7580  2453  00CF               	movwf	??_coarse_cap^(0+256)
  7581  2454  3080               	movlw	128
  7582  2455  024F               	subwf	??_coarse_cap^(0+256),w
  7583  2456  1D03               	skipz
  7584  2457  2C5A               	goto	u13325
  7585  2458  3078               	movlw	120
  7586  2459  0278               	subwf	_g_i_SWR,w
  7587  245A                     u13325:
  7588  245A  1C03               	btfss	3,0
  7589  245B  2C80               	goto	l8692
  7590                           
  7591                           ;./main.h: 321:             l_coarse_cap_count += l_coarse_cap_step;
  7592  245C  0022               	movlb	2	; select bank2
  7593  245D  0853               	movf	coarse_cap@l_coarse_cap_step^(0+256),w
  7594  245E  00CF               	movwf	??_coarse_cap^(0+256)
  7595  245F  084F               	movf	??_coarse_cap^(0+256),w
  7596  2460  07D4               	addwf	coarse_cap@l_coarse_cap_count^(0+256),f
  7597                           
  7598                           ;./main.h: 322:             if (e_c_b_C_linear == 0 & l_coarse_cap_count == 9)
  7599  2461  0834               	movf	_e_c_b_C_linear^(0+256),w
  7600  2462  1D03               	btfss	3,2
  7601  2463  2C6D               	goto	l8684
  7602  2464  3009               	movlw	9
  7603  2465  0654               	xorwf	coarse_cap@l_coarse_cap_count^(0+256),w
  7604  2466  1D03               	btfss	3,2
  7605  2467  2C6D               	goto	l8684
  7606                           
  7607                           ;./main.h: 323:                 l_coarse_cap_count = 8;
  7608  2468  3008               	movlw	8
  7609  2469  00CF               	movwf	??_coarse_cap^(0+256)
  7610  246A  084F               	movf	??_coarse_cap^(0+256),w
  7611  246B  00D4               	movwf	coarse_cap@l_coarse_cap_count^(0+256)
  7612  246C  2C7C               	goto	l8690
  7613  246D                     l8684:
  7614  246D  0834               	movf	_e_c_b_C_linear^(0+256),w
  7615  246E  1D03               	btfss	3,2
  7616  246F  2C7C               	goto	l8690
  7617  2470  3011               	movlw	17
  7618  2471  0654               	xorwf	coarse_cap@l_coarse_cap_count^(0+256),w
  7619  2472  1D03               	btfss	3,2
  7620  2473  2C7C               	goto	l8690
  7621                           
  7622                           ;./main.h: 325:                 l_coarse_cap_count = 16;
  7623  2474  3010               	movlw	16
  7624  2475  00CF               	movwf	??_coarse_cap^(0+256)
  7625  2476  084F               	movf	??_coarse_cap^(0+256),w
  7626  2477  00D4               	movwf	coarse_cap@l_coarse_cap_count^(0+256)
  7627                           
  7628                           ;./main.h: 326:                 l_coarse_cap_step = 4;
  7629  2478  3004               	movlw	4
  7630  2479  00CF               	movwf	??_coarse_cap^(0+256)
  7631  247A  084F               	movf	??_coarse_cap^(0+256),w
  7632  247B  00D3               	movwf	coarse_cap@l_coarse_cap_step^(0+256)
  7633  247C                     l8690:
  7634                           
  7635                           ;./main.h: 330:     }
  7636  247C  3020               	movlw	32
  7637  247D  0254               	subwf	coarse_cap@l_coarse_cap_count^(0+256),w
  7638  247E  1C03               	skipc
  7639  247F  2C10               	goto	l8660
  7640  2480                     l8692:
  7641                           
  7642                           ;./main.h: 331:     set_cap(g_c_cap);
  7643  2480  087A               	movf	_g_c_cap,w
  7644  2481  31AE  2636         	fcall	_set_cap
  7645  2483  0008               	return
  7646  2484                     __end_of_coarse_cap:
  7647                           
  7648                           	psect	text17
  7649  18F2                     __ptext17:	
  7650 ;; *************** function _get_swr *****************
  7651 ;; Defined at:
  7652 ;;		line 209 in file "./main.h"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;		None
  7655 ;; Auto vars:     Size  Location     Type
  7656 ;;		None
  7657 ;; Return value:  Size  Location     Type
  7658 ;;                  1    wreg      void 
  7659 ;; Registers used:
  7660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7661 ;; Tracked objects:
  7662 ;;		On entry : 0/2
  7663 ;;		On exit  : 0/0
  7664 ;;		Unchanged: 0/0
  7665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7668 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  7669 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  7670 ;;Total ram usage:        2 bytes
  7671 ;; Hardware stack levels used: 1
  7672 ;; Hardware stack levels required when called: 8
  7673 ;; This function calls:
  7674 ;;		_Button
  7675 ;;		_get_pwr
  7676 ;;		_show_pwr
  7677 ;;		_show_reset
  7678 ;; This function is called by:
  7679 ;;		_coarse_cap
  7680 ;;		_coarse_tune
  7681 ;;		_sharp_cap
  7682 ;;		_sharp_ind
  7683 ;;		_sub_tune
  7684 ;;		_tune
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688  18F2                     _get_swr:	
  7689                           ;psect for function _get_swr
  7690                           
  7691                           
  7692                           ;./main.h: 210:     get_pwr();
  7693                           
  7694                           ;incstack = 0
  7695                           ; Regs used in _get_swr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7696  18F2  3188  2020  3198   	fcall	_get_pwr
  7697                           
  7698                           ;./main.h: 211:     if (g_char_p_cnt != 100) {
  7699  18F5  3064               	movlw	100
  7700  18F6  0022               	movlb	2	; select bank2
  7701  18F7  0637               	xorwf	_g_char_p_cnt^(0+256),w
  7702  18F8  1903               	btfsc	3,2
  7703  18F9  2910               	goto	l8598
  7704                           
  7705                           ;./main.h: 212:         g_char_p_cnt += 1;
  7706  18FA  3001               	movlw	1
  7707  18FB  00CD               	movwf	??_get_swr^(0+256)
  7708  18FC  084D               	movf	??_get_swr^(0+256),w
  7709  18FD  07B7               	addwf	_g_char_p_cnt^(0+256),f
  7710                           
  7711                           ;./main.h: 213:         if (g_i_PWR > g_i_P_max)
  7712  18FE  0825               	movf	(_g_i_P_max+1)^(0+256),w
  7713  18FF  3A80               	xorlw	128
  7714  1900  00CD               	movwf	??_get_swr^(0+256)
  7715  1901  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7716  1902  3A80               	xorlw	128
  7717  1903  024D               	subwf	??_get_swr^(0+256),w
  7718  1904  1D03               	skipz
  7719  1905  2908               	goto	u13195
  7720  1906  0826               	movf	_g_i_PWR^(0+256),w
  7721  1907  0224               	subwf	_g_i_P_max^(0+256),w
  7722  1908                     u13195:
  7723  1908  1803               	skipnc
  7724  1909  2922               	goto	l8632
  7725                           
  7726                           ;./main.h: 214:             g_i_P_max = g_i_PWR;
  7727  190A  0022               	movlb	2	; select bank2
  7728  190B  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7729  190C  00A5               	movwf	(_g_i_P_max+1)^(0+256)
  7730  190D  0826               	movf	_g_i_PWR^(0+256),w
  7731  190E  00A4               	movwf	_g_i_P_max^(0+256)
  7732  190F  2922               	goto	l8632
  7733  1910                     l8598:
  7734                           
  7735                           ;./main.h: 216:         g_char_p_cnt = 0;
  7736  1910  01B7               	clrf	_g_char_p_cnt^(0+256)
  7737                           
  7738                           ;./main.h: 217:         show_pwr(g_i_P_max, g_i_SWR);
  7739  1911  0825               	movf	(_g_i_P_max+1)^(0+256),w
  7740  1912  0021               	movlb	1	; select bank1
  7741  1913  00BE               	movwf	(show_pwr@parm_Power+1)^(0+128)
  7742  1914  0022               	movlb	2	; select bank2
  7743  1915  0824               	movf	_g_i_P_max^(0+256),w
  7744  1916  0021               	movlb	1	; select bank1
  7745  1917  00BD               	movwf	show_pwr@parm_Power^(0+128)
  7746  1918  0879               	movf	_g_i_SWR+1,w
  7747  1919  00C0               	movwf	(show_pwr@parm_SWR+1)^(0+128)
  7748  191A  0878               	movf	_g_i_SWR,w
  7749  191B  00BF               	movwf	show_pwr@parm_SWR^(0+128)
  7750  191C  3180  2050  3198   	fcall	_show_pwr
  7751                           
  7752                           ;./main.h: 218:         g_i_P_max = 0;
  7753  191F  0022               	movlb	2	; select bank2
  7754  1920  01A4               	clrf	_g_i_P_max^(0+256)
  7755  1921  01A5               	clrf	(_g_i_P_max+1)^(0+256)
  7756  1922                     l8632:
  7757                           
  7758                           ;./main.h: 220:     while ((g_i_PWR < e_i_watts_min_for_start) | (g_i_PWR > e_i_watts_ma
      +                          x_for_start & e_i_watts_max_for_start > 0)) {
  7759  1922  0022               	movlb	2	; select bank2
  7760  1923  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7761  1924  3A80               	xorlw	128
  7762  1925  00CD               	movwf	??_get_swr^(0+256)
  7763  1926  0023               	movlb	3	; select bank3
  7764  1927  0827               	movf	(_e_i_watts_min_for_start+1)^(0+384),w
  7765  1928  3A80               	xorlw	128
  7766  1929  0022               	movlb	2	; select bank2
  7767  192A  024D               	subwf	??_get_swr^(0+256),w
  7768  192B  1D03               	skipz
  7769  192C  2931               	goto	u13265
  7770  192D  0023               	movlb	3	; select bank3
  7771  192E  0826               	movf	_e_i_watts_min_for_start^(0+384),w
  7772  192F  0022               	movlb	2	; select bank2
  7773  1930  0226               	subwf	_g_i_PWR^(0+256),w
  7774  1931                     u13265:
  7775  1931  1803               	btfsc	3,0
  7776  1932  299B               	goto	l8634
  7777  1933                     l235:
  7778  1933  0064               	clrwdt	;# 
  7779                           
  7780                           ;./main.h: 222:         get_pwr();
  7781  1934  3188  2020  3198   	fcall	_get_pwr
  7782                           
  7783                           ;./main.h: 223:         if (g_char_p_cnt != 100) {
  7784  1937  3064               	movlw	100
  7785  1938  0022               	movlb	2	; select bank2
  7786  1939  0637               	xorwf	_g_char_p_cnt^(0+256),w
  7787  193A  1903               	btfsc	3,2
  7788  193B  2952               	goto	l8614
  7789                           
  7790                           ;./main.h: 224:             g_char_p_cnt += 1;
  7791  193C  3001               	movlw	1
  7792  193D  00CD               	movwf	??_get_swr^(0+256)
  7793  193E  084D               	movf	??_get_swr^(0+256),w
  7794  193F  07B7               	addwf	_g_char_p_cnt^(0+256),f
  7795                           
  7796                           ;./main.h: 225:             if (g_i_PWR > g_i_P_max)
  7797  1940  0825               	movf	(_g_i_P_max+1)^(0+256),w
  7798  1941  3A80               	xorlw	128
  7799  1942  00CD               	movwf	??_get_swr^(0+256)
  7800  1943  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7801  1944  3A80               	xorlw	128
  7802  1945  024D               	subwf	??_get_swr^(0+256),w
  7803  1946  1D03               	skipz
  7804  1947  294A               	goto	u13215
  7805  1948  0826               	movf	_g_i_PWR^(0+256),w
  7806  1949  0224               	subwf	_g_i_P_max^(0+256),w
  7807  194A                     u13215:
  7808  194A  1803               	skipnc
  7809  194B  2964               	goto	l8620
  7810                           
  7811                           ;./main.h: 226:                 g_i_P_max = g_i_PWR;
  7812  194C  0022               	movlb	2	; select bank2
  7813  194D  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7814  194E  00A5               	movwf	(_g_i_P_max+1)^(0+256)
  7815  194F  0826               	movf	_g_i_PWR^(0+256),w
  7816  1950  00A4               	movwf	_g_i_P_max^(0+256)
  7817  1951  2964               	goto	l8620
  7818  1952                     l8614:
  7819                           
  7820                           ;./main.h: 228:             g_char_p_cnt = 0;
  7821  1952  01B7               	clrf	_g_char_p_cnt^(0+256)
  7822                           
  7823                           ;./main.h: 229:             show_pwr(g_i_P_max, g_i_SWR);
  7824  1953  0825               	movf	(_g_i_P_max+1)^(0+256),w
  7825  1954  0021               	movlb	1	; select bank1
  7826  1955  00BE               	movwf	(show_pwr@parm_Power+1)^(0+128)
  7827  1956  0022               	movlb	2	; select bank2
  7828  1957  0824               	movf	_g_i_P_max^(0+256),w
  7829  1958  0021               	movlb	1	; select bank1
  7830  1959  00BD               	movwf	show_pwr@parm_Power^(0+128)
  7831  195A  0879               	movf	_g_i_SWR+1,w
  7832  195B  00C0               	movwf	(show_pwr@parm_SWR+1)^(0+128)
  7833  195C  0878               	movf	_g_i_SWR,w
  7834  195D  00BF               	movwf	show_pwr@parm_SWR^(0+128)
  7835  195E  3180  2050  3198   	fcall	_show_pwr
  7836                           
  7837                           ;./main.h: 230:             g_i_P_max = 0;
  7838  1961  0022               	movlb	2	; select bank2
  7839  1962  01A4               	clrf	_g_i_P_max^(0+256)
  7840  1963  01A5               	clrf	(_g_i_P_max+1)^(0+256)
  7841  1964                     l8620:
  7842                           
  7843                           ;./main.h: 233:         if (Button(&PORTB, 0, 5, 1))
  7844  1964  300D               	movlw	13
  7845  1965  0020               	movlb	0	; select bank0
  7846  1966  00A0               	movwf	Button@port
  7847  1967  3000               	movlw	0
  7848  1968  00A1               	movwf	Button@port+1
  7849  1969  01A2               	clrf	Button@pin
  7850  196A  3005               	movlw	5
  7851  196B  0022               	movlb	2	; select bank2
  7852  196C  00CD               	movwf	??_get_swr^(0+256)
  7853  196D  084D               	movf	??_get_swr^(0+256),w
  7854  196E  0020               	movlb	0	; select bank0
  7855  196F  00A3               	movwf	Button@time
  7856  1970  01A4               	clrf	Button@active_state
  7857  1971  0AA4               	incf	Button@active_state,f
  7858  1972  3190  2005  3198   	fcall	_Button
  7859  1975  3A00               	xorlw	0
  7860  1976  1903               	skipnz
  7861  1977  297B               	goto	l8624
  7862                           
  7863                           ;./main.h: 234:             g_b_rready = 1;
  7864  1978  0022               	movlb	2	; select bank2
  7865  1979  01B8               	clrf	_g_b_rready^(0+256)
  7866  197A  0AB8               	incf	_g_b_rready^(0+256),f
  7867  197B                     l8624:
  7868                           
  7869                           ;./main.h: 235:         if ((g_b_rready == 1) & Button(&PORTB, 0, 5, 0)) {
  7870  197B  300D               	movlw	13
  7871  197C  0020               	movlb	0	; select bank0
  7872  197D  00A0               	movwf	Button@port
  7873  197E  3000               	movlw	0
  7874  197F  00A1               	movwf	Button@port+1
  7875  1980  01A2               	clrf	Button@pin
  7876  1981  3005               	movlw	5
  7877  1982  0022               	movlb	2	; select bank2
  7878  1983  00CD               	movwf	??_get_swr^(0+256)
  7879  1984  084D               	movf	??_get_swr^(0+256),w
  7880  1985  0020               	movlb	0	; select bank0
  7881  1986  00A3               	movwf	Button@time
  7882  1987  01A4               	clrf	Button@active_state
  7883  1988  3190  2005  3198   	fcall	_Button
  7884  198B  0022               	movlb	2	; select bank2
  7885  198C  00CE               	movwf	(??_get_swr+1)^(0+256)
  7886  198D  0338               	decf	_g_b_rready^(0+256),w
  7887  198E  1D03               	btfss	3,2
  7888  198F  2992               	goto	u13230
  7889  1990  3001               	movlw	1
  7890  1991  2993               	goto	u13240
  7891  1992                     u13230:
  7892  1992  3000               	movlw	0
  7893  1993                     u13240:
  7894  1993  054E               	andwf	(??_get_swr+1)^(0+256),w
  7895  1994  1903               	btfsc	3,2
  7896  1995  2922               	goto	l8632
  7897                           
  7898                           ;./main.h: 236:             show_reset();
  7899  1996  31A4  2484         	fcall	_show_reset
  7900                           
  7901                           ;./main.h: 237:             g_i_SWR = 0;
  7902  1998  01F8               	clrf	_g_i_SWR
  7903  1999  01F9               	clrf	_g_i_SWR+1
  7904  199A  0008               	return
  7905  199B                     l8634:
  7906  199B  0023               	movlb	3	; select bank3
  7907  199C  0825               	movf	(_e_i_watts_max_for_start+1)^(0+384),w
  7908  199D  3A80               	xorlw	128
  7909  199E  0022               	movlb	2	; select bank2
  7910  199F  00CD               	movwf	??_get_swr^(0+256)
  7911  19A0  0827               	movf	(_g_i_PWR+1)^(0+256),w
  7912  19A1  3A80               	xorlw	128
  7913  19A2  024D               	subwf	??_get_swr^(0+256),w
  7914  19A3  1D03               	skipz
  7915  19A4  29A8               	goto	u13275
  7916  19A5  0826               	movf	_g_i_PWR^(0+256),w
  7917  19A6  0023               	movlb	3	; select bank3
  7918  19A7  0224               	subwf	_e_i_watts_max_for_start^(0+384),w
  7919  19A8                     u13275:
  7920  19A8  1803               	skipnc
  7921  19A9  0008               	return
  7922  19AA  0023               	movlb	3	; select bank3
  7923  19AB  0825               	movf	(_e_i_watts_max_for_start+1)^(0+384),w
  7924  19AC  3A80               	xorlw	128
  7925  19AD  0022               	movlb	2	; select bank2
  7926  19AE  00CD               	movwf	??_get_swr^(0+256)
  7927  19AF  3080               	movlw	128
  7928  19B0  024D               	subwf	??_get_swr^(0+256),w
  7929  19B1  1D03               	skipz
  7930  19B2  29B6               	goto	u13285
  7931  19B3  3001               	movlw	1
  7932  19B4  0023               	movlb	3	; select bank3
  7933  19B5  0224               	subwf	_e_i_watts_max_for_start^(0+384),w
  7934  19B6                     u13285:
  7935  19B6  1C03               	btfss	3,0
  7936  19B7  0008               	return
  7937  19B8  2933               	goto	l235
  7938  19B9                     __end_of_get_swr:
  7939                           
  7940                           	psect	text18
  7941  2484                     __ptext18:	
  7942 ;; *************** function _show_reset *****************
  7943 ;; Defined at:
  7944 ;;		line 338 in file "main.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;		None
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;		None
  7949 ;; Return value:  Size  Location     Type
  7950 ;;                  1    wreg      void 
  7951 ;; Registers used:
  7952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7953 ;; Tracked objects:
  7954 ;;		On entry : 0/2
  7955 ;;		On exit  : 0/0
  7956 ;;		Unchanged: 0/0
  7957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;Total ram usage:        2 bytes
  7963 ;; Hardware stack levels used: 1
  7964 ;; Hardware stack levels required when called: 7
  7965 ;; This function calls:
  7966 ;;		_Delay_ms
  7967 ;;		_atu_reset
  7968 ;;		_eeprom_write
  7969 ;;		_lcd_ind
  7970 ;;		_lcd_pwr
  7971 ;;		_set_sw
  7972 ;;		_uart_wr_str
  7973 ;; This function is called by:
  7974 ;;		_get_swr
  7975 ;;		_button_proc
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979  2484                     _show_reset:	
  7980                           ;psect for function _show_reset
  7981                           
  7982                           
  7983                           ;main.c: 339:     atu_reset();
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _show_reset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7987  2484  31AC  24E8  31A4   	fcall	_atu_reset
  7988                           
  7989                           ;main.c: 340:     g_c_SW = 1;
  7990  2487  0022               	movlb	2	; select bank2
  7991  2488  01BB               	clrf	_g_c_SW^(0+256)
  7992  2489  0ABB               	incf	_g_c_SW^(0+256),f
  7993                           
  7994                           ;main.c: 341:     set_sw(g_c_SW);
  7995  248A  083B               	movf	_g_c_SW^(0+256),w
  7996  248B  31AC  24AE  31A4   	fcall	_set_sw
  7997                           
  7998                           ;main.c: 342:     eeprom_write(255, 0);
  7999  248E  0020               	movlb	0	; select bank0
  8000  248F  01A4               	clrf	eeprom_write@value
  8001  2490  30FF               	movlw	255
  8002  2491  3198  2004  31A4   	fcall	_eeprom_write
  8003                           
  8004                           ;main.c: 343:     eeprom_write(254, 0);
  8005  2494  0020               	movlb	0	; select bank0
  8006  2495  01A4               	clrf	eeprom_write@value
  8007  2496  30FE               	movlw	254
  8008  2497  3198  2004  31A4   	fcall	_eeprom_write
  8009                           
  8010                           ;main.c: 344:     eeprom_write(253, 1);
  8011  249A  0020               	movlb	0	; select bank0
  8012  249B  01A4               	clrf	eeprom_write@value
  8013  249C  0AA4               	incf	eeprom_write@value,f
  8014  249D  30FD               	movlw	253
  8015  249E  3198  2004  31A4   	fcall	_eeprom_write
  8016                           
  8017                           ;main.c: 345:     eeprom_write(252, 0);
  8018  24A1  0020               	movlb	0	; select bank0
  8019  24A2  01A4               	clrf	eeprom_write@value
  8020  24A3  30FC               	movlw	252
  8021  24A4  3198  2004  31A4   	fcall	_eeprom_write
  8022                           
  8023                           ;main.c: 346:     eeprom_write(251, 0);
  8024  24A7  0020               	movlb	0	; select bank0
  8025  24A8  01A4               	clrf	eeprom_write@value
  8026  24A9  30FB               	movlw	251
  8027  24AA  3198  2004  31A4   	fcall	_eeprom_write
  8028                           
  8029                           ;main.c: 347:     lcd_ind();
  8030  24AD  3195  2597  31A4   	fcall	_lcd_ind
  8031                           
  8032                           ;main.c: 348:     g_b_Loss_mode = 0;
  8033  24B0  0022               	movlb	2	; select bank2
  8034  24B1  01AB               	clrf	_g_b_Loss_mode^(0+256)
  8035                           
  8036                           ;main.c: 349:     out_dummy = 0;
  8037  24B2  0023               	movlb	3	; select bank3
  8038  24B3  01D2               	clrf	_out_dummy^(0+384)
  8039                           
  8040                           ;main.c: 350:     out_dummy = 1;
  8041  24B4  01D2               	clrf	_out_dummy^(0+384)
  8042  24B5  0AD2               	incf	_out_dummy^(0+384),f
  8043                           
  8044                           ;main.c: 351:     g_i_SWR = 0;
  8045  24B6  01F8               	clrf	_g_i_SWR
  8046  24B7  01F9               	clrf	_g_i_SWR+1
  8047                           
  8048                           ;main.c: 352:     g_i_PWR = 0;
  8049  24B8  0022               	movlb	2	; select bank2
  8050  24B9  01A6               	clrf	_g_i_PWR^(0+256)
  8051  24BA  01A7               	clrf	(_g_i_PWR+1)^(0+256)
  8052                           
  8053                           ;main.c: 353:     g_i_SWR_fixed_old = 0;
  8054  24BB  01A0               	clrf	_g_i_SWR_fixed_old^(0+256)
  8055  24BC  01A1               	clrf	(_g_i_SWR_fixed_old+1)^(0+256)
  8056                           
  8057                           ;main.c: 354:     if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  8058  24BD  3004               	movlw	4
  8059  24BE  062F               	xorwf	_e_c_ledtype^(0+256),w
  8060  24BF  1903               	btfsc	3,2
  8061  24C0  2CC5               	goto	l8568
  8062  24C1  3005               	movlw	5
  8063  24C2  062F               	xorwf	_e_c_ledtype^(0+256),w
  8064  24C3  1D03               	btfss	3,2
  8065  24C4  2CF1               	goto	l8574
  8066  24C5                     l8568:
  8067                           
  8068                           ;main.c: 355:         uart_wr_str(2, 16, "RESET   ", 8);
  8069  24C5  3010               	movlw	16
  8070  24C6  0021               	movlb	1	; select bank1
  8071  24C7  00ED               	movwf	??_show_reset^(0+128)
  8072  24C8  086D               	movf	??_show_reset^(0+128),w
  8073  24C9  00F3               	movwf	uart_wr_str@col
  8074  24CA  303C               	movlw	low (STR_17| (0+32768))
  8075  24CB  00F4               	movwf	uart_wr_str@str
  8076  24CC  30B0               	movlw	high (STR_17| (0+32768))
  8077  24CD  00F5               	movwf	uart_wr_str@str+1
  8078  24CE  3008               	movlw	8
  8079  24CF  00EE               	movwf	(??_show_reset+1)^(0+128)
  8080  24D0  086E               	movf	(??_show_reset+1)^(0+128),w
  8081  24D1  00F6               	movwf	uart_wr_str@len
  8082  24D2  3002               	movlw	2
  8083  24D3  31AF  2710  31A4   	fcall	_uart_wr_str
  8084  24D6  0064               	clrwdt	;# 
  8085                           
  8086                           ;main.c: 357:         Delay_ms(600);
  8087  24D7  3058               	movlw	88
  8088  24D8  00F3               	movwf	Delay_ms@time_in_ms
  8089  24D9  3002               	movlw	2
  8090  24DA  00F4               	movwf	Delay_ms@time_in_ms+1
  8091  24DB  31AC  24FE  31A4   	fcall	_Delay_ms
  8092                           
  8093                           ;main.c: 358:         uart_wr_str(2, 16, "SWR=0.00", 8);
  8094  24DE  3010               	movlw	16
  8095  24DF  0021               	movlb	1	; select bank1
  8096  24E0  00ED               	movwf	??_show_reset^(0+128)
  8097  24E1  086D               	movf	??_show_reset^(0+128),w
  8098  24E2  00F3               	movwf	uart_wr_str@col
  8099  24E3  304E               	movlw	low (STR_18| (0+32768))
  8100  24E4  00F4               	movwf	uart_wr_str@str
  8101  24E5  30B0               	movlw	high (STR_18| (0+32768))
  8102  24E6  00F5               	movwf	uart_wr_str@str+1
  8103  24E7  3008               	movlw	8
  8104  24E8  00EE               	movwf	(??_show_reset+1)^(0+128)
  8105  24E9  086E               	movf	(??_show_reset+1)^(0+128),w
  8106  24EA  00F6               	movwf	uart_wr_str@len
  8107  24EB  3002               	movlw	2
  8108  24EC  31AF  2710  31A4   	fcall	_uart_wr_str
  8109  24EF  0064               	clrwdt	;# 
  8110                           
  8111                           ;main.c: 360:     } else if (e_c_ledtype != 0) {
  8112  24F0  2D1C               	goto	l8582
  8113  24F1                     l8574:
  8114  24F1  082F               	movf	_e_c_ledtype^(0+256),w
  8115  24F2  1903               	btfsc	3,2
  8116  24F3  2D1A               	goto	l527
  8117                           
  8118                           ;main.c: 361:         uart_wr_str(1, 0, "RESET   ", 8);
  8119  24F4  01F3               	clrf	uart_wr_str@col
  8120  24F5  303C               	movlw	low (STR_17| (0+32768))
  8121  24F6  00F4               	movwf	uart_wr_str@str
  8122  24F7  30B0               	movlw	high (STR_17| (0+32768))
  8123  24F8  00F5               	movwf	uart_wr_str@str+1
  8124  24F9  3008               	movlw	8
  8125  24FA  0021               	movlb	1	; select bank1
  8126  24FB  00ED               	movwf	??_show_reset^(0+128)
  8127  24FC  086D               	movf	??_show_reset^(0+128),w
  8128  24FD  00F6               	movwf	uart_wr_str@len
  8129  24FE  3001               	movlw	1
  8130  24FF  31AF  2710  31A4   	fcall	_uart_wr_str
  8131  2502  0064               	clrwdt	;# 
  8132                           
  8133                           ;main.c: 363:         Delay_ms(600);
  8134  2503  3058               	movlw	88
  8135  2504  00F3               	movwf	Delay_ms@time_in_ms
  8136  2505  3002               	movlw	2
  8137  2506  00F4               	movwf	Delay_ms@time_in_ms+1
  8138  2507  31AC  24FE  31A4   	fcall	_Delay_ms
  8139                           
  8140                           ;main.c: 364:         uart_wr_str(1, 0, "SWR=0.00", 8);
  8141  250A  01F3               	clrf	uart_wr_str@col
  8142  250B  304E               	movlw	low (STR_18| (0+32768))
  8143  250C  00F4               	movwf	uart_wr_str@str
  8144  250D  30B0               	movlw	high (STR_18| (0+32768))
  8145  250E  00F5               	movwf	uart_wr_str@str+1
  8146  250F  3008               	movlw	8
  8147  2510  0021               	movlb	1	; select bank1
  8148  2511  00ED               	movwf	??_show_reset^(0+128)
  8149  2512  086D               	movf	??_show_reset^(0+128),w
  8150  2513  00F6               	movwf	uart_wr_str@len
  8151  2514  3001               	movlw	1
  8152  2515  31AF  2710  31A4   	fcall	_uart_wr_str
  8153  2518  0064               	clrwdt	;# 
  8154                           
  8155                           ;main.c: 366:     } else {
  8156  2519  2D1C               	goto	l8582
  8157  251A                     l527:
  8158                           
  8159                           ;main.c: 367:         LATBbits.LATB6 = 1;
  8160  251A  170D               	bsf	13,6	;volatile
  8161                           
  8162                           ;main.c: 368:         LATBbits.LATB7 = 1;
  8163  251B  178D               	bsf	13,7	;volatile
  8164  251C                     l8582:
  8165                           
  8166                           ;main.c: 370:     g_i_SWR_old = 10000;
  8167  251C  3010               	movlw	16
  8168  251D  0023               	movlb	3	; select bank3
  8169  251E  00D4               	movwf	_g_i_SWR_old^(0+384)
  8170  251F  3027               	movlw	39
  8171  2520  00D5               	movwf	(_g_i_SWR_old^(0+384)+1)
  8172                           
  8173                           ;main.c: 371:     g_i_Power_old = 10000;
  8174  2521  3010               	movlw	16
  8175  2522  00D6               	movwf	_g_i_Power_old^(0+384)
  8176  2523  3027               	movlw	39
  8177  2524  00D7               	movwf	(_g_i_Power_old^(0+384)+1)
  8178                           
  8179                           ;main.c: 372:     lcd_pwr();
  8180  2525  318A  2246         	fcall	_lcd_pwr
  8181  2527  0008               	return
  8182  2528                     __end_of_show_reset:
  8183                           
  8184                           	psect	text19
  8185  0A46                     __ptext19:	
  8186 ;; *************** function _lcd_pwr *****************
  8187 ;; Defined at:
  8188 ;;		line 673 in file "main.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;		None
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;  SWR_fixed       2   75[BANK1 ] int 
  8193 ;;  p               2   73[BANK1 ] int 
  8194 ;;  delta           2   71[BANK1 ] int 
  8195 ;;  peak_cnt        1   69[BANK1 ] unsigned char 
  8196 ;;  cnt             1   68[BANK1 ] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/3
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:       12 bytes
  8211 ;; Hardware stack levels used: 1
  8212 ;; Hardware stack levels required when called: 6
  8213 ;; This function calls:
  8214 ;;		_Delay_ms
  8215 ;;		___awdiv
  8216 ;;		___wmul
  8217 ;;		_get_pwr
  8218 ;;		_lcd_swr
  8219 ;;		_show_pwr
  8220 ;;		_uart_wr_str
  8221 ;; This function is called by:
  8222 ;;		_main
  8223 ;;		_button_proc_test
  8224 ;;		_show_reset
  8225 ;;		_tune_btn_push
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229  0A46                     _lcd_pwr:	
  8230                           ;psect for function _lcd_pwr
  8231                           
  8232                           
  8233                           ;main.c: 674:     int p = 0;
  8234                           
  8235                           ;incstack = 0
  8236                           ; Regs used in _lcd_pwr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8237  0A46  0021               	movlb	1	; select bank1
  8238  0A47  01E9               	clrf	lcd_pwr@p^(0+128)
  8239  0A48  01EA               	clrf	(lcd_pwr@p+1)^(0+128)
  8240                           
  8241                           ;main.c: 675:     char peak_cnt;;main.c: 676:     int delta = e_i_tenths_SWR_Auto_delta 
      +                          - 100;
  8242  0A49  0023               	movlb	3	; select bank3
  8243  0A4A  0828               	movf	_e_i_tenths_SWR_Auto_delta^(0+384),w
  8244  0A4B  3E9C               	addlw	156
  8245  0A4C  0021               	movlb	1	; select bank1
  8246  0A4D  00E7               	movwf	lcd_pwr@delta^(0+128)
  8247  0A4E  30FF               	movlw	255
  8248  0A4F  0023               	movlb	3	; select bank3
  8249  0A50  3D29               	addwfc	(_e_i_tenths_SWR_Auto_delta+1)^(0+384),w
  8250  0A51  0021               	movlb	1	; select bank1
  8251  0A52  00E8               	movwf	(lcd_pwr@delta+1)^(0+128)
  8252                           
  8253                           ;main.c: 677:     char cnt;;main.c: 678:     int SWR_fixed;;main.c: 679:     g_i_PWR = 0
      +                          ;
  8254  0A53  0022               	movlb	2	; select bank2
  8255  0A54  01A6               	clrf	_g_i_PWR^(0+256)
  8256  0A55  01A7               	clrf	(_g_i_PWR+1)^(0+256)
  8257  0A56  0064               	clrwdt	;# 
  8258                           
  8259                           ;main.c: 683:     cnt = 120;
  8260  0A57  3078               	movlw	120
  8261  0A58  0021               	movlb	1	; select bank1
  8262  0A59  00E1               	movwf	??_lcd_pwr^(0+128)
  8263  0A5A  0861               	movf	??_lcd_pwr^(0+128),w
  8264  0A5B  00E4               	movwf	lcd_pwr@cnt^(0+128)
  8265                           
  8266                           ;main.c: 684:     for (peak_cnt = 0; peak_cnt < cnt; peak_cnt++) {
  8267  0A5C  01E5               	clrf	lcd_pwr@peak_cnt^(0+128)
  8268  0A5D                     l8402:
  8269  0A5D  0864               	movf	lcd_pwr@cnt^(0+128),w
  8270  0A5E  0265               	subwf	lcd_pwr@peak_cnt^(0+128),w
  8271  0A5F  1803               	btfsc	3,0
  8272  0A60  2A8E               	goto	l664
  8273                           
  8274                           ;main.c: 685:         get_pwr();
  8275  0A61  3188  2020  318A   	fcall	_get_pwr
  8276                           
  8277                           ;main.c: 686:         if (g_i_PWR > p) {
  8278  0A64  0021               	movlb	1	; select bank1
  8279  0A65  086A               	movf	(lcd_pwr@p+1)^(0+128),w
  8280  0A66  3A80               	xorlw	128
  8281  0A67  00E1               	movwf	??_lcd_pwr^(0+128)
  8282  0A68  0022               	movlb	2	; select bank2
  8283  0A69  0827               	movf	(_g_i_PWR+1)^(0+256),w
  8284  0A6A  3A80               	xorlw	128
  8285  0A6B  0021               	movlb	1	; select bank1
  8286  0A6C  0261               	subwf	??_lcd_pwr^(0+128),w
  8287  0A6D  1D03               	skipz
  8288  0A6E  2A73               	goto	u12945
  8289  0A6F  0022               	movlb	2	; select bank2
  8290  0A70  0826               	movf	_g_i_PWR^(0+256),w
  8291  0A71  0021               	movlb	1	; select bank1
  8292  0A72  0269               	subwf	lcd_pwr@p^(0+128),w
  8293  0A73                     u12945:
  8294  0A73  1803               	skipnc
  8295  0A74  2A81               	goto	l8398
  8296                           
  8297                           ;main.c: 687:             p = g_i_PWR;
  8298  0A75  0022               	movlb	2	; select bank2
  8299  0A76  0827               	movf	(_g_i_PWR+1)^(0+256),w
  8300  0A77  0021               	movlb	1	; select bank1
  8301  0A78  00EA               	movwf	(lcd_pwr@p+1)^(0+128)
  8302  0A79  0022               	movlb	2	; select bank2
  8303  0A7A  0826               	movf	_g_i_PWR^(0+256),w
  8304  0A7B  0021               	movlb	1	; select bank1
  8305  0A7C  00E9               	movwf	lcd_pwr@p^(0+128)
  8306                           
  8307                           ;main.c: 688:             SWR_fixed = g_i_SWR;
  8308  0A7D  0879               	movf	_g_i_SWR+1,w
  8309  0A7E  00EC               	movwf	(lcd_pwr@SWR_fixed+1)^(0+128)
  8310  0A7F  0878               	movf	_g_i_SWR,w
  8311  0A80  00EB               	movwf	lcd_pwr@SWR_fixed^(0+128)
  8312  0A81                     l8398:
  8313                           
  8314                           ;main.c: 690:         Delay_ms(3);
  8315  0A81  3003               	movlw	3
  8316  0A82  00F3               	movwf	Delay_ms@time_in_ms
  8317  0A83  3000               	movlw	0
  8318  0A84  00F4               	movwf	Delay_ms@time_in_ms+1
  8319  0A85  31AC  24FE  318A   	fcall	_Delay_ms
  8320                           
  8321                           ;main.c: 691:     }
  8322  0A88  3001               	movlw	1
  8323  0A89  0021               	movlb	1	; select bank1
  8324  0A8A  00E1               	movwf	??_lcd_pwr^(0+128)
  8325  0A8B  0861               	movf	??_lcd_pwr^(0+128),w
  8326  0A8C  07E5               	addwf	lcd_pwr@peak_cnt^(0+128),f
  8327  0A8D  2A5D               	goto	l8402
  8328  0A8E                     l664:
  8329  0A8E  0064               	clrwdt	;# 
  8330                           
  8331                           ;main.c: 693:     if (p >= 100) {
  8332  0A8F  0021               	movlb	1	; select bank1
  8333  0A90  086A               	movf	(lcd_pwr@p+1)^(0+128),w
  8334  0A91  3A80               	xorlw	128
  8335  0A92  00E1               	movwf	??_lcd_pwr^(0+128)
  8336  0A93  3080               	movlw	128
  8337  0A94  0261               	subwf	??_lcd_pwr^(0+128),w
  8338  0A95  1D03               	skipz
  8339  0A96  2A99               	goto	u12965
  8340  0A97  3064               	movlw	100
  8341  0A98  0269               	subwf	lcd_pwr@p^(0+128),w
  8342  0A99                     u12965:
  8343  0A99  1C03               	skipc
  8344  0A9A  2AC5               	goto	l8408
  8345                           
  8346                           ;main.c: 694:         p = (p + 5) / 10;
  8347  0A9B  300A               	movlw	10
  8348  0A9C  00F3               	movwf	___awdiv@divisor
  8349  0A9D  3000               	movlw	0
  8350  0A9E  00F4               	movwf	___awdiv@divisor+1
  8351  0A9F  0021               	movlb	1	; select bank1
  8352  0AA0  0869               	movf	lcd_pwr@p^(0+128),w
  8353  0AA1  3E05               	addlw	5
  8354  0AA2  00F5               	movwf	___awdiv@dividend
  8355  0AA3  3000               	movlw	0
  8356  0AA4  3D6A               	addwfc	(lcd_pwr@p+1)^(0+128),w
  8357  0AA5  00F6               	movwf	___awdiv@dividend+1
  8358  0AA6  31AF  27AE  318A   	fcall	___awdiv
  8359  0AA9  0874               	movf	?___awdiv+1,w
  8360  0AAA  0021               	movlb	1	; select bank1
  8361  0AAB  00EA               	movwf	(lcd_pwr@p+1)^(0+128)
  8362  0AAC  0873               	movf	?___awdiv,w
  8363  0AAD  00E9               	movwf	lcd_pwr@p^(0+128)
  8364                           
  8365                           ;main.c: 695:         p *= 10;
  8366  0AAE  300A               	movlw	10
  8367  0AAF  0020               	movlb	0	; select bank0
  8368  0AB0  00A3               	movwf	___wmul@multiplier
  8369  0AB1  3000               	movlw	0
  8370  0AB2  00A4               	movwf	___wmul@multiplier+1
  8371  0AB3  0021               	movlb	1	; select bank1
  8372  0AB4  086A               	movf	(lcd_pwr@p+1)^(0+128),w
  8373  0AB5  0020               	movlb	0	; select bank0
  8374  0AB6  00A6               	movwf	___wmul@multiplicand+1
  8375  0AB7  0021               	movlb	1	; select bank1
  8376  0AB8  0869               	movf	lcd_pwr@p^(0+128),w
  8377  0AB9  0020               	movlb	0	; select bank0
  8378  0ABA  00A5               	movwf	___wmul@multiplicand
  8379  0ABB  31AD  2515  318A   	fcall	___wmul
  8380  0ABE  0824               	movf	?___wmul+1,w
  8381  0ABF  0021               	movlb	1	; select bank1
  8382  0AC0  00EA               	movwf	(lcd_pwr@p+1)^(0+128)
  8383  0AC1  0020               	movlb	0	; select bank0
  8384  0AC2  0823               	movf	?___wmul,w
  8385  0AC3  0021               	movlb	1	; select bank1
  8386  0AC4  00E9               	movwf	lcd_pwr@p^(0+128)
  8387  0AC5                     l8408:
  8388                           
  8389                           ;main.c: 697:     g_i_Power = p;
  8390  0AC5  0021               	movlb	1	; select bank1
  8391  0AC6  086A               	movf	(lcd_pwr@p+1)^(0+128),w
  8392  0AC7  0023               	movlb	3	; select bank3
  8393  0AC8  00A1               	movwf	(_g_i_Power+1)^(0+384)
  8394  0AC9  0021               	movlb	1	; select bank1
  8395  0ACA  0869               	movf	lcd_pwr@p^(0+128),w
  8396  0ACB  0023               	movlb	3	; select bank3
  8397  0ACC  00A0               	movwf	_g_i_Power^(0+384)
  8398                           
  8399                           ;main.c: 698:     if (g_i_Power < 10)
  8400  0ACD  0821               	movf	(_g_i_Power+1)^(0+384),w
  8401  0ACE  3A80               	xorlw	128
  8402  0ACF  0021               	movlb	1	; select bank1
  8403  0AD0  00E1               	movwf	??_lcd_pwr^(0+128)
  8404  0AD1  3080               	movlw	128
  8405  0AD2  0261               	subwf	??_lcd_pwr^(0+128),w
  8406  0AD3  1D03               	skipz
  8407  0AD4  2AD8               	goto	u12975
  8408  0AD5  300A               	movlw	10
  8409  0AD6  0023               	movlb	3	; select bank3
  8410  0AD7  0220               	subwf	_g_i_Power^(0+384),w
  8411  0AD8                     u12975:
  8412  0AD8  1803               	skipnc
  8413  0AD9  2ADD               	goto	l8414
  8414                           
  8415                           ;main.c: 699:         SWR_fixed = 0;
  8416  0ADA  0021               	movlb	1	; select bank1
  8417  0ADB  01EB               	clrf	lcd_pwr@SWR_fixed^(0+128)
  8418  0ADC  01EC               	clrf	(lcd_pwr@SWR_fixed+1)^(0+128)
  8419  0ADD                     l8414:
  8420                           
  8421                           ;main.c: 700:     lcd_swr(SWR_fixed);
  8422  0ADD  0021               	movlb	1	; select bank1
  8423  0ADE  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8424  0ADF  0020               	movlb	0	; select bank0
  8425  0AE0  00AB               	movwf	lcd_swr@swr+1
  8426  0AE1  0021               	movlb	1	; select bank1
  8427  0AE2  086B               	movf	lcd_pwr@SWR_fixed^(0+128),w
  8428  0AE3  0020               	movlb	0	; select bank0
  8429  0AE4  00AA               	movwf	lcd_swr@swr
  8430  0AE5  3199  21B9  318A   	fcall	_lcd_swr
  8431                           
  8432                           ;main.c: 702:     if (g_b_Auto_mode & (SWR_fixed >= e_i_tenths_SWR_Auto_delta) & ((SWR_f
      +                          ixed > g_i_SWR_fixed_old & (SWR_fixed - g_i_SWR_fixed_old) > delta) | (SWR_fixed < g_i_S
      +                          WR_fixed_old & (g_i_SWR_fixed_old - SWR_fixed) > delta) | g_i_SWR_fixed_old == 999))
  8433  0AE8  0021               	movlb	1	; select bank1
  8434  0AE9  01E6               	clrf	_lcd_pwr$643^(0+128)
  8435  0AEA  0AE6               	incf	_lcd_pwr$643^(0+128),f
  8436  0AEB  0022               	movlb	2	; select bank2
  8437  0AEC  0821               	movf	(_g_i_SWR_fixed_old+1)^(0+256),w
  8438  0AED  3A80               	xorlw	128
  8439  0AEE  0021               	movlb	1	; select bank1
  8440  0AEF  00E1               	movwf	??_lcd_pwr^(0+128)
  8441  0AF0  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8442  0AF1  3A80               	xorlw	128
  8443  0AF2  0261               	subwf	??_lcd_pwr^(0+128),w
  8444  0AF3  1D03               	skipz
  8445  0AF4  2AF8               	goto	u12985
  8446  0AF5  086B               	movf	lcd_pwr@SWR_fixed^(0+128),w
  8447  0AF6  0022               	movlb	2	; select bank2
  8448  0AF7  0220               	subwf	_g_i_SWR_fixed_old^(0+256),w
  8449  0AF8                     u12985:
  8450  0AF8  1803               	skipnc
  8451  0AF9  2B10               	goto	l8422
  8452  0AFA  0022               	movlb	2	; select bank2
  8453  0AFB  0820               	movf	_g_i_SWR_fixed_old^(0+256),w
  8454  0AFC  0021               	movlb	1	; select bank1
  8455  0AFD  026B               	subwf	lcd_pwr@SWR_fixed^(0+128),w
  8456  0AFE  00E1               	movwf	??_lcd_pwr^(0+128)
  8457  0AFF  0022               	movlb	2	; select bank2
  8458  0B00  0821               	movf	(_g_i_SWR_fixed_old+1)^(0+256),w
  8459  0B01  0021               	movlb	1	; select bank1
  8460  0B02  3B6C               	subwfb	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8461  0B03  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8462  0B04  0868               	movf	(lcd_pwr@delta+1)^(0+128),w
  8463  0B05  3A80               	xorlw	128
  8464  0B06  00E3               	movwf	(??_lcd_pwr+2)^(0+128)
  8465  0B07  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8466  0B08  3A80               	xorlw	128
  8467  0B09  0263               	subwf	(??_lcd_pwr+2)^(0+128),w
  8468  0B0A  1D03               	skipz
  8469  0B0B  2B0E               	goto	u12995
  8470  0B0C  0861               	movf	??_lcd_pwr^(0+128),w
  8471  0B0D  0267               	subwf	lcd_pwr@delta^(0+128),w
  8472  0B0E                     u12995:
  8473  0B0E  1C03               	skipc
  8474  0B0F  2B42               	goto	l8430
  8475  0B10                     l8422:
  8476  0B10  0021               	movlb	1	; select bank1
  8477  0B11  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8478  0B12  3A80               	xorlw	128
  8479  0B13  00E1               	movwf	??_lcd_pwr^(0+128)
  8480  0B14  0022               	movlb	2	; select bank2
  8481  0B15  0821               	movf	(_g_i_SWR_fixed_old+1)^(0+256),w
  8482  0B16  3A80               	xorlw	128
  8483  0B17  0021               	movlb	1	; select bank1
  8484  0B18  0261               	subwf	??_lcd_pwr^(0+128),w
  8485  0B19  1D03               	skipz
  8486  0B1A  2B1F               	goto	u13005
  8487  0B1B  0022               	movlb	2	; select bank2
  8488  0B1C  0820               	movf	_g_i_SWR_fixed_old^(0+256),w
  8489  0B1D  0021               	movlb	1	; select bank1
  8490  0B1E  026B               	subwf	lcd_pwr@SWR_fixed^(0+128),w
  8491  0B1F                     u13005:
  8492  0B1F  1803               	skipnc
  8493  0B20  2B38               	goto	l8426
  8494  0B21  0021               	movlb	1	; select bank1
  8495  0B22  086B               	movf	lcd_pwr@SWR_fixed^(0+128),w
  8496  0B23  0022               	movlb	2	; select bank2
  8497  0B24  0220               	subwf	_g_i_SWR_fixed_old^(0+256),w
  8498  0B25  0021               	movlb	1	; select bank1
  8499  0B26  00E1               	movwf	??_lcd_pwr^(0+128)
  8500  0B27  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8501  0B28  0022               	movlb	2	; select bank2
  8502  0B29  3B21               	subwfb	(_g_i_SWR_fixed_old+1)^(0+256),w
  8503  0B2A  0021               	movlb	1	; select bank1
  8504  0B2B  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8505  0B2C  0868               	movf	(lcd_pwr@delta+1)^(0+128),w
  8506  0B2D  3A80               	xorlw	128
  8507  0B2E  00E3               	movwf	(??_lcd_pwr+2)^(0+128)
  8508  0B2F  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8509  0B30  3A80               	xorlw	128
  8510  0B31  0263               	subwf	(??_lcd_pwr+2)^(0+128),w
  8511  0B32  1D03               	skipz
  8512  0B33  2B36               	goto	u13015
  8513  0B34  0861               	movf	??_lcd_pwr^(0+128),w
  8514  0B35  0267               	subwf	lcd_pwr@delta^(0+128),w
  8515  0B36                     u13015:
  8516  0B36  1C03               	skipc
  8517  0B37  2B42               	goto	l8430
  8518  0B38                     l8426:
  8519  0B38  30E7               	movlw	231
  8520  0B39  0022               	movlb	2	; select bank2
  8521  0B3A  0620               	xorwf	_g_i_SWR_fixed_old^(0+256),w
  8522  0B3B  3003               	movlw	3
  8523  0B3C  1903               	skipnz
  8524  0B3D  0621               	xorwf	(_g_i_SWR_fixed_old+1)^(0+256),w
  8525  0B3E  1903               	btfsc	3,2
  8526  0B3F  2B42               	goto	l8430
  8527  0B40  0021               	movlb	1	; select bank1
  8528  0B41  01E6               	clrf	_lcd_pwr$643^(0+128)
  8529  0B42                     l8430:
  8530  0B42  0021               	movlb	1	; select bank1
  8531  0B43  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8532  0B44  3A80               	xorlw	128
  8533  0B45  00E1               	movwf	??_lcd_pwr^(0+128)
  8534  0B46  0023               	movlb	3	; select bank3
  8535  0B47  0829               	movf	(_e_i_tenths_SWR_Auto_delta+1)^(0+384),w
  8536  0B48  3A80               	xorlw	128
  8537  0B49  0021               	movlb	1	; select bank1
  8538  0B4A  0261               	subwf	??_lcd_pwr^(0+128),w
  8539  0B4B  1D03               	skipz
  8540  0B4C  2B51               	goto	u13035
  8541  0B4D  0023               	movlb	3	; select bank3
  8542  0B4E  0828               	movf	_e_i_tenths_SWR_Auto_delta^(0+384),w
  8543  0B4F  0021               	movlb	1	; select bank1
  8544  0B50  026B               	subwf	lcd_pwr@SWR_fixed^(0+128),w
  8545  0B51                     u13035:
  8546  0B51  1C03               	btfss	3,0
  8547  0B52  2B55               	goto	u13030
  8548  0B53  3001               	movlw	1
  8549  0B54  2B56               	goto	u13040
  8550  0B55                     u13030:
  8551  0B55  3000               	movlw	0
  8552  0B56                     u13040:
  8553  0B56  0022               	movlb	2	; select bank2
  8554  0B57  052E               	andwf	_g_b_Auto_mode^(0+256),w
  8555  0B58  0021               	movlb	1	; select bank1
  8556  0B59  0566               	andwf	_lcd_pwr$643^(0+128),w
  8557  0B5A  1903               	btfsc	3,2
  8558  0B5B  2B5F               	goto	l8434
  8559                           
  8560                           ;main.c: 703:         g_b_Soft_tune = 1;
  8561  0B5C  0023               	movlb	3	; select bank3
  8562  0B5D  01D1               	clrf	_g_b_Soft_tune^(0+384)
  8563  0B5E  0AD1               	incf	_g_b_Soft_tune^(0+384),f
  8564  0B5F                     l8434:
  8565                           
  8566                           ;main.c: 705:     show_pwr(g_i_Power, SWR_fixed);
  8567  0B5F  0023               	movlb	3	; select bank3
  8568  0B60  0821               	movf	(_g_i_Power+1)^(0+384),w
  8569  0B61  0021               	movlb	1	; select bank1
  8570  0B62  00BE               	movwf	(show_pwr@parm_Power+1)^(0+128)
  8571  0B63  0023               	movlb	3	; select bank3
  8572  0B64  0820               	movf	_g_i_Power^(0+384),w
  8573  0B65  0021               	movlb	1	; select bank1
  8574  0B66  00BD               	movwf	show_pwr@parm_Power^(0+128)
  8575  0B67  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8576  0B68  00C0               	movwf	(show_pwr@parm_SWR+1)^(0+128)
  8577  0B69  086B               	movf	lcd_pwr@SWR_fixed^(0+128),w
  8578  0B6A  00BF               	movwf	show_pwr@parm_SWR^(0+128)
  8579  0B6B  3180  2050  318A   	fcall	_show_pwr
  8580  0B6E  0064               	clrwdt	;# 
  8581                           
  8582                           ;main.c: 708:     if (g_b_Overload == 1) {
  8583  0B6F  0022               	movlb	2	; select bank2
  8584  0B70  0336               	decf	_g_b_Overload^(0+256),w
  8585  0B71  1D03               	btfss	3,2
  8586  0B72  0008               	return
  8587                           
  8588                           ;main.c: 709:         if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  8589  0B73  3004               	movlw	4
  8590  0B74  062F               	xorwf	_e_c_ledtype^(0+256),w
  8591  0B75  1903               	btfsc	3,2
  8592  0B76  2B7B               	goto	l8442
  8593  0B77  3005               	movlw	5
  8594  0B78  062F               	xorwf	_e_c_ledtype^(0+256),w
  8595  0B79  1D03               	btfss	3,2
  8596  0B7A  2C37               	goto	l8464
  8597  0B7B                     l8442:
  8598                           
  8599                           ;main.c: 710:             uart_wr_str(2, 16, "        ", 8);
  8600  0B7B  3010               	movlw	16
  8601  0B7C  0021               	movlb	1	; select bank1
  8602  0B7D  00E1               	movwf	??_lcd_pwr^(0+128)
  8603  0B7E  0861               	movf	??_lcd_pwr^(0+128),w
  8604  0B7F  00F3               	movwf	uart_wr_str@col
  8605  0B80  3002               	movlw	low ((STR_28+2)| (0+32768))
  8606  0B81  00F4               	movwf	uart_wr_str@str
  8607  0B82  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8608  0B83  00F5               	movwf	uart_wr_str@str+1
  8609  0B84  3008               	movlw	8
  8610  0B85  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8611  0B86  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8612  0B87  00F6               	movwf	uart_wr_str@len
  8613  0B88  3002               	movlw	2
  8614  0B89  31AF  2710  318A   	fcall	_uart_wr_str
  8615                           
  8616                           ;main.c: 711:             Delay_ms(100);
  8617  0B8C  3064               	movlw	100
  8618  0B8D  00F3               	movwf	Delay_ms@time_in_ms
  8619  0B8E  3000               	movlw	0
  8620  0B8F  00F4               	movwf	Delay_ms@time_in_ms+1
  8621  0B90  31AC  24FE  318A   	fcall	_Delay_ms
  8622                           
  8623                           ;main.c: 712:             uart_wr_str(2, 16, "OVERLOAD", 8);
  8624  0B93  3010               	movlw	16
  8625  0B94  0021               	movlb	1	; select bank1
  8626  0B95  00E1               	movwf	??_lcd_pwr^(0+128)
  8627  0B96  0861               	movf	??_lcd_pwr^(0+128),w
  8628  0B97  00F3               	movwf	uart_wr_str@col
  8629  0B98  3060               	movlw	low (STR_57| (0+32768))
  8630  0B99  00F4               	movwf	uart_wr_str@str
  8631  0B9A  30B0               	movlw	high (STR_57| (0+32768))
  8632  0B9B  00F5               	movwf	uart_wr_str@str+1
  8633  0B9C  3008               	movlw	8
  8634  0B9D  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8635  0B9E  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8636  0B9F  00F6               	movwf	uart_wr_str@len
  8637  0BA0  3002               	movlw	2
  8638  0BA1  31AF  2710  318A   	fcall	_uart_wr_str
  8639                           
  8640                           ;main.c: 713:             Delay_ms(500);
  8641  0BA4  30F4               	movlw	244
  8642  0BA5  00F3               	movwf	Delay_ms@time_in_ms
  8643  0BA6  3001               	movlw	1
  8644  0BA7  00F4               	movwf	Delay_ms@time_in_ms+1
  8645  0BA8  31AC  24FE  318A   	fcall	_Delay_ms
  8646  0BAB  0064               	clrwdt	;# 
  8647                           
  8648                           ;main.c: 715:             uart_wr_str(2, 16, "        ", 8);
  8649  0BAC  3010               	movlw	16
  8650  0BAD  0021               	movlb	1	; select bank1
  8651  0BAE  00E1               	movwf	??_lcd_pwr^(0+128)
  8652  0BAF  0861               	movf	??_lcd_pwr^(0+128),w
  8653  0BB0  00F3               	movwf	uart_wr_str@col
  8654  0BB1  3002               	movlw	low ((STR_28+2)| (0+32768))
  8655  0BB2  00F4               	movwf	uart_wr_str@str
  8656  0BB3  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8657  0BB4  00F5               	movwf	uart_wr_str@str+1
  8658  0BB5  3008               	movlw	8
  8659  0BB6  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8660  0BB7  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8661  0BB8  00F6               	movwf	uart_wr_str@len
  8662  0BB9  3002               	movlw	2
  8663  0BBA  31AF  2710  318A   	fcall	_uart_wr_str
  8664                           
  8665                           ;main.c: 716:             Delay_ms(300);
  8666  0BBD  302C               	movlw	44
  8667  0BBE  00F3               	movwf	Delay_ms@time_in_ms
  8668  0BBF  3001               	movlw	1
  8669  0BC0  00F4               	movwf	Delay_ms@time_in_ms+1
  8670  0BC1  31AC  24FE  318A   	fcall	_Delay_ms
  8671  0BC4  0064               	clrwdt	;# 
  8672                           
  8673                           ;main.c: 718:             uart_wr_str(2, 16, "OVERLOAD", 8);
  8674  0BC5  3010               	movlw	16
  8675  0BC6  0021               	movlb	1	; select bank1
  8676  0BC7  00E1               	movwf	??_lcd_pwr^(0+128)
  8677  0BC8  0861               	movf	??_lcd_pwr^(0+128),w
  8678  0BC9  00F3               	movwf	uart_wr_str@col
  8679  0BCA  3060               	movlw	low (STR_57| (0+32768))
  8680  0BCB  00F4               	movwf	uart_wr_str@str
  8681  0BCC  30B0               	movlw	high (STR_57| (0+32768))
  8682  0BCD  00F5               	movwf	uart_wr_str@str+1
  8683  0BCE  3008               	movlw	8
  8684  0BCF  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8685  0BD0  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8686  0BD1  00F6               	movwf	uart_wr_str@len
  8687  0BD2  3002               	movlw	2
  8688  0BD3  31AF  2710  318A   	fcall	_uart_wr_str
  8689                           
  8690                           ;main.c: 719:             Delay_ms(500);
  8691  0BD6  30F4               	movlw	244
  8692  0BD7  00F3               	movwf	Delay_ms@time_in_ms
  8693  0BD8  3001               	movlw	1
  8694  0BD9  00F4               	movwf	Delay_ms@time_in_ms+1
  8695  0BDA  31AC  24FE  318A   	fcall	_Delay_ms
  8696  0BDD  0064               	clrwdt	;# 
  8697                           
  8698                           ;main.c: 721:             uart_wr_str(2, 16, "        ", 8);
  8699  0BDE  3010               	movlw	16
  8700  0BDF  0021               	movlb	1	; select bank1
  8701  0BE0  00E1               	movwf	??_lcd_pwr^(0+128)
  8702  0BE1  0861               	movf	??_lcd_pwr^(0+128),w
  8703  0BE2  00F3               	movwf	uart_wr_str@col
  8704  0BE3  3002               	movlw	low ((STR_28+2)| (0+32768))
  8705  0BE4  00F4               	movwf	uart_wr_str@str
  8706  0BE5  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8707  0BE6  00F5               	movwf	uart_wr_str@str+1
  8708  0BE7  3008               	movlw	8
  8709  0BE8  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8710  0BE9  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8711  0BEA  00F6               	movwf	uart_wr_str@len
  8712  0BEB  3002               	movlw	2
  8713  0BEC  31AF  2710  318A   	fcall	_uart_wr_str
  8714                           
  8715                           ;main.c: 722:             Delay_ms(300);
  8716  0BEF  302C               	movlw	44
  8717  0BF0  00F3               	movwf	Delay_ms@time_in_ms
  8718  0BF1  3001               	movlw	1
  8719  0BF2  00F4               	movwf	Delay_ms@time_in_ms+1
  8720  0BF3  31AC  24FE  318A   	fcall	_Delay_ms
  8721  0BF6  0064               	clrwdt	;# 
  8722                           
  8723                           ;main.c: 724:             uart_wr_str(2, 16, "OVERLOAD", 8);
  8724  0BF7  3010               	movlw	16
  8725  0BF8  0021               	movlb	1	; select bank1
  8726  0BF9  00E1               	movwf	??_lcd_pwr^(0+128)
  8727  0BFA  0861               	movf	??_lcd_pwr^(0+128),w
  8728  0BFB  00F3               	movwf	uart_wr_str@col
  8729  0BFC  3060               	movlw	low (STR_57| (0+32768))
  8730  0BFD  00F4               	movwf	uart_wr_str@str
  8731  0BFE  30B0               	movlw	high (STR_57| (0+32768))
  8732  0BFF  00F5               	movwf	uart_wr_str@str+1
  8733  0C00  3008               	movlw	8
  8734  0C01  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8735  0C02  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8736  0C03  00F6               	movwf	uart_wr_str@len
  8737  0C04  3002               	movlw	2
  8738  0C05  31AF  2710  318A   	fcall	_uart_wr_str
  8739                           
  8740                           ;main.c: 725:             Delay_ms(500);
  8741  0C08  30F4               	movlw	244
  8742  0C09  00F3               	movwf	Delay_ms@time_in_ms
  8743  0C0A  3001               	movlw	1
  8744  0C0B  00F4               	movwf	Delay_ms@time_in_ms+1
  8745  0C0C  31AC  24FE  318A   	fcall	_Delay_ms
  8746  0C0F  0064               	clrwdt	;# 
  8747                           
  8748                           ;main.c: 727:             uart_wr_str(2, 16, "        ", 8);
  8749  0C10  3010               	movlw	16
  8750  0C11  0021               	movlb	1	; select bank1
  8751  0C12  00E1               	movwf	??_lcd_pwr^(0+128)
  8752  0C13  0861               	movf	??_lcd_pwr^(0+128),w
  8753  0C14  00F3               	movwf	uart_wr_str@col
  8754  0C15  3002               	movlw	low ((STR_28+2)| (0+32768))
  8755  0C16  00F4               	movwf	uart_wr_str@str
  8756  0C17  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8757  0C18  00F5               	movwf	uart_wr_str@str+1
  8758  0C19  3008               	movlw	8
  8759  0C1A  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8760  0C1B  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8761  0C1C  00F6               	movwf	uart_wr_str@len
  8762  0C1D  3002               	movlw	2
  8763  0C1E  31AF  2710  318A   	fcall	_uart_wr_str
  8764                           
  8765                           ;main.c: 728:             Delay_ms(100);
  8766  0C21  3064               	movlw	100
  8767  0C22  00F3               	movwf	Delay_ms@time_in_ms
  8768  0C23  3000               	movlw	0
  8769  0C24  00F4               	movwf	Delay_ms@time_in_ms+1
  8770  0C25  31AC  24FE  318A   	fcall	_Delay_ms
  8771                           
  8772                           ;main.c: 729:             uart_wr_str(2, 16, "SWR=    ", 8);
  8773  0C28  3010               	movlw	16
  8774  0C29  0021               	movlb	1	; select bank1
  8775  0C2A  00E1               	movwf	??_lcd_pwr^(0+128)
  8776  0C2B  0861               	movf	??_lcd_pwr^(0+128),w
  8777  0C2C  00F3               	movwf	uart_wr_str@col
  8778  0C2D  3033               	movlw	low (STR_63| (0+32768))
  8779  0C2E  00F4               	movwf	uart_wr_str@str
  8780  0C2F  30B0               	movlw	high (STR_63| (0+32768))
  8781  0C30  00F5               	movwf	uart_wr_str@str+1
  8782  0C31  3008               	movlw	8
  8783  0C32  00E2               	movwf	(??_lcd_pwr+1)^(0+128)
  8784  0C33  0862               	movf	(??_lcd_pwr+1)^(0+128),w
  8785  0C34  00F6               	movwf	uart_wr_str@len
  8786  0C35  3002               	movlw	2
  8787  0C36  2CDD               	goto	L14
  8788  0C37                     l8464:	
  8789                           ;main.c: 730:         } else if (e_c_ledtype != 0) {
  8790                           
  8791  0C37  082F               	movf	_e_c_ledtype^(0+256),w
  8792  0C38  1903               	btfsc	3,2
  8793  0C39  2CE0               	goto	l674
  8794                           
  8795                           ;main.c: 731:             uart_wr_str(1, 0, "        ", 8);
  8796  0C3A  01F3               	clrf	uart_wr_str@col
  8797  0C3B  3002               	movlw	low ((STR_28+2)| (0+32768))
  8798  0C3C  00F4               	movwf	uart_wr_str@str
  8799  0C3D  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8800  0C3E  00F5               	movwf	uart_wr_str@str+1
  8801  0C3F  3008               	movlw	8
  8802  0C40  0021               	movlb	1	; select bank1
  8803  0C41  00E1               	movwf	??_lcd_pwr^(0+128)
  8804  0C42  0861               	movf	??_lcd_pwr^(0+128),w
  8805  0C43  00F6               	movwf	uart_wr_str@len
  8806  0C44  3001               	movlw	1
  8807  0C45  31AF  2710  318A   	fcall	_uart_wr_str
  8808                           
  8809                           ;main.c: 732:             Delay_ms(100);
  8810  0C48  3064               	movlw	100
  8811  0C49  00F3               	movwf	Delay_ms@time_in_ms
  8812  0C4A  3000               	movlw	0
  8813  0C4B  00F4               	movwf	Delay_ms@time_in_ms+1
  8814  0C4C  31AC  24FE  318A   	fcall	_Delay_ms
  8815                           
  8816                           ;main.c: 733:             uart_wr_str(1, 0, "OVERLOAD", 8);
  8817  0C4F  01F3               	clrf	uart_wr_str@col
  8818  0C50  3060               	movlw	low (STR_57| (0+32768))
  8819  0C51  00F4               	movwf	uart_wr_str@str
  8820  0C52  30B0               	movlw	high (STR_57| (0+32768))
  8821  0C53  00F5               	movwf	uart_wr_str@str+1
  8822  0C54  3008               	movlw	8
  8823  0C55  0021               	movlb	1	; select bank1
  8824  0C56  00E1               	movwf	??_lcd_pwr^(0+128)
  8825  0C57  0861               	movf	??_lcd_pwr^(0+128),w
  8826  0C58  00F6               	movwf	uart_wr_str@len
  8827  0C59  3001               	movlw	1
  8828  0C5A  31AF  2710  318A   	fcall	_uart_wr_str
  8829                           
  8830                           ;main.c: 734:             Delay_ms(500);
  8831  0C5D  30F4               	movlw	244
  8832  0C5E  00F3               	movwf	Delay_ms@time_in_ms
  8833  0C5F  3001               	movlw	1
  8834  0C60  00F4               	movwf	Delay_ms@time_in_ms+1
  8835  0C61  31AC  24FE  318A   	fcall	_Delay_ms
  8836  0C64  0064               	clrwdt	;# 
  8837                           
  8838                           ;main.c: 736:             uart_wr_str(1, 0, "        ", 8);
  8839  0C65  01F3               	clrf	uart_wr_str@col
  8840  0C66  3002               	movlw	low ((STR_28+2)| (0+32768))
  8841  0C67  00F4               	movwf	uart_wr_str@str
  8842  0C68  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8843  0C69  00F5               	movwf	uart_wr_str@str+1
  8844  0C6A  3008               	movlw	8
  8845  0C6B  0021               	movlb	1	; select bank1
  8846  0C6C  00E1               	movwf	??_lcd_pwr^(0+128)
  8847  0C6D  0861               	movf	??_lcd_pwr^(0+128),w
  8848  0C6E  00F6               	movwf	uart_wr_str@len
  8849  0C6F  3001               	movlw	1
  8850  0C70  31AF  2710  318A   	fcall	_uart_wr_str
  8851                           
  8852                           ;main.c: 737:             Delay_ms(300);
  8853  0C73  302C               	movlw	44
  8854  0C74  00F3               	movwf	Delay_ms@time_in_ms
  8855  0C75  3001               	movlw	1
  8856  0C76  00F4               	movwf	Delay_ms@time_in_ms+1
  8857  0C77  31AC  24FE  318A   	fcall	_Delay_ms
  8858  0C7A  0064               	clrwdt	;# 
  8859                           
  8860                           ;main.c: 739:             uart_wr_str(1, 0, "OVERLOAD", 8);
  8861  0C7B  01F3               	clrf	uart_wr_str@col
  8862  0C7C  3060               	movlw	low (STR_57| (0+32768))
  8863  0C7D  00F4               	movwf	uart_wr_str@str
  8864  0C7E  30B0               	movlw	high (STR_57| (0+32768))
  8865  0C7F  00F5               	movwf	uart_wr_str@str+1
  8866  0C80  3008               	movlw	8
  8867  0C81  0021               	movlb	1	; select bank1
  8868  0C82  00E1               	movwf	??_lcd_pwr^(0+128)
  8869  0C83  0861               	movf	??_lcd_pwr^(0+128),w
  8870  0C84  00F6               	movwf	uart_wr_str@len
  8871  0C85  3001               	movlw	1
  8872  0C86  31AF  2710  318A   	fcall	_uart_wr_str
  8873                           
  8874                           ;main.c: 740:             Delay_ms(500);
  8875  0C89  30F4               	movlw	244
  8876  0C8A  00F3               	movwf	Delay_ms@time_in_ms
  8877  0C8B  3001               	movlw	1
  8878  0C8C  00F4               	movwf	Delay_ms@time_in_ms+1
  8879  0C8D  31AC  24FE  318A   	fcall	_Delay_ms
  8880  0C90  0064               	clrwdt	;# 
  8881                           
  8882                           ;main.c: 742:             uart_wr_str(1, 0, "        ", 8);
  8883  0C91  01F3               	clrf	uart_wr_str@col
  8884  0C92  3002               	movlw	low ((STR_28+2)| (0+32768))
  8885  0C93  00F4               	movwf	uart_wr_str@str
  8886  0C94  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8887  0C95  00F5               	movwf	uart_wr_str@str+1
  8888  0C96  3008               	movlw	8
  8889  0C97  0021               	movlb	1	; select bank1
  8890  0C98  00E1               	movwf	??_lcd_pwr^(0+128)
  8891  0C99  0861               	movf	??_lcd_pwr^(0+128),w
  8892  0C9A  00F6               	movwf	uart_wr_str@len
  8893  0C9B  3001               	movlw	1
  8894  0C9C  31AF  2710  318A   	fcall	_uart_wr_str
  8895                           
  8896                           ;main.c: 743:             Delay_ms(300);
  8897  0C9F  302C               	movlw	44
  8898  0CA0  00F3               	movwf	Delay_ms@time_in_ms
  8899  0CA1  3001               	movlw	1
  8900  0CA2  00F4               	movwf	Delay_ms@time_in_ms+1
  8901  0CA3  31AC  24FE  318A   	fcall	_Delay_ms
  8902  0CA6  0064               	clrwdt	;# 
  8903                           
  8904                           ;main.c: 745:             uart_wr_str(1, 0, "OVERLOAD", 8);
  8905  0CA7  01F3               	clrf	uart_wr_str@col
  8906  0CA8  3060               	movlw	low (STR_57| (0+32768))
  8907  0CA9  00F4               	movwf	uart_wr_str@str
  8908  0CAA  30B0               	movlw	high (STR_57| (0+32768))
  8909  0CAB  00F5               	movwf	uart_wr_str@str+1
  8910  0CAC  3008               	movlw	8
  8911  0CAD  0021               	movlb	1	; select bank1
  8912  0CAE  00E1               	movwf	??_lcd_pwr^(0+128)
  8913  0CAF  0861               	movf	??_lcd_pwr^(0+128),w
  8914  0CB0  00F6               	movwf	uart_wr_str@len
  8915  0CB1  3001               	movlw	1
  8916  0CB2  31AF  2710  318A   	fcall	_uart_wr_str
  8917                           
  8918                           ;main.c: 746:             Delay_ms(500);
  8919  0CB5  30F4               	movlw	244
  8920  0CB6  00F3               	movwf	Delay_ms@time_in_ms
  8921  0CB7  3001               	movlw	1
  8922  0CB8  00F4               	movwf	Delay_ms@time_in_ms+1
  8923  0CB9  31AC  24FE  318A   	fcall	_Delay_ms
  8924  0CBC  0064               	clrwdt	;# 
  8925                           
  8926                           ;main.c: 748:             uart_wr_str(1, 0, "        ", 8);
  8927  0CBD  01F3               	clrf	uart_wr_str@col
  8928  0CBE  3002               	movlw	low ((STR_28+2)| (0+32768))
  8929  0CBF  00F4               	movwf	uart_wr_str@str
  8930  0CC0  30B0               	movlw	high ((STR_28+2)| (0+32768))
  8931  0CC1  00F5               	movwf	uart_wr_str@str+1
  8932  0CC2  3008               	movlw	8
  8933  0CC3  0021               	movlb	1	; select bank1
  8934  0CC4  00E1               	movwf	??_lcd_pwr^(0+128)
  8935  0CC5  0861               	movf	??_lcd_pwr^(0+128),w
  8936  0CC6  00F6               	movwf	uart_wr_str@len
  8937  0CC7  3001               	movlw	1
  8938  0CC8  31AF  2710  318A   	fcall	_uart_wr_str
  8939                           
  8940                           ;main.c: 749:             Delay_ms(100);
  8941  0CCB  3064               	movlw	100
  8942  0CCC  00F3               	movwf	Delay_ms@time_in_ms
  8943  0CCD  3000               	movlw	0
  8944  0CCE  00F4               	movwf	Delay_ms@time_in_ms+1
  8945  0CCF  31AC  24FE  318A   	fcall	_Delay_ms
  8946                           
  8947                           ;main.c: 750:             uart_wr_str(1, 0, "SW=     ", 8);
  8948  0CD2  01F3               	clrf	uart_wr_str@col
  8949  0CD3  302A               	movlw	low (STR_71| (0+32768))
  8950  0CD4  00F4               	movwf	uart_wr_str@str
  8951  0CD5  30B0               	movlw	high (STR_71| (0+32768))
  8952  0CD6  00F5               	movwf	uart_wr_str@str+1
  8953  0CD7  3008               	movlw	8
  8954  0CD8  0021               	movlb	1	; select bank1
  8955  0CD9  00E1               	movwf	??_lcd_pwr^(0+128)
  8956  0CDA  0861               	movf	??_lcd_pwr^(0+128),w
  8957  0CDB  00F6               	movwf	uart_wr_str@len
  8958  0CDC  3001               	movlw	1
  8959  0CDD                     L14:
  8960  0CDD  31AF  2710  318A   	fcall	_uart_wr_str
  8961  0CE0                     l674:
  8962  0CE0  0064               	clrwdt	;# 
  8963                           
  8964                           ;main.c: 753:         g_i_SWR_old = 10000;
  8965  0CE1  3010               	movlw	16
  8966  0CE2  0023               	movlb	3	; select bank3
  8967  0CE3  00D4               	movwf	_g_i_SWR_old^(0+384)
  8968  0CE4  3027               	movlw	39
  8969  0CE5  00D5               	movwf	(_g_i_SWR_old^(0+384)+1)
  8970                           
  8971                           ;main.c: 754:         lcd_swr(SWR_fixed);
  8972  0CE6  0021               	movlb	1	; select bank1
  8973  0CE7  086C               	movf	(lcd_pwr@SWR_fixed+1)^(0+128),w
  8974  0CE8  0020               	movlb	0	; select bank0
  8975  0CE9  00AB               	movwf	lcd_swr@swr+1
  8976  0CEA  0021               	movlb	1	; select bank1
  8977  0CEB  086B               	movf	lcd_pwr@SWR_fixed^(0+128),w
  8978  0CEC  0020               	movlb	0	; select bank0
  8979  0CED  00AA               	movwf	lcd_swr@swr
  8980  0CEE  3199  21B9         	fcall	_lcd_swr
  8981  0CF0  0008               	return
  8982  0CF1                     __end_of_lcd_pwr:
  8983                           
  8984                           	psect	text20
  8985  0050                     __ptext20:	
  8986 ;; *************** function _show_pwr *****************
  8987 ;; Defined at:
  8988 ;;		line 520 in file "main.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;  parm_Power      2   29[BANK1 ] int 
  8991 ;;  parm_SWR        2   31[BANK1 ] int 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  a               4   59[BANK1 ] int 
  8994 ;;  b               4   55[BANK1 ] int 
  8995 ;;  p_ant           2   63[BANK1 ] int 
  8996 ;;  eff             2   53[BANK1 ] int 
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9001 ;; Tracked objects:
  9002 ;;		On entry : 1F/1
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9006 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Locals:         0       0      28       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Totals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;Total ram usage:       36 bytes
  9011 ;; Hardware stack levels used: 1
  9012 ;; Hardware stack levels required when called: 5
  9013 ;; This function calls:
  9014 ;;		_IntToStr
  9015 ;;		___fladd
  9016 ;;		___fldiv
  9017 ;;		___flge
  9018 ;;		___flmul
  9019 ;;		___fltol
  9020 ;;		___xxtofl
  9021 ;;		_lcd_ind
  9022 ;;		_uart_wr_str
  9023 ;; This function is called by:
  9024 ;;		_get_swr
  9025 ;;		_lcd_pwr
  9026 ;; This function uses a non-reentrant model
  9027 ;;
  9028                           
  9029  0050                     _show_pwr:	
  9030                           ;psect for function _show_pwr
  9031                           
  9032                           
  9033                           ;incstack = 0
  9034                           ; Regs used in _show_pwr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9035  0050  0064               	clrwdt	;# 
  9036  0051  0022               	movlb	2	; select bank2
  9037  0052  0330               	decf	_e_c_b_Loss_ind^(0+256),w
  9038  0053  1D03               	btfss	3,2
  9039  0054  28FE               	goto	l8086
  9040  0055  0021               	movlb	1	; select bank1
  9041  0056  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9042  0057  3A80               	xorlw	128
  9043  0058  00C1               	movwf	??_show_pwr^(0+128)
  9044  0059  3080               	movlw	128
  9045  005A  0241               	subwf	??_show_pwr^(0+128),w
  9046  005B  1D03               	skipz
  9047  005C  285F               	goto	u11985
  9048  005D  300A               	movlw	10
  9049  005E  023D               	subwf	show_pwr@parm_Power^(0+128),w
  9050  005F                     u11985:
  9051  005F  1C03               	skipc
  9052  0060  28FE               	goto	l8086
  9053                           
  9054                           ;main.c: 527:         if (g_b_Loss_mode == 0) {
  9055  0061  0022               	movlb	2	; select bank2
  9056  0062  082B               	movf	_g_b_Loss_mode^(0+256),w
  9057  0063  1D03               	btfss	3,2
  9058  0064  28FA               	goto	l8084
  9059                           
  9060                           ;main.c: 528:             if (e_c_ledtype == 4 | e_c_ledtype == 5) {
  9061  0065  3004               	movlw	4
  9062  0066  062F               	xorwf	_e_c_ledtype^(0+256),w
  9063  0067  1903               	btfsc	3,2
  9064  0068  286D               	goto	l8060
  9065  0069  3005               	movlw	5
  9066  006A  062F               	xorwf	_e_c_ledtype^(0+256),w
  9067  006B  1D03               	btfss	3,2
  9068  006C  2899               	goto	l8066
  9069  006D                     l8060:
  9070                           
  9071                           ;main.c: 529:                 if (e_c_b_P_High == 1)
  9072  006D  0331               	decf	_e_c_b_P_High^(0+256),w
  9073  006E  1D03               	btfss	3,2
  9074  006F  2879               	goto	l8064
  9075                           
  9076                           ;main.c: 530:                     uart_wr_str(4, 16, "ANT=  0W", 8);
  9077  0070  3010               	movlw	16
  9078  0071  0021               	movlb	1	; select bank1
  9079  0072  00C1               	movwf	??_show_pwr^(0+128)
  9080  0073  0841               	movf	??_show_pwr^(0+128),w
  9081  0074  00F3               	movwf	uart_wr_str@col
  9082  0075  3072               	movlw	low (STR_47| (0+32768))
  9083  0076  00F4               	movwf	uart_wr_str@str
  9084  0077  30B0               	movlw	high (STR_47| (0+32768))
  9085  0078  2881               	goto	L15
  9086  0079                     l8064:
  9087                           
  9088                           ;main.c: 532:                     uart_wr_str(4, 16, "ANT=0.0W", 8);
  9089  0079  3010               	movlw	16
  9090  007A  0021               	movlb	1	; select bank1
  9091  007B  00C1               	movwf	??_show_pwr^(0+128)
  9092  007C  0841               	movf	??_show_pwr^(0+128),w
  9093  007D  00F3               	movwf	uart_wr_str@col
  9094  007E  3084               	movlw	low (STR_48| (0+32768))
  9095  007F  00F4               	movwf	uart_wr_str@str
  9096  0080  30B0               	movlw	high (STR_48| (0+32768))
  9097  0081                     L15:
  9098  0081  00F5               	movwf	uart_wr_str@str+1
  9099  0082  3008               	movlw	8
  9100  0083  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9101  0084  0842               	movf	(??_show_pwr+1)^(0+128),w
  9102  0085  00F6               	movwf	uart_wr_str@len
  9103  0086  3004               	movlw	4
  9104  0087  31AF  2710  3180   	fcall	_uart_wr_str
  9105                           
  9106                           ;main.c: 533:                 uart_wr_str(6, 16, "EFF=  0%", 8);
  9107  008A  3010               	movlw	16
  9108  008B  0021               	movlb	1	; select bank1
  9109  008C  00C1               	movwf	??_show_pwr^(0+128)
  9110  008D  0841               	movf	??_show_pwr^(0+128),w
  9111  008E  00F3               	movwf	uart_wr_str@col
  9112  008F  3045               	movlw	low (STR_49| (0+32768))
  9113  0090  00F4               	movwf	uart_wr_str@str
  9114  0091  30B0               	movlw	high (STR_49| (0+32768))
  9115  0092  00F5               	movwf	uart_wr_str@str+1
  9116  0093  3008               	movlw	8
  9117  0094  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9118  0095  0842               	movf	(??_show_pwr+1)^(0+128),w
  9119  0096  00F6               	movwf	uart_wr_str@len
  9120  0097  3006               	movlw	6
  9121  0098  28F7               	goto	L26
  9122  0099                     l8066:	
  9123                           ;main.c: 534:             } else if (e_c_ledtype == 2 | e_c_ledtype == 3) {
  9124                           
  9125  0099  3002               	movlw	2
  9126  009A  062F               	xorwf	_e_c_ledtype^(0+256),w
  9127  009B  1903               	btfsc	3,2
  9128  009C  28A1               	goto	l8070
  9129  009D  3003               	movlw	3
  9130  009E  062F               	xorwf	_e_c_ledtype^(0+256),w
  9131  009F  1D03               	btfss	3,2
  9132  00A0  28C9               	goto	l8076
  9133  00A1                     l8070:
  9134                           
  9135                           ;main.c: 535:                 if (e_c_b_P_High == 1)
  9136  00A1  0331               	decf	_e_c_b_P_High^(0+256),w
  9137  00A2  1D03               	btfss	3,2
  9138  00A3  28AD               	goto	l8074
  9139                           
  9140                           ;main.c: 536:                     uart_wr_str(0, 9, "ANT=  0W", 8);
  9141  00A4  3009               	movlw	9
  9142  00A5  0021               	movlb	1	; select bank1
  9143  00A6  00C1               	movwf	??_show_pwr^(0+128)
  9144  00A7  0841               	movf	??_show_pwr^(0+128),w
  9145  00A8  00F3               	movwf	uart_wr_str@col
  9146  00A9  3072               	movlw	low (STR_47| (0+32768))
  9147  00AA  00F4               	movwf	uart_wr_str@str
  9148  00AB  30B0               	movlw	high (STR_47| (0+32768))
  9149  00AC  28B5               	goto	L16
  9150  00AD                     l8074:
  9151                           
  9152                           ;main.c: 538:                     uart_wr_str(0, 9, "ANT=0.0W", 8);
  9153  00AD  3009               	movlw	9
  9154  00AE  0021               	movlb	1	; select bank1
  9155  00AF  00C1               	movwf	??_show_pwr^(0+128)
  9156  00B0  0841               	movf	??_show_pwr^(0+128),w
  9157  00B1  00F3               	movwf	uart_wr_str@col
  9158  00B2  3084               	movlw	low (STR_48| (0+32768))
  9159  00B3  00F4               	movwf	uart_wr_str@str
  9160  00B4  30B0               	movlw	high (STR_48| (0+32768))
  9161  00B5                     L16:
  9162  00B5  00F5               	movwf	uart_wr_str@str+1
  9163  00B6  3008               	movlw	8
  9164  00B7  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9165  00B8  0842               	movf	(??_show_pwr+1)^(0+128),w
  9166  00B9  00F6               	movwf	uart_wr_str@len
  9167  00BA  3000               	movlw	0
  9168  00BB  31AF  2710  3180   	fcall	_uart_wr_str
  9169                           
  9170                           ;main.c: 539:                 uart_wr_str(1, 9, "EFF=  0%", 8);
  9171  00BE  3009               	movlw	9
  9172  00BF  0021               	movlb	1	; select bank1
  9173  00C0  00C1               	movwf	??_show_pwr^(0+128)
  9174  00C1  0841               	movf	??_show_pwr^(0+128),w
  9175  00C2  00F3               	movwf	uart_wr_str@col
  9176  00C3  3045               	movlw	low (STR_49| (0+32768))
  9177  00C4  00F4               	movwf	uart_wr_str@str
  9178  00C5  30B0               	movlw	high (STR_49| (0+32768))
  9179  00C6  00F5               	movwf	uart_wr_str@str+1
  9180  00C7  3008               	movlw	8
  9181  00C8  28F3               	goto	L29
  9182  00C9                     l8076:	
  9183                           ;main.c: 540:             } else if (e_c_ledtype == 1) {
  9184                           
  9185  00C9  032F               	decf	_e_c_ledtype^(0+256),w
  9186  00CA  1D03               	btfss	3,2
  9187  00CB  28FA               	goto	l8084
  9188                           
  9189                           ;main.c: 541:                 if (e_c_b_P_High == 1)
  9190  00CC  0331               	decf	_e_c_b_P_High^(0+256),w
  9191  00CD  1D03               	btfss	3,2
  9192  00CE  28D8               	goto	l8082
  9193                           
  9194                           ;main.c: 542:                     uart_wr_str(0, 9, "AN=  0W", 7);
  9195  00CF  3009               	movlw	9
  9196  00D0  0021               	movlb	1	; select bank1
  9197  00D1  00C1               	movwf	??_show_pwr^(0+128)
  9198  00D2  0841               	movf	??_show_pwr^(0+128),w
  9199  00D3  00F3               	movwf	uart_wr_str@col
  9200  00D4  309D               	movlw	low (STR_53| (0+32768))
  9201  00D5  00F4               	movwf	uart_wr_str@str
  9202  00D6  30B0               	movlw	high (STR_53| (0+32768))
  9203  00D7  28E0               	goto	L17
  9204  00D8                     l8082:
  9205                           
  9206                           ;main.c: 544:                     uart_wr_str(0, 9, "AN=0.0W", 7);
  9207  00D8  3009               	movlw	9
  9208  00D9  0021               	movlb	1	; select bank1
  9209  00DA  00C1               	movwf	??_show_pwr^(0+128)
  9210  00DB  0841               	movf	??_show_pwr^(0+128),w
  9211  00DC  00F3               	movwf	uart_wr_str@col
  9212  00DD  30A5               	movlw	low (STR_54| (0+32768))
  9213  00DE  00F4               	movwf	uart_wr_str@str
  9214  00DF  30B0               	movlw	high (STR_54| (0+32768))
  9215  00E0                     L17:
  9216  00E0  00F5               	movwf	uart_wr_str@str+1
  9217  00E1  3007               	movlw	7
  9218  00E2  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9219  00E3  0842               	movf	(??_show_pwr+1)^(0+128),w
  9220  00E4  00F6               	movwf	uart_wr_str@len
  9221  00E5  3000               	movlw	0
  9222  00E6  31AF  2710  3180   	fcall	_uart_wr_str
  9223                           
  9224                           ;main.c: 545:                 uart_wr_str(1, 9, "EFF= 0%", 7);
  9225  00E9  3009               	movlw	9
  9226  00EA  0021               	movlb	1	; select bank1
  9227  00EB  00C1               	movwf	??_show_pwr^(0+128)
  9228  00EC  0841               	movf	??_show_pwr^(0+128),w
  9229  00ED  00F3               	movwf	uart_wr_str@col
  9230  00EE  308D               	movlw	low (STR_55| (0+32768))
  9231  00EF  00F4               	movwf	uart_wr_str@str
  9232  00F0  30B0               	movlw	high (STR_55| (0+32768))
  9233  00F1  00F5               	movwf	uart_wr_str@str+1
  9234  00F2  3007               	movlw	7
  9235  00F3                     L29:
  9236  00F3  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9237  00F4  0842               	movf	(??_show_pwr+1)^(0+128),w
  9238  00F5  00F6               	movwf	uart_wr_str@len
  9239  00F6  3001               	movlw	1
  9240  00F7                     L26:
  9241  00F7  31AF  2710  3180   	fcall	_uart_wr_str
  9242  00FA                     l8084:
  9243                           
  9244                           ;main.c: 548:         g_b_Loss_mode = 1;
  9245  00FA  0022               	movlb	2	; select bank2
  9246  00FB  01AB               	clrf	_g_b_Loss_mode^(0+256)
  9247  00FC  0AAB               	incf	_g_b_Loss_mode^(0+256),f
  9248                           
  9249                           ;main.c: 549:     } else {
  9250  00FD  2907               	goto	l607
  9251  00FE                     l8086:
  9252                           
  9253                           ;main.c: 550:         if (g_b_Loss_mode == 1)
  9254  00FE  0022               	movlb	2	; select bank2
  9255  00FF  032B               	decf	_g_b_Loss_mode^(0+256),w
  9256  0100  1D03               	btfss	3,2
  9257  0101  2905               	goto	l8090
  9258                           
  9259                           ;main.c: 551:             lcd_ind();
  9260  0102  3195  2597  3180   	fcall	_lcd_ind
  9261  0105                     l8090:
  9262                           
  9263                           ;main.c: 552:         g_b_Loss_mode = 0;
  9264  0105  0022               	movlb	2	; select bank2
  9265  0106  01AB               	clrf	_g_b_Loss_mode^(0+256)
  9266  0107                     l607:	
  9267                           ;main.c: 553:     }
  9268                           
  9269  0107  0064               	clrwdt	;# 
  9270                           
  9271                           ;main.c: 555:     if (parm_Power != g_i_Power_old) {
  9272  0108  0023               	movlb	3	; select bank3
  9273  0109  0857               	movf	(_g_i_Power_old+1)^(0+384),w
  9274  010A  0021               	movlb	1	; select bank1
  9275  010B  063E               	xorwf	(show_pwr@parm_Power+1)^(0+128),w
  9276  010C  1D03               	skipz
  9277  010D  2912               	goto	u12095
  9278  010E  0023               	movlb	3	; select bank3
  9279  010F  0856               	movf	_g_i_Power_old^(0+384),w
  9280  0110  0021               	movlb	1	; select bank1
  9281  0111  063D               	xorwf	show_pwr@parm_Power^(0+128),w
  9282  0112                     u12095:
  9283  0112  1903               	skipnz
  9284  0113  2E45               	goto	l609
  9285                           
  9286                           ;main.c: 556:         g_i_Power_old = parm_Power;
  9287  0114  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9288  0115  0023               	movlb	3	; select bank3
  9289  0116  00D7               	movwf	(_g_i_Power_old+1)^(0+384)
  9290  0117  0021               	movlb	1	; select bank1
  9291  0118  083D               	movf	show_pwr@parm_Power^(0+128),w
  9292  0119  0023               	movlb	3	; select bank3
  9293  011A  00D6               	movwf	_g_i_Power_old^(0+384)
  9294                           
  9295                           ;main.c: 558:         if (e_c_b_P_High == 0) {
  9296  011B  0022               	movlb	2	; select bank2
  9297  011C  0831               	movf	_e_c_b_P_High^(0+256),w
  9298  011D  1D03               	btfss	3,2
  9299  011E  2981               	goto	l8126
  9300                           
  9301                           ;main.c: 559:             if (parm_Power >= 100) {
  9302  011F  0021               	movlb	1	; select bank1
  9303  0120  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9304  0121  3A80               	xorlw	128
  9305  0122  00C1               	movwf	??_show_pwr^(0+128)
  9306  0123  3080               	movlw	128
  9307  0124  0241               	subwf	??_show_pwr^(0+128),w
  9308  0125  1D03               	skipz
  9309  0126  2929               	goto	u12115
  9310  0127  3064               	movlw	100
  9311  0128  023D               	subwf	show_pwr@parm_Power^(0+128),w
  9312  0129                     u12115:
  9313  0129  1C03               	skipc
  9314  012A  2955               	goto	l8112
  9315                           
  9316                           ;main.c: 560:                 parm_Power += 5;
  9317  012B  3005               	movlw	5
  9318  012C  0021               	movlb	1	; select bank1
  9319  012D  07BD               	addwf	show_pwr@parm_Power^(0+128),f
  9320  012E  3000               	movlw	0
  9321  012F  3DBE               	addwfc	(show_pwr@parm_Power+1)^(0+128),f
  9322                           
  9323                           ;main.c: 561:                 IntToStr(parm_Power, g_work_str);
  9324  0130  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9325  0131  0020               	movlb	0	; select bank0
  9326  0132  00A5               	movwf	IntToStr@number+1
  9327  0133  0021               	movlb	1	; select bank1
  9328  0134  083D               	movf	show_pwr@parm_Power^(0+128),w
  9329  0135  0020               	movlb	0	; select bank0
  9330  0136  00A4               	movwf	IntToStr@number
  9331  0137  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
  9332  0138  0021               	movlb	1	; select bank1
  9333  0139  00C1               	movwf	??_show_pwr^(0+128)
  9334  013A  0841               	movf	??_show_pwr^(0+128),w
  9335  013B  0020               	movlb	0	; select bank0
  9336  013C  00A6               	movwf	IntToStr@output
  9337  013D  31A1  21B9  3180   	fcall	_IntToStr
  9338                           
  9339                           ;main.c: 562:                 g_work_str_2[0] = g_work_str[2];
  9340  0140  0022               	movlb	2	; select bank2
  9341  0141  0846               	movf	(_g_work_str^(0+256)+2),w
  9342  0142  0021               	movlb	1	; select bank1
  9343  0143  00C1               	movwf	??_show_pwr^(0+128)
  9344  0144  0841               	movf	??_show_pwr^(0+128),w
  9345  0145  0022               	movlb	2	; select bank2
  9346  0146  00BD               	movwf	_g_work_str_2^(0+256)
  9347                           
  9348                           ;main.c: 563:                 g_work_str_2[1] = g_work_str[3];
  9349  0147  0847               	movf	(_g_work_str^(0+256)+3),w
  9350  0148  0021               	movlb	1	; select bank1
  9351  0149  00C1               	movwf	??_show_pwr^(0+128)
  9352  014A  0841               	movf	??_show_pwr^(0+128),w
  9353  014B  0022               	movlb	2	; select bank2
  9354  014C  00BE               	movwf	(_g_work_str_2^(0+256)+1)
  9355                           
  9356                           ;main.c: 564:                 g_work_str_2[2] = g_work_str[4];
  9357  014D  0848               	movf	(_g_work_str^(0+256)+4),w
  9358  014E                     L20:
  9359  014E  0021               	movlb	1	; select bank1
  9360  014F  00C1               	movwf	??_show_pwr^(0+128)
  9361  0150  0841               	movf	??_show_pwr^(0+128),w
  9362  0151  0022               	movlb	2	; select bank2
  9363  0152  00BF               	movwf	(_g_work_str_2^(0+256)+2)
  9364                           
  9365                           ;main.c: 565:                 g_work_str_2[3] = 'W';
  9366  0153  3057               	movlw	87
  9367  0154  29D1               	goto	L18
  9368  0155                     l8112:	
  9369                           ;main.c: 566:             } else {
  9370                           
  9371                           
  9372                           ;main.c: 567:                 IntToStr(parm_Power, g_work_str);
  9373  0155  0021               	movlb	1	; select bank1
  9374  0156  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9375  0157  0020               	movlb	0	; select bank0
  9376  0158  00A5               	movwf	IntToStr@number+1
  9377  0159  0021               	movlb	1	; select bank1
  9378  015A  083D               	movf	show_pwr@parm_Power^(0+128),w
  9379  015B  0020               	movlb	0	; select bank0
  9380  015C  00A4               	movwf	IntToStr@number
  9381  015D  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
  9382  015E  0021               	movlb	1	; select bank1
  9383  015F  00C1               	movwf	??_show_pwr^(0+128)
  9384  0160  0841               	movf	??_show_pwr^(0+128),w
  9385  0161  0020               	movlb	0	; select bank0
  9386  0162  00A6               	movwf	IntToStr@output
  9387  0163  31A1  21B9  3180   	fcall	_IntToStr
  9388                           
  9389                           ;main.c: 568:                 if (g_work_str[4] != ' ')
  9390  0166  3020               	movlw	32
  9391  0167  0022               	movlb	2	; select bank2
  9392  0168  0648               	xorwf	(_g_work_str^(0+256)+4),w
  9393  0169  1903               	btfsc	3,2
  9394  016A  296D               	goto	l8118
  9395                           
  9396                           ;main.c: 569:                     g_work_str_2[0] = g_work_str[4];
  9397  016B  0848               	movf	(_g_work_str^(0+256)+4),w
  9398  016C  296E               	goto	L19
  9399  016D                     l8118:
  9400                           
  9401                           ;main.c: 571:                     g_work_str_2[0] = '0';
  9402  016D  3030               	movlw	48
  9403  016E                     L19:
  9404  016E  0021               	movlb	1	; select bank1
  9405  016F  00C1               	movwf	??_show_pwr^(0+128)
  9406  0170  0841               	movf	??_show_pwr^(0+128),w
  9407  0171  0022               	movlb	2	; select bank2
  9408  0172  00BD               	movwf	_g_work_str_2^(0+256)
  9409                           
  9410                           ;main.c: 572:                 g_work_str_2[1] = '.';
  9411  0173  302E               	movlw	46
  9412  0174  0021               	movlb	1	; select bank1
  9413  0175  00C1               	movwf	??_show_pwr^(0+128)
  9414  0176  0841               	movf	??_show_pwr^(0+128),w
  9415  0177  0022               	movlb	2	; select bank2
  9416  0178  00BE               	movwf	(_g_work_str_2^(0+256)+1)
  9417                           
  9418                           ;main.c: 573:                 if (g_work_str[5] != ' ')
  9419  0179  3020               	movlw	32
  9420  017A  0649               	xorwf	(_g_work_str^(0+256)+5),w
  9421  017B  1903               	btfsc	3,2
  9422  017C  297F               	goto	l8124
  9423  017D                     l8122:
  9424                           
  9425                           ;main.c: 574:                     g_work_str_2[2] = g_work_str[5];
  9426  017D  0849               	movf	(_g_work_str^(0+256)+5),w
  9427  017E  294E               	goto	L20
  9428  017F                     l8124:
  9429                           
  9430                           ;main.c: 576:                     g_work_str_2[2] = '0';
  9431  017F  3030               	movlw	48
  9432  0180  294E               	goto	L20
  9433  0181                     l8126:
  9434                           
  9435                           ;main.c: 580:             if (parm_Power < 999) {
  9436  0181  0021               	movlb	1	; select bank1
  9437  0182  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9438  0183  3A80               	xorlw	128
  9439  0184  00C1               	movwf	??_show_pwr^(0+128)
  9440  0185  3083               	movlw	131
  9441  0186  0241               	subwf	??_show_pwr^(0+128),w
  9442  0187  1D03               	skipz
  9443  0188  298B               	goto	u12145
  9444  0189  30E7               	movlw	231
  9445  018A  023D               	subwf	show_pwr@parm_Power^(0+128),w
  9446  018B                     u12145:
  9447  018B  1803               	skipnc
  9448  018C  29AC               	goto	l8138
  9449                           
  9450                           ;main.c: 581:                 IntToStr(parm_Power, g_work_str);
  9451  018D  0021               	movlb	1	; select bank1
  9452  018E  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9453  018F  0020               	movlb	0	; select bank0
  9454  0190  00A5               	movwf	IntToStr@number+1
  9455  0191  0021               	movlb	1	; select bank1
  9456  0192  083D               	movf	show_pwr@parm_Power^(0+128),w
  9457  0193  0020               	movlb	0	; select bank0
  9458  0194  00A4               	movwf	IntToStr@number
  9459  0195  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
  9460  0196  0021               	movlb	1	; select bank1
  9461  0197  00C1               	movwf	??_show_pwr^(0+128)
  9462  0198  0841               	movf	??_show_pwr^(0+128),w
  9463  0199  0020               	movlb	0	; select bank0
  9464  019A  00A6               	movwf	IntToStr@output
  9465  019B  31A1  21B9  3180   	fcall	_IntToStr
  9466                           
  9467                           ;main.c: 582:                 g_work_str_2[0] = g_work_str[3];
  9468  019E  0022               	movlb	2	; select bank2
  9469  019F  0847               	movf	(_g_work_str^(0+256)+3),w
  9470  01A0  0021               	movlb	1	; select bank1
  9471  01A1  00C1               	movwf	??_show_pwr^(0+128)
  9472  01A2  0841               	movf	??_show_pwr^(0+128),w
  9473  01A3  0022               	movlb	2	; select bank2
  9474  01A4  00BD               	movwf	_g_work_str_2^(0+256)
  9475                           
  9476                           ;main.c: 583:                 g_work_str_2[1] = g_work_str[4];
  9477  01A5  0848               	movf	(_g_work_str^(0+256)+4),w
  9478  01A6  0021               	movlb	1	; select bank1
  9479  01A7  00C1               	movwf	??_show_pwr^(0+128)
  9480  01A8  0841               	movf	??_show_pwr^(0+128),w
  9481  01A9  0022               	movlb	2	; select bank2
  9482  01AA  00BE               	movwf	(_g_work_str_2^(0+256)+1)
  9483  01AB  297D               	goto	l8122
  9484  01AC                     l8138:
  9485                           
  9486                           ;main.c: 587:                 IntToStr(parm_Power, g_work_str);
  9487  01AC  0021               	movlb	1	; select bank1
  9488  01AD  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
  9489  01AE  0020               	movlb	0	; select bank0
  9490  01AF  00A5               	movwf	IntToStr@number+1
  9491  01B0  0021               	movlb	1	; select bank1
  9492  01B1  083D               	movf	show_pwr@parm_Power^(0+128),w
  9493  01B2  0020               	movlb	0	; select bank0
  9494  01B3  00A4               	movwf	IntToStr@number
  9495  01B4  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
  9496  01B5  0021               	movlb	1	; select bank1
  9497  01B6  00C1               	movwf	??_show_pwr^(0+128)
  9498  01B7  0841               	movf	??_show_pwr^(0+128),w
  9499  01B8  0020               	movlb	0	; select bank0
  9500  01B9  00A6               	movwf	IntToStr@output
  9501  01BA  31A1  21B9  3180   	fcall	_IntToStr
  9502                           
  9503                           ;main.c: 588:                 g_work_str_2[0] = g_work_str[2];
  9504  01BD  0022               	movlb	2	; select bank2
  9505  01BE  0846               	movf	(_g_work_str^(0+256)+2),w
  9506  01BF  0021               	movlb	1	; select bank1
  9507  01C0  00C1               	movwf	??_show_pwr^(0+128)
  9508  01C1  0841               	movf	??_show_pwr^(0+128),w
  9509  01C2  0022               	movlb	2	; select bank2
  9510  01C3  00BD               	movwf	_g_work_str_2^(0+256)
  9511                           
  9512                           ;main.c: 589:                 g_work_str_2[1] = g_work_str[3];
  9513  01C4  0847               	movf	(_g_work_str^(0+256)+3),w
  9514  01C5  0021               	movlb	1	; select bank1
  9515  01C6  00C1               	movwf	??_show_pwr^(0+128)
  9516  01C7  0841               	movf	??_show_pwr^(0+128),w
  9517  01C8  0022               	movlb	2	; select bank2
  9518  01C9  00BE               	movwf	(_g_work_str_2^(0+256)+1)
  9519                           
  9520                           ;main.c: 590:                 g_work_str_2[2] = g_work_str[4];
  9521  01CA  0848               	movf	(_g_work_str^(0+256)+4),w
  9522  01CB  0021               	movlb	1	; select bank1
  9523  01CC  00C1               	movwf	??_show_pwr^(0+128)
  9524  01CD  0841               	movf	??_show_pwr^(0+128),w
  9525  01CE  0022               	movlb	2	; select bank2
  9526  01CF  00BF               	movwf	(_g_work_str_2^(0+256)+2)
  9527                           
  9528                           ;main.c: 591:                 g_work_str_2[3] = g_work_str[5];
  9529  01D0  0849               	movf	(_g_work_str^(0+256)+5),w
  9530  01D1                     L18:
  9531  01D1  0021               	movlb	1	; select bank1
  9532  01D2  00C1               	movwf	??_show_pwr^(0+128)
  9533  01D3  0841               	movf	??_show_pwr^(0+128),w
  9534  01D4  0022               	movlb	2	; select bank2
  9535  01D5  00C0               	movwf	(_g_work_str_2^(0+256)+3)
  9536                           
  9537                           ;main.c: 594:         if (e_c_ledtype == 4 | e_c_ledtype == 5)
  9538  01D6  3004               	movlw	4
  9539  01D7  062F               	xorwf	_e_c_ledtype^(0+256),w
  9540  01D8  1903               	btfsc	3,2
  9541  01D9  29DE               	goto	l8152
  9542  01DA  3005               	movlw	5
  9543  01DB  062F               	xorwf	_e_c_ledtype^(0+256),w
  9544  01DC  1D03               	btfss	3,2
  9545  01DD  29E0               	goto	l8154
  9546  01DE                     l8152:
  9547                           
  9548                           ;main.c: 595:             uart_wr_str(0, 16 + 4 * 12, g_work_str_2, 4);
  9549  01DE  3040               	movlw	64
  9550  01DF  29E4               	goto	L21
  9551  01E0                     l8154:
  9552  01E0  082F               	movf	_e_c_ledtype^(0+256),w
  9553  01E1  1903               	btfsc	3,2
  9554  01E2  29F4               	goto	l623
  9555                           
  9556                           ;main.c: 597:             uart_wr_str(0, 4, g_work_str_2, 4);
  9557  01E3  3004               	movlw	4
  9558  01E4                     L21:
  9559  01E4  0021               	movlb	1	; select bank1
  9560  01E5  00C1               	movwf	??_show_pwr^(0+128)
  9561  01E6  0841               	movf	??_show_pwr^(0+128),w
  9562  01E7  00F3               	movwf	uart_wr_str@col
  9563  01E8  303D               	movlw	low _g_work_str_2
  9564  01E9  00F4               	movwf	uart_wr_str@str
  9565  01EA  3001               	movlw	high _g_work_str_2
  9566  01EB  00F5               	movwf	uart_wr_str@str+1
  9567  01EC  3004               	movlw	4
  9568  01ED  00C2               	movwf	(??_show_pwr+1)^(0+128)
  9569  01EE  0842               	movf	(??_show_pwr+1)^(0+128),w
  9570  01EF  00F6               	movwf	uart_wr_str@len
  9571  01F0  3000               	movlw	0
  9572  01F1  31AF  2710  3180   	fcall	_uart_wr_str
  9573  01F4                     l623:
  9574  01F4  0064               	clrwdt	;# 
  9575                           
  9576                           ;main.c: 601:         if (g_b_Loss_mode == 1) {
  9577  01F5  0022               	movlb	2	; select bank2
  9578  01F6  032B               	decf	_g_b_Loss_mode^(0+256),w
  9579  01F7  1D03               	btfss	3,2
  9580  01F8  2E45               	goto	l609
  9581                           
  9582                           ;main.c: 602:             if (g_c_ind == 0 & g_c_cap == 0)
  9583  01F9  083C               	movf	_g_c_ind^(0+256),w
  9584  01FA  1D03               	btfss	3,2
  9585  01FB  2A07               	goto	l8166
  9586  01FC  087A               	movf	_g_c_cap,w
  9587  01FD  1D03               	btfss	3,2
  9588  01FE  2A07               	goto	l8166
  9589                           
  9590                           ;main.c: 603:                 g_i_swr_a = parm_SWR;
  9591  01FF  0021               	movlb	1	; select bank1
  9592  0200  0840               	movf	(show_pwr@parm_SWR+1)^(0+128),w
  9593  0201  0022               	movlb	2	; select bank2
  9594  0202  00CC               	movwf	(_g_i_swr_a+1)^(0+256)
  9595  0203  0021               	movlb	1	; select bank1
  9596  0204  083F               	movf	show_pwr@parm_SWR^(0+128),w
  9597  0205  0022               	movlb	2	; select bank2
  9598  0206  00CB               	movwf	_g_i_swr_a^(0+256)
  9599  0207                     l8166:
  9600                           
  9601                           ;main.c: 604:             a = 1.0 / ((g_i_swr_a / 100.0 + 100.0 / g_i_swr_a) * e_c_tenth
      +                          s_Fid_loss / 10.0 * 0.115 + 1.0);
  9602  0207  0832               	movf	_e_c_tenths_Fid_loss^(0+256),w
  9603  0208  0021               	movlb	1	; select bank1
  9604  0209  00C1               	movwf	??_show_pwr^(0+128)
  9605  020A  01C2               	clrf	(??_show_pwr^(0+128)+1)
  9606  020B  01C3               	clrf	(??_show_pwr^(0+128)+2)
  9607  020C  01C4               	clrf	(??_show_pwr^(0+128)+3)
  9608  020D  0844               	movf	(??_show_pwr+3)^(0+128),w
  9609  020E  0020               	movlb	0	; select bank0
  9610  020F  00AF               	movwf	___xxtofl@val+3
  9611  0210  0021               	movlb	1	; select bank1
  9612  0211  0843               	movf	(??_show_pwr+2)^(0+128),w
  9613  0212  0020               	movlb	0	; select bank0
  9614  0213  00AE               	movwf	___xxtofl@val+2
  9615  0214  0021               	movlb	1	; select bank1
  9616  0215  0842               	movf	(??_show_pwr+1)^(0+128),w
  9617  0216  0020               	movlb	0	; select bank0
  9618  0217  00AD               	movwf	___xxtofl@val+1
  9619  0218  0021               	movlb	1	; select bank1
  9620  0219  0841               	movf	??_show_pwr^(0+128),w
  9621  021A  0020               	movlb	0	; select bank0
  9622  021B  00AC               	movwf	___xxtofl@val
  9623  021C  3001               	movlw	1
  9624  021D  31A3  234F  3180   	fcall	___xxtofl
  9625  0220  082F               	movf	?___xxtofl+3,w
  9626  0221  00EB               	movwf	___flmul@b+3
  9627  0222  082E               	movf	?___xxtofl+2,w
  9628  0223  00EA               	movwf	___flmul@b+2
  9629  0224  082D               	movf	?___xxtofl+1,w
  9630  0225  00E9               	movwf	___flmul@b+1
  9631  0226  082C               	movf	?___xxtofl,w
  9632  0227  00E8               	movwf	___flmul@b
  9633  0228  0022               	movlb	2	; select bank2
  9634  0229  084B               	movf	_g_i_swr_a^(0+256),w
  9635  022A  0020               	movlb	0	; select bank0
  9636  022B  00AC               	movwf	___xxtofl@val
  9637  022C  0022               	movlb	2	; select bank2
  9638  022D  084C               	movf	(_g_i_swr_a+1)^(0+256),w
  9639  022E  0020               	movlb	0	; select bank0
  9640  022F  00AD               	movwf	___xxtofl@val+1
  9641  0230  0D89               	rlf	9,f
  9642  0231  3B89               	subwfb	9,f
  9643  0232  0989               	comf	9,f
  9644  0233  00AE               	movwf	___xxtofl@val+2
  9645  0234  00AF               	movwf	___xxtofl@val+3
  9646  0235  3001               	movlw	1
  9647  0236  31A3  234F  3180   	fcall	___xxtofl
  9648  0239  082F               	movf	?___xxtofl+3,w
  9649  023A  00BD               	movwf	___fldiv@a+3
  9650  023B  082E               	movf	?___xxtofl+2,w
  9651  023C  00BC               	movwf	___fldiv@a+2
  9652  023D  082D               	movf	?___xxtofl+1,w
  9653  023E  00BB               	movwf	___fldiv@a+1
  9654  023F  082C               	movf	?___xxtofl,w
  9655  0240  00BA               	movwf	___fldiv@a
  9656  0241  3042               	movlw	66
  9657  0242  00C1               	movwf	___fldiv@b+3
  9658  0243  30C8               	movlw	200
  9659  0244  00C0               	movwf	___fldiv@b+2
  9660  0245  3000               	movlw	0
  9661  0246  00BF               	movwf	___fldiv@b+1
  9662  0247  3000               	movlw	0
  9663  0248  00BE               	movwf	___fldiv@b
  9664  0249  319E  2687  3180   	fcall	___fldiv
  9665  024C  083D               	movf	?___fldiv+3,w
  9666  024D  00D7               	movwf	___fladd@b+3
  9667  024E  083C               	movf	?___fldiv+2,w
  9668  024F  00D6               	movwf	___fladd@b+2
  9669  0250  083B               	movf	?___fldiv+1,w
  9670  0251  00D5               	movwf	___fladd@b+1
  9671  0252  083A               	movf	?___fldiv,w
  9672  0253  00D4               	movwf	___fladd@b
  9673  0254  3042               	movlw	66
  9674  0255  00BD               	movwf	___fldiv@a+3
  9675  0256  30C8               	movlw	200
  9676  0257  00BC               	movwf	___fldiv@a+2
  9677  0258  3000               	movlw	0
  9678  0259  00BB               	movwf	___fldiv@a+1
  9679  025A  3000               	movlw	0
  9680  025B  00BA               	movwf	___fldiv@a
  9681  025C  0022               	movlb	2	; select bank2
  9682  025D  084B               	movf	_g_i_swr_a^(0+256),w
  9683  025E  0020               	movlb	0	; select bank0
  9684  025F  00AC               	movwf	___xxtofl@val
  9685  0260  0022               	movlb	2	; select bank2
  9686  0261  084C               	movf	(_g_i_swr_a+1)^(0+256),w
  9687  0262  0020               	movlb	0	; select bank0
  9688  0263  00AD               	movwf	___xxtofl@val+1
  9689  0264  0D89               	rlf	9,f
  9690  0265  3B89               	subwfb	9,f
  9691  0266  0989               	comf	9,f
  9692  0267  00AE               	movwf	___xxtofl@val+2
  9693  0268  00AF               	movwf	___xxtofl@val+3
  9694  0269  3001               	movlw	1
  9695  026A  31A3  234F  3180   	fcall	___xxtofl
  9696  026D  082F               	movf	?___xxtofl+3,w
  9697  026E  00C1               	movwf	___fldiv@b+3
  9698  026F  082E               	movf	?___xxtofl+2,w
  9699  0270  00C0               	movwf	___fldiv@b+2
  9700  0271  082D               	movf	?___xxtofl+1,w
  9701  0272  00BF               	movwf	___fldiv@b+1
  9702  0273  082C               	movf	?___xxtofl,w
  9703  0274  00BE               	movwf	___fldiv@b
  9704  0275  319E  2687  3180   	fcall	___fldiv
  9705  0278  083D               	movf	?___fldiv+3,w
  9706  0279  00DB               	movwf	___fladd@a+3
  9707  027A  083C               	movf	?___fldiv+2,w
  9708  027B  00DA               	movwf	___fladd@a+2
  9709  027C  083B               	movf	?___fldiv+1,w
  9710  027D  00D9               	movwf	___fladd@a+1
  9711  027E  083A               	movf	?___fldiv,w
  9712  027F  00D8               	movwf	___fladd@a
  9713  0280  3191  215D  3180   	fcall	___fladd
  9714  0283  0857               	movf	?___fladd+3,w
  9715  0284  00EF               	movwf	___flmul@a+3
  9716  0285  0856               	movf	?___fladd+2,w
  9717  0286  00EE               	movwf	___flmul@a+2
  9718  0287  0855               	movf	?___fladd+1,w
  9719  0288  00ED               	movwf	___flmul@a+1
  9720  0289  0854               	movf	?___fladd,w
  9721  028A  00EC               	movwf	___flmul@a
  9722  028B  3193  233E  3180   	fcall	___flmul
  9723  028E  086B               	movf	?___flmul+3,w
  9724  028F  0021               	movlb	1	; select bank1
  9725  0290  00C8               	movwf	(_show_pwr$1913+3)^(0+128)
  9726  0291  0020               	movlb	0	; select bank0
  9727  0292  086A               	movf	?___flmul+2,w
  9728  0293  0021               	movlb	1	; select bank1
  9729  0294  00C7               	movwf	(_show_pwr$1913+2)^(0+128)
  9730  0295  0020               	movlb	0	; select bank0
  9731  0296  0869               	movf	?___flmul+1,w
  9732  0297  0021               	movlb	1	; select bank1
  9733  0298  00C6               	movwf	(_show_pwr$1913+1)^(0+128)
  9734  0299  0020               	movlb	0	; select bank0
  9735  029A  0868               	movf	?___flmul,w
  9736  029B  0021               	movlb	1	; select bank1
  9737  029C  00C5               	movwf	_show_pwr$1913^(0+128)
  9738                           
  9739                           ;main.c: 604:             a = 1.0 / ((g_i_swr_a / 100.0 + 100.0 / g_i_swr_a) * e_c_tenth
      +                          s_Fid_loss / 10.0 * 0.115 + 1.0);
  9740  029D  303F               	movlw	63
  9741  029E  0020               	movlb	0	; select bank0
  9742  029F  00D7               	movwf	___fladd@b+3
  9743  02A0  3080               	movlw	128
  9744  02A1  00D6               	movwf	___fladd@b+2
  9745  02A2  3000               	movlw	0
  9746  02A3  00D5               	movwf	___fladd@b+1
  9747  02A4  3000               	movlw	0
  9748  02A5  00D4               	movwf	___fladd@b
  9749  02A6  303D               	movlw	61
  9750  02A7  00EB               	movwf	___flmul@b+3
  9751  02A8  30EB               	movlw	235
  9752  02A9  00EA               	movwf	___flmul@b+2
  9753  02AA  3085               	movlw	133
  9754  02AB  00E9               	movwf	___flmul@b+1
  9755  02AC  301F               	movlw	31
  9756  02AD  00E8               	movwf	___flmul@b
  9757  02AE  3041               	movlw	65
  9758  02AF  00BD               	movwf	___fldiv@a+3
  9759  02B0  3020               	movlw	32
  9760  02B1  00BC               	movwf	___fldiv@a+2
  9761  02B2  3000               	movlw	0
  9762  02B3  00BB               	movwf	___fldiv@a+1
  9763  02B4  3000               	movlw	0
  9764  02B5  00BA               	movwf	___fldiv@a
  9765  02B6  0021               	movlb	1	; select bank1
  9766  02B7  0848               	movf	(_show_pwr$1913+3)^(0+128),w
  9767  02B8  0020               	movlb	0	; select bank0
  9768  02B9  00C1               	movwf	___fldiv@b+3
  9769  02BA  0021               	movlb	1	; select bank1
  9770  02BB  0847               	movf	(_show_pwr$1913+2)^(0+128),w
  9771  02BC  0020               	movlb	0	; select bank0
  9772  02BD  00C0               	movwf	___fldiv@b+2
  9773  02BE  0021               	movlb	1	; select bank1
  9774  02BF  0846               	movf	(_show_pwr$1913+1)^(0+128),w
  9775  02C0  0020               	movlb	0	; select bank0
  9776  02C1  00BF               	movwf	___fldiv@b+1
  9777  02C2  0021               	movlb	1	; select bank1
  9778  02C3  0845               	movf	_show_pwr$1913^(0+128),w
  9779  02C4  0020               	movlb	0	; select bank0
  9780  02C5  00BE               	movwf	___fldiv@b
  9781  02C6  319E  2687  3180   	fcall	___fldiv
  9782  02C9  083D               	movf	?___fldiv+3,w
  9783  02CA  00EF               	movwf	___flmul@a+3
  9784  02CB  083C               	movf	?___fldiv+2,w
  9785  02CC  00EE               	movwf	___flmul@a+2
  9786  02CD  083B               	movf	?___fldiv+1,w
  9787  02CE  00ED               	movwf	___flmul@a+1
  9788  02CF  083A               	movf	?___fldiv,w
  9789  02D0  00EC               	movwf	___flmul@a
  9790  02D1  3193  233E  3180   	fcall	___flmul
  9791  02D4  086B               	movf	?___flmul+3,w
  9792  02D5  00DB               	movwf	___fladd@a+3
  9793  02D6  086A               	movf	?___flmul+2,w
  9794  02D7  00DA               	movwf	___fladd@a+2
  9795  02D8  0869               	movf	?___flmul+1,w
  9796  02D9  00D9               	movwf	___fladd@a+1
  9797  02DA  0868               	movf	?___flmul,w
  9798  02DB  00D8               	movwf	___fladd@a
  9799  02DC  3191  215D  3180   	fcall	___fladd
  9800  02DF  0857               	movf	?___fladd+3,w
  9801  02E0  0021               	movlb	1	; select bank1
  9802  02E1  00D0               	movwf	(_show_pwr$1914+3)^(0+128)
  9803  02E2  0020               	movlb	0	; select bank0
  9804  02E3  0856               	movf	?___fladd+2,w
  9805  02E4  0021               	movlb	1	; select bank1
  9806  02E5  00CF               	movwf	(_show_pwr$1914+2)^(0+128)
  9807  02E6  0020               	movlb	0	; select bank0
  9808  02E7  0855               	movf	?___fladd+1,w
  9809  02E8  0021               	movlb	1	; select bank1
  9810  02E9  00CE               	movwf	(_show_pwr$1914+1)^(0+128)
  9811  02EA  0020               	movlb	0	; select bank0
  9812  02EB  0854               	movf	?___fladd,w
  9813  02EC  0021               	movlb	1	; select bank1
  9814  02ED  00CD               	movwf	_show_pwr$1914^(0+128)
  9815                           
  9816                           ;main.c: 604:             a = 1.0 / ((g_i_swr_a / 100.0 + 100.0 / g_i_swr_a) * e_c_tenth
      +                          s_Fid_loss / 10.0 * 0.115 + 1.0);
  9817  02EE  0850               	movf	(_show_pwr$1914+3)^(0+128),w
  9818  02EF  0020               	movlb	0	; select bank0
  9819  02F0  00BD               	movwf	___fldiv@a+3
  9820  02F1  0021               	movlb	1	; select bank1
  9821  02F2  084F               	movf	(_show_pwr$1914+2)^(0+128),w
  9822  02F3  0020               	movlb	0	; select bank0
  9823  02F4  00BC               	movwf	___fldiv@a+2
  9824  02F5  0021               	movlb	1	; select bank1
  9825  02F6  084E               	movf	(_show_pwr$1914+1)^(0+128),w
  9826  02F7  0020               	movlb	0	; select bank0
  9827  02F8  00BB               	movwf	___fldiv@a+1
  9828  02F9  0021               	movlb	1	; select bank1
  9829  02FA  084D               	movf	_show_pwr$1914^(0+128),w
  9830  02FB  0020               	movlb	0	; select bank0
  9831  02FC  00BA               	movwf	___fldiv@a
  9832  02FD  303F               	movlw	63
  9833  02FE  00C1               	movwf	___fldiv@b+3
  9834  02FF  3080               	movlw	128
  9835  0300  00C0               	movwf	___fldiv@b+2
  9836  0301  3000               	movlw	0
  9837  0302  00BF               	movwf	___fldiv@b+1
  9838  0303  3000               	movlw	0
  9839  0304  00BE               	movwf	___fldiv@b
  9840  0305  319E  2687  3180   	fcall	___fldiv
  9841  0308  083D               	movf	?___fldiv+3,w
  9842  0309  0021               	movlb	1	; select bank1
  9843  030A  00DE               	movwf	(show_pwr@a+3)^(0+128)
  9844  030B  0020               	movlb	0	; select bank0
  9845  030C  083C               	movf	?___fldiv+2,w
  9846  030D  0021               	movlb	1	; select bank1
  9847  030E  00DD               	movwf	(show_pwr@a+2)^(0+128)
  9848  030F  0020               	movlb	0	; select bank0
  9849  0310  083B               	movf	?___fldiv+1,w
  9850  0311  0021               	movlb	1	; select bank1
  9851  0312  00DC               	movwf	(show_pwr@a+1)^(0+128)
  9852  0313  0020               	movlb	0	; select bank0
  9853  0314  083A               	movf	?___fldiv,w
  9854  0315  0021               	movlb	1	; select bank1
  9855  0316  00DB               	movwf	show_pwr@a^(0+128)
  9856                           
  9857                           ;main.c: 605:             b = 4.0 / (2.0 + parm_SWR / 100.0 + 100.0 / parm_SWR);
  9858  0317  3040               	movlw	64
  9859  0318  0020               	movlb	0	; select bank0
  9860  0319  00D7               	movwf	___fladd@b+3
  9861  031A  3000               	movlw	0
  9862  031B  00D6               	movwf	___fladd@b+2
  9863  031C  3000               	movlw	0
  9864  031D  00D5               	movwf	___fladd@b+1
  9865  031E  3000               	movlw	0
  9866  031F  00D4               	movwf	___fladd@b
  9867  0320  3042               	movlw	66
  9868  0321  00BD               	movwf	___fldiv@a+3
  9869  0322  30C8               	movlw	200
  9870  0323  00BC               	movwf	___fldiv@a+2
  9871  0324  3000               	movlw	0
  9872  0325  00BB               	movwf	___fldiv@a+1
  9873  0326  3000               	movlw	0
  9874  0327  00BA               	movwf	___fldiv@a
  9875  0328  0021               	movlb	1	; select bank1
  9876  0329  083F               	movf	show_pwr@parm_SWR^(0+128),w
  9877  032A  0020               	movlb	0	; select bank0
  9878  032B  00AC               	movwf	___xxtofl@val
  9879  032C  0021               	movlb	1	; select bank1
  9880  032D  0840               	movf	(show_pwr@parm_SWR+1)^(0+128),w
  9881  032E  0020               	movlb	0	; select bank0
  9882  032F  00AD               	movwf	___xxtofl@val+1
  9883  0330  0D89               	rlf	9,f
  9884  0331  3B89               	subwfb	9,f
  9885  0332  0989               	comf	9,f
  9886  0333  00AE               	movwf	___xxtofl@val+2
  9887  0334  00AF               	movwf	___xxtofl@val+3
  9888  0335  3001               	movlw	1
  9889  0336  31A3  234F  3180   	fcall	___xxtofl
  9890  0339  082F               	movf	?___xxtofl+3,w
  9891  033A  00C1               	movwf	___fldiv@b+3
  9892  033B  082E               	movf	?___xxtofl+2,w
  9893  033C  00C0               	movwf	___fldiv@b+2
  9894  033D  082D               	movf	?___xxtofl+1,w
  9895  033E  00BF               	movwf	___fldiv@b+1
  9896  033F  082C               	movf	?___xxtofl,w
  9897  0340  00BE               	movwf	___fldiv@b
  9898  0341  319E  2687  3180   	fcall	___fldiv
  9899  0344  083D               	movf	?___fldiv+3,w
  9900  0345  00DB               	movwf	___fladd@a+3
  9901  0346  083C               	movf	?___fldiv+2,w
  9902  0347  00DA               	movwf	___fladd@a+2
  9903  0348  083B               	movf	?___fldiv+1,w
  9904  0349  00D9               	movwf	___fladd@a+1
  9905  034A  083A               	movf	?___fldiv,w
  9906  034B  00D8               	movwf	___fladd@a
  9907  034C  3191  215D  3180   	fcall	___fladd
  9908  034F  0857               	movf	?___fladd+3,w
  9909  0350  0021               	movlb	1	; select bank1
  9910  0351  00CC               	movwf	(_show_pwr$1915+3)^(0+128)
  9911  0352  0020               	movlb	0	; select bank0
  9912  0353  0856               	movf	?___fladd+2,w
  9913  0354  0021               	movlb	1	; select bank1
  9914  0355  00CB               	movwf	(_show_pwr$1915+2)^(0+128)
  9915  0356  0020               	movlb	0	; select bank0
  9916  0357  0855               	movf	?___fladd+1,w
  9917  0358  0021               	movlb	1	; select bank1
  9918  0359  00CA               	movwf	(_show_pwr$1915+1)^(0+128)
  9919  035A  0020               	movlb	0	; select bank0
  9920  035B  0854               	movf	?___fladd,w
  9921  035C  0021               	movlb	1	; select bank1
  9922  035D  00C9               	movwf	_show_pwr$1915^(0+128)
  9923                           
  9924                           ;main.c: 605:             b = 4.0 / (2.0 + parm_SWR / 100.0 + 100.0 / parm_SWR);
  9925  035E  083F               	movf	show_pwr@parm_SWR^(0+128),w
  9926  035F  0020               	movlb	0	; select bank0
  9927  0360  00AC               	movwf	___xxtofl@val
  9928  0361  0021               	movlb	1	; select bank1
  9929  0362  0840               	movf	(show_pwr@parm_SWR+1)^(0+128),w
  9930  0363  0020               	movlb	0	; select bank0
  9931  0364  00AD               	movwf	___xxtofl@val+1
  9932  0365  0D89               	rlf	9,f
  9933  0366  3B89               	subwfb	9,f
  9934  0367  0989               	comf	9,f
  9935  0368  00AE               	movwf	___xxtofl@val+2
  9936  0369  00AF               	movwf	___xxtofl@val+3
  9937  036A  3001               	movlw	1
  9938  036B  31A3  234F  3180   	fcall	___xxtofl
  9939  036E  082F               	movf	?___xxtofl+3,w
  9940  036F  00BD               	movwf	___fldiv@a+3
  9941  0370  082E               	movf	?___xxtofl+2,w
  9942  0371  00BC               	movwf	___fldiv@a+2
  9943  0372  082D               	movf	?___xxtofl+1,w
  9944  0373  00BB               	movwf	___fldiv@a+1
  9945  0374  082C               	movf	?___xxtofl,w
  9946  0375  00BA               	movwf	___fldiv@a
  9947  0376  3042               	movlw	66
  9948  0377  00C1               	movwf	___fldiv@b+3
  9949  0378  30C8               	movlw	200
  9950  0379  00C0               	movwf	___fldiv@b+2
  9951  037A  3000               	movlw	0
  9952  037B  00BF               	movwf	___fldiv@b+1
  9953  037C  3000               	movlw	0
  9954  037D  00BE               	movwf	___fldiv@b
  9955  037E  319E  2687  3180   	fcall	___fldiv
  9956  0381  083D               	movf	?___fldiv+3,w
  9957  0382  00D7               	movwf	___fladd@b+3
  9958  0383  083C               	movf	?___fldiv+2,w
  9959  0384  00D6               	movwf	___fladd@b+2
  9960  0385  083B               	movf	?___fldiv+1,w
  9961  0386  00D5               	movwf	___fladd@b+1
  9962  0387  083A               	movf	?___fldiv,w
  9963  0388  00D4               	movwf	___fladd@b
  9964  0389  0021               	movlb	1	; select bank1
  9965  038A  084C               	movf	(_show_pwr$1915+3)^(0+128),w
  9966  038B  0020               	movlb	0	; select bank0
  9967  038C  00DB               	movwf	___fladd@a+3
  9968  038D  0021               	movlb	1	; select bank1
  9969  038E  084B               	movf	(_show_pwr$1915+2)^(0+128),w
  9970  038F  0020               	movlb	0	; select bank0
  9971  0390  00DA               	movwf	___fladd@a+2
  9972  0391  0021               	movlb	1	; select bank1
  9973  0392  084A               	movf	(_show_pwr$1915+1)^(0+128),w
  9974  0393  0020               	movlb	0	; select bank0
  9975  0394  00D9               	movwf	___fladd@a+1
  9976  0395  0021               	movlb	1	; select bank1
  9977  0396  0849               	movf	_show_pwr$1915^(0+128),w
  9978  0397  0020               	movlb	0	; select bank0
  9979  0398  00D8               	movwf	___fladd@a
  9980  0399  3191  215D  3180   	fcall	___fladd
  9981  039C  0857               	movf	?___fladd+3,w
  9982  039D  0021               	movlb	1	; select bank1
  9983  039E  00D0               	movwf	(_show_pwr$1914+3)^(0+128)
  9984  039F  0020               	movlb	0	; select bank0
  9985  03A0  0856               	movf	?___fladd+2,w
  9986  03A1  0021               	movlb	1	; select bank1
  9987  03A2  00CF               	movwf	(_show_pwr$1914+2)^(0+128)
  9988  03A3  0020               	movlb	0	; select bank0
  9989  03A4  0855               	movf	?___fladd+1,w
  9990  03A5  0021               	movlb	1	; select bank1
  9991  03A6  00CE               	movwf	(_show_pwr$1914+1)^(0+128)
  9992  03A7  0020               	movlb	0	; select bank0
  9993  03A8  0854               	movf	?___fladd,w
  9994  03A9  0021               	movlb	1	; select bank1
  9995  03AA  00CD               	movwf	_show_pwr$1914^(0+128)
  9996                           
  9997                           ;main.c: 605:             b = 4.0 / (2.0 + parm_SWR / 100.0 + 100.0 / parm_SWR);
  9998  03AB  0850               	movf	(_show_pwr$1914+3)^(0+128),w
  9999  03AC  0020               	movlb	0	; select bank0
 10000  03AD  00BD               	movwf	___fldiv@a+3
 10001  03AE  0021               	movlb	1	; select bank1
 10002  03AF  084F               	movf	(_show_pwr$1914+2)^(0+128),w
 10003  03B0  0020               	movlb	0	; select bank0
 10004  03B1  00BC               	movwf	___fldiv@a+2
 10005  03B2  0021               	movlb	1	; select bank1
 10006  03B3  084E               	movf	(_show_pwr$1914+1)^(0+128),w
 10007  03B4  0020               	movlb	0	; select bank0
 10008  03B5  00BB               	movwf	___fldiv@a+1
 10009  03B6  0021               	movlb	1	; select bank1
 10010  03B7  084D               	movf	_show_pwr$1914^(0+128),w
 10011  03B8  0020               	movlb	0	; select bank0
 10012  03B9  00BA               	movwf	___fldiv@a
 10013  03BA  3040               	movlw	64
 10014  03BB  00C1               	movwf	___fldiv@b+3
 10015  03BC  3080               	movlw	128
 10016  03BD  00C0               	movwf	___fldiv@b+2
 10017  03BE  3000               	movlw	0
 10018  03BF  00BF               	movwf	___fldiv@b+1
 10019  03C0  3000               	movlw	0
 10020  03C1  00BE               	movwf	___fldiv@b
 10021  03C2  319E  2687  3180   	fcall	___fldiv
 10022  03C5  083D               	movf	?___fldiv+3,w
 10023  03C6  0021               	movlb	1	; select bank1
 10024  03C7  00DA               	movwf	(show_pwr@b+3)^(0+128)
 10025  03C8  0020               	movlb	0	; select bank0
 10026  03C9  083C               	movf	?___fldiv+2,w
 10027  03CA  0021               	movlb	1	; select bank1
 10028  03CB  00D9               	movwf	(show_pwr@b+2)^(0+128)
 10029  03CC  0020               	movlb	0	; select bank0
 10030  03CD  083B               	movf	?___fldiv+1,w
 10031  03CE  0021               	movlb	1	; select bank1
 10032  03CF  00D8               	movwf	(show_pwr@b+1)^(0+128)
 10033  03D0  0020               	movlb	0	; select bank0
 10034  03D1  083A               	movf	?___fldiv,w
 10035  03D2  0021               	movlb	1	; select bank1
 10036  03D3  00D7               	movwf	show_pwr@b^(0+128)
 10037                           
 10038                           ;main.c: 606:             if (a >= 1.0)
 10039  03D4  085E               	movf	(show_pwr@a+3)^(0+128),w
 10040  03D5  0020               	movlb	0	; select bank0
 10041  03D6  00A3               	movwf	___flge@ff1+3
 10042  03D7  0021               	movlb	1	; select bank1
 10043  03D8  085D               	movf	(show_pwr@a+2)^(0+128),w
 10044  03D9  0020               	movlb	0	; select bank0
 10045  03DA  00A2               	movwf	___flge@ff1+2
 10046  03DB  0021               	movlb	1	; select bank1
 10047  03DC  085C               	movf	(show_pwr@a+1)^(0+128),w
 10048  03DD  0020               	movlb	0	; select bank0
 10049  03DE  00A1               	movwf	___flge@ff1+1
 10050  03DF  0021               	movlb	1	; select bank1
 10051  03E0  085B               	movf	show_pwr@a^(0+128),w
 10052  03E1  0020               	movlb	0	; select bank0
 10053  03E2  00A0               	movwf	___flge@ff1
 10054  03E3  303F               	movlw	63
 10055  03E4  00A7               	movwf	___flge@ff2+3
 10056  03E5  3080               	movlw	128
 10057  03E6  00A6               	movwf	___flge@ff2+2
 10058  03E7  3000               	movlw	0
 10059  03E8  00A5               	movwf	___flge@ff2+1
 10060  03E9  3000               	movlw	0
 10061  03EA  00A4               	movwf	___flge@ff2
 10062  03EB  31A1  213E  3180   	fcall	___flge
 10063  03EE  1C03               	btfss	3,0
 10064  03EF  2BF9               	goto	l8182
 10065                           
 10066                           ;main.c: 607:                 a = 1.0;
 10067  03F0  303F               	movlw	63
 10068  03F1  0021               	movlb	1	; select bank1
 10069  03F2  00DE               	movwf	(show_pwr@a+3)^(0+128)
 10070  03F3  3080               	movlw	128
 10071  03F4  00DD               	movwf	(show_pwr@a+2)^(0+128)
 10072  03F5  3000               	movlw	0
 10073  03F6  00DC               	movwf	(show_pwr@a+1)^(0+128)
 10074  03F7  3000               	movlw	0
 10075  03F8  00DB               	movwf	show_pwr@a^(0+128)
 10076  03F9                     l8182:
 10077                           
 10078                           ;main.c: 608:             if (b >= 1.0)
 10079  03F9  0021               	movlb	1	; select bank1
 10080  03FA  085A               	movf	(show_pwr@b+3)^(0+128),w
 10081  03FB  0020               	movlb	0	; select bank0
 10082  03FC  00A3               	movwf	___flge@ff1+3
 10083  03FD  0021               	movlb	1	; select bank1
 10084  03FE  0859               	movf	(show_pwr@b+2)^(0+128),w
 10085  03FF  0020               	movlb	0	; select bank0
 10086  0400  00A2               	movwf	___flge@ff1+2
 10087  0401  0021               	movlb	1	; select bank1
 10088  0402  0858               	movf	(show_pwr@b+1)^(0+128),w
 10089  0403  0020               	movlb	0	; select bank0
 10090  0404  00A1               	movwf	___flge@ff1+1
 10091  0405  0021               	movlb	1	; select bank1
 10092  0406  0857               	movf	show_pwr@b^(0+128),w
 10093  0407  0020               	movlb	0	; select bank0
 10094  0408  00A0               	movwf	___flge@ff1
 10095  0409  303F               	movlw	63
 10096  040A  00A7               	movwf	___flge@ff2+3
 10097  040B  3080               	movlw	128
 10098  040C  00A6               	movwf	___flge@ff2+2
 10099  040D  3000               	movlw	0
 10100  040E  00A5               	movwf	___flge@ff2+1
 10101  040F  3000               	movlw	0
 10102  0410  00A4               	movwf	___flge@ff2
 10103  0411  31A1  213E  3180   	fcall	___flge
 10104  0414  1C03               	btfss	3,0
 10105  0415  2C1F               	goto	l8186
 10106                           
 10107                           ;main.c: 609:                 b = 1.0;
 10108  0416  303F               	movlw	63
 10109  0417  0021               	movlb	1	; select bank1
 10110  0418  00DA               	movwf	(show_pwr@b+3)^(0+128)
 10111  0419  3080               	movlw	128
 10112  041A  00D9               	movwf	(show_pwr@b+2)^(0+128)
 10113  041B  3000               	movlw	0
 10114  041C  00D8               	movwf	(show_pwr@b+1)^(0+128)
 10115  041D  3000               	movlw	0
 10116  041E  00D7               	movwf	show_pwr@b^(0+128)
 10117  041F                     l8186:
 10118                           
 10119                           ;main.c: 610:             p_ant = (int) (parm_Power * a * b);
 10120  041F  0021               	movlb	1	; select bank1
 10121  0420  083D               	movf	show_pwr@parm_Power^(0+128),w
 10122  0421  0020               	movlb	0	; select bank0
 10123  0422  00AC               	movwf	___xxtofl@val
 10124  0423  0021               	movlb	1	; select bank1
 10125  0424  083E               	movf	(show_pwr@parm_Power+1)^(0+128),w
 10126  0425  0020               	movlb	0	; select bank0
 10127  0426  00AD               	movwf	___xxtofl@val+1
 10128  0427  0D89               	rlf	9,f
 10129  0428  3B89               	subwfb	9,f
 10130  0429  0989               	comf	9,f
 10131  042A  00AE               	movwf	___xxtofl@val+2
 10132  042B  00AF               	movwf	___xxtofl@val+3
 10133  042C  3001               	movlw	1
 10134  042D  31A3  234F  3180   	fcall	___xxtofl
 10135  0430  082F               	movf	?___xxtofl+3,w
 10136  0431  00EF               	movwf	___flmul@a+3
 10137  0432  082E               	movf	?___xxtofl+2,w
 10138  0433  00EE               	movwf	___flmul@a+2
 10139  0434  082D               	movf	?___xxtofl+1,w
 10140  0435  00ED               	movwf	___flmul@a+1
 10141  0436  082C               	movf	?___xxtofl,w
 10142  0437  00EC               	movwf	___flmul@a
 10143  0438  0021               	movlb	1	; select bank1
 10144  0439  085E               	movf	(show_pwr@a+3)^(0+128),w
 10145  043A  0020               	movlb	0	; select bank0
 10146  043B  00EB               	movwf	___flmul@b+3
 10147  043C  0021               	movlb	1	; select bank1
 10148  043D  085D               	movf	(show_pwr@a+2)^(0+128),w
 10149  043E  0020               	movlb	0	; select bank0
 10150  043F  00EA               	movwf	___flmul@b+2
 10151  0440  0021               	movlb	1	; select bank1
 10152  0441  085C               	movf	(show_pwr@a+1)^(0+128),w
 10153  0442  0020               	movlb	0	; select bank0
 10154  0443  00E9               	movwf	___flmul@b+1
 10155  0444  0021               	movlb	1	; select bank1
 10156  0445  085B               	movf	show_pwr@a^(0+128),w
 10157  0446  0020               	movlb	0	; select bank0
 10158  0447  00E8               	movwf	___flmul@b
 10159  0448  3193  233E  3180   	fcall	___flmul
 10160  044B  086B               	movf	?___flmul+3,w
 10161  044C  0021               	movlb	1	; select bank1
 10162  044D  00D4               	movwf	(_show_pwr$1916+3)^(0+128)
 10163  044E  0020               	movlb	0	; select bank0
 10164  044F  086A               	movf	?___flmul+2,w
 10165  0450  0021               	movlb	1	; select bank1
 10166  0451  00D3               	movwf	(_show_pwr$1916+2)^(0+128)
 10167  0452  0020               	movlb	0	; select bank0
 10168  0453  0869               	movf	?___flmul+1,w
 10169  0454  0021               	movlb	1	; select bank1
 10170  0455  00D2               	movwf	(_show_pwr$1916+1)^(0+128)
 10171  0456  0020               	movlb	0	; select bank0
 10172  0457  0868               	movf	?___flmul,w
 10173  0458  0021               	movlb	1	; select bank1
 10174  0459  00D1               	movwf	_show_pwr$1916^(0+128)
 10175                           
 10176                           ;main.c: 610:             p_ant = (int) (parm_Power * a * b);
 10177  045A  0854               	movf	(_show_pwr$1916+3)^(0+128),w
 10178  045B  0020               	movlb	0	; select bank0
 10179  045C  00EF               	movwf	___flmul@a+3
 10180  045D  0021               	movlb	1	; select bank1
 10181  045E  0853               	movf	(_show_pwr$1916+2)^(0+128),w
 10182  045F  0020               	movlb	0	; select bank0
 10183  0460  00EE               	movwf	___flmul@a+2
 10184  0461  0021               	movlb	1	; select bank1
 10185  0462  0852               	movf	(_show_pwr$1916+1)^(0+128),w
 10186  0463  0020               	movlb	0	; select bank0
 10187  0464  00ED               	movwf	___flmul@a+1
 10188  0465  0021               	movlb	1	; select bank1
 10189  0466  0851               	movf	_show_pwr$1916^(0+128),w
 10190  0467  0020               	movlb	0	; select bank0
 10191  0468  00EC               	movwf	___flmul@a
 10192  0469  0021               	movlb	1	; select bank1
 10193  046A  085A               	movf	(show_pwr@b+3)^(0+128),w
 10194  046B  0020               	movlb	0	; select bank0
 10195  046C  00EB               	movwf	___flmul@b+3
 10196  046D  0021               	movlb	1	; select bank1
 10197  046E  0859               	movf	(show_pwr@b+2)^(0+128),w
 10198  046F  0020               	movlb	0	; select bank0
 10199  0470  00EA               	movwf	___flmul@b+2
 10200  0471  0021               	movlb	1	; select bank1
 10201  0472  0858               	movf	(show_pwr@b+1)^(0+128),w
 10202  0473  0020               	movlb	0	; select bank0
 10203  0474  00E9               	movwf	___flmul@b+1
 10204  0475  0021               	movlb	1	; select bank1
 10205  0476  0857               	movf	show_pwr@b^(0+128),w
 10206  0477  0020               	movlb	0	; select bank0
 10207  0478  00E8               	movwf	___flmul@b
 10208  0479  3193  233E  3180   	fcall	___flmul
 10209  047C  086B               	movf	?___flmul+3,w
 10210  047D  0021               	movlb	1	; select bank1
 10211  047E  00B5               	movwf	(___fltol@f1+3)^(0+128)
 10212  047F  0020               	movlb	0	; select bank0
 10213  0480  086A               	movf	?___flmul+2,w
 10214  0481  0021               	movlb	1	; select bank1
 10215  0482  00B4               	movwf	(___fltol@f1+2)^(0+128)
 10216  0483  0020               	movlb	0	; select bank0
 10217  0484  0869               	movf	?___flmul+1,w
 10218  0485  0021               	movlb	1	; select bank1
 10219  0486  00B3               	movwf	(___fltol@f1+1)^(0+128)
 10220  0487  0020               	movlb	0	; select bank0
 10221  0488  0868               	movf	?___flmul,w
 10222  0489  0021               	movlb	1	; select bank1
 10223  048A  00B2               	movwf	___fltol@f1^(0+128)
 10224  048B  31A0  2060  3180   	fcall	___fltol
 10225  048E  0833               	movf	(?___fltol+1)^(0+128),w
 10226  048F  00E0               	movwf	(show_pwr@p_ant+1)^(0+128)
 10227  0490  0832               	movf	?___fltol^(0+128),w
 10228  0491  00DF               	movwf	show_pwr@p_ant^(0+128)
 10229                           
 10230                           ;main.c: 611:             eff = (int) (a * b * 100);
 10231  0492  085E               	movf	(show_pwr@a+3)^(0+128),w
 10232  0493  0020               	movlb	0	; select bank0
 10233  0494  00EF               	movwf	___flmul@a+3
 10234  0495  0021               	movlb	1	; select bank1
 10235  0496  085D               	movf	(show_pwr@a+2)^(0+128),w
 10236  0497  0020               	movlb	0	; select bank0
 10237  0498  00EE               	movwf	___flmul@a+2
 10238  0499  0021               	movlb	1	; select bank1
 10239  049A  085C               	movf	(show_pwr@a+1)^(0+128),w
 10240  049B  0020               	movlb	0	; select bank0
 10241  049C  00ED               	movwf	___flmul@a+1
 10242  049D  0021               	movlb	1	; select bank1
 10243  049E  085B               	movf	show_pwr@a^(0+128),w
 10244  049F  0020               	movlb	0	; select bank0
 10245  04A0  00EC               	movwf	___flmul@a
 10246  04A1  0021               	movlb	1	; select bank1
 10247  04A2  085A               	movf	(show_pwr@b+3)^(0+128),w
 10248  04A3  0020               	movlb	0	; select bank0
 10249  04A4  00EB               	movwf	___flmul@b+3
 10250  04A5  0021               	movlb	1	; select bank1
 10251  04A6  0859               	movf	(show_pwr@b+2)^(0+128),w
 10252  04A7  0020               	movlb	0	; select bank0
 10253  04A8  00EA               	movwf	___flmul@b+2
 10254  04A9  0021               	movlb	1	; select bank1
 10255  04AA  0858               	movf	(show_pwr@b+1)^(0+128),w
 10256  04AB  0020               	movlb	0	; select bank0
 10257  04AC  00E9               	movwf	___flmul@b+1
 10258  04AD  0021               	movlb	1	; select bank1
 10259  04AE  0857               	movf	show_pwr@b^(0+128),w
 10260  04AF  0020               	movlb	0	; select bank0
 10261  04B0  00E8               	movwf	___flmul@b
 10262  04B1  3193  233E  3180   	fcall	___flmul
 10263  04B4  086B               	movf	?___flmul+3,w
 10264  04B5  0021               	movlb	1	; select bank1
 10265  04B6  00D4               	movwf	(_show_pwr$1916+3)^(0+128)
 10266  04B7  0020               	movlb	0	; select bank0
 10267  04B8  086A               	movf	?___flmul+2,w
 10268  04B9  0021               	movlb	1	; select bank1
 10269  04BA  00D3               	movwf	(_show_pwr$1916+2)^(0+128)
 10270  04BB  0020               	movlb	0	; select bank0
 10271  04BC  0869               	movf	?___flmul+1,w
 10272  04BD  0021               	movlb	1	; select bank1
 10273  04BE  00D2               	movwf	(_show_pwr$1916+1)^(0+128)
 10274  04BF  0020               	movlb	0	; select bank0
 10275  04C0  0868               	movf	?___flmul,w
 10276  04C1  0021               	movlb	1	; select bank1
 10277  04C2  00D1               	movwf	_show_pwr$1916^(0+128)
 10278                           
 10279                           ;main.c: 611:             eff = (int) (a * b * 100);
 10280  04C3  0854               	movf	(_show_pwr$1916+3)^(0+128),w
 10281  04C4  0020               	movlb	0	; select bank0
 10282  04C5  00EF               	movwf	___flmul@a+3
 10283  04C6  0021               	movlb	1	; select bank1
 10284  04C7  0853               	movf	(_show_pwr$1916+2)^(0+128),w
 10285  04C8  0020               	movlb	0	; select bank0
 10286  04C9  00EE               	movwf	___flmul@a+2
 10287  04CA  0021               	movlb	1	; select bank1
 10288  04CB  0852               	movf	(_show_pwr$1916+1)^(0+128),w
 10289  04CC  0020               	movlb	0	; select bank0
 10290  04CD  00ED               	movwf	___flmul@a+1
 10291  04CE  0021               	movlb	1	; select bank1
 10292  04CF  0851               	movf	_show_pwr$1916^(0+128),w
 10293  04D0  0020               	movlb	0	; select bank0
 10294  04D1  00EC               	movwf	___flmul@a
 10295  04D2  3042               	movlw	66
 10296  04D3  00EB               	movwf	___flmul@b+3
 10297  04D4  30C8               	movlw	200
 10298  04D5  00EA               	movwf	___flmul@b+2
 10299  04D6  3000               	movlw	0
 10300  04D7  00E9               	movwf	___flmul@b+1
 10301  04D8  3000               	movlw	0
 10302  04D9  00E8               	movwf	___flmul@b
 10303  04DA  3193  233E  3180   	fcall	___flmul
 10304  04DD  086B               	movf	?___flmul+3,w
 10305  04DE  0021               	movlb	1	; select bank1
 10306  04DF  00B5               	movwf	(___fltol@f1+3)^(0+128)
 10307  04E0  0020               	movlb	0	; select bank0
 10308  04E1  086A               	movf	?___flmul+2,w
 10309  04E2  0021               	movlb	1	; select bank1
 10310  04E3  00B4               	movwf	(___fltol@f1+2)^(0+128)
 10311  04E4  0020               	movlb	0	; select bank0
 10312  04E5  0869               	movf	?___flmul+1,w
 10313  04E6  0021               	movlb	1	; select bank1
 10314  04E7  00B3               	movwf	(___fltol@f1+1)^(0+128)
 10315  04E8  0020               	movlb	0	; select bank0
 10316  04E9  0868               	movf	?___flmul,w
 10317  04EA  0021               	movlb	1	; select bank1
 10318  04EB  00B2               	movwf	___fltol@f1^(0+128)
 10319  04EC  31A0  2060  3180   	fcall	___fltol
 10320  04EF  0833               	movf	(?___fltol+1)^(0+128),w
 10321  04F0  00D6               	movwf	(show_pwr@eff+1)^(0+128)
 10322  04F1  0832               	movf	?___fltol^(0+128),w
 10323  04F2  00D5               	movwf	show_pwr@eff^(0+128)
 10324                           
 10325                           ;main.c: 612:             if (eff >= 100)
 10326  04F3  0856               	movf	(show_pwr@eff+1)^(0+128),w
 10327  04F4  3A80               	xorlw	128
 10328  04F5  00C1               	movwf	??_show_pwr^(0+128)
 10329  04F6  3080               	movlw	128
 10330  04F7  0241               	subwf	??_show_pwr^(0+128),w
 10331  04F8  1D03               	skipz
 10332  04F9  2CFC               	goto	u12235
 10333  04FA  3064               	movlw	100
 10334  04FB  0255               	subwf	show_pwr@eff^(0+128),w
 10335  04FC                     u12235:
 10336  04FC  1C03               	skipc
 10337  04FD  2D03               	goto	l8196
 10338                           
 10339                           ;main.c: 613:                 eff = 99;
 10340  04FE  3063               	movlw	99
 10341  04FF  0021               	movlb	1	; select bank1
 10342  0500  00D5               	movwf	show_pwr@eff^(0+128)
 10343  0501  3000               	movlw	0
 10344  0502  00D6               	movwf	(show_pwr@eff^(0+128)+1)
 10345  0503                     l8196:
 10346                           
 10347                           ;main.c: 615:             if (e_c_b_P_High == 0) {
 10348  0503  0022               	movlb	2	; select bank2
 10349  0504  0831               	movf	_e_c_b_P_High^(0+256),w
 10350  0505  1D03               	btfss	3,2
 10351  0506  2D69               	goto	l8226
 10352                           
 10353                           ;main.c: 616:                 if (p_ant >= 100) {
 10354  0507  0021               	movlb	1	; select bank1
 10355  0508  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10356  0509  3A80               	xorlw	128
 10357  050A  00C1               	movwf	??_show_pwr^(0+128)
 10358  050B  3080               	movlw	128
 10359  050C  0241               	subwf	??_show_pwr^(0+128),w
 10360  050D  1D03               	skipz
 10361  050E  2D11               	goto	u12255
 10362  050F  3064               	movlw	100
 10363  0510  025F               	subwf	show_pwr@p_ant^(0+128),w
 10364  0511                     u12255:
 10365  0511  1C03               	skipc
 10366  0512  2D3D               	goto	l8212
 10367                           
 10368                           ;main.c: 617:                     p_ant += 5;
 10369  0513  3005               	movlw	5
 10370  0514  0021               	movlb	1	; select bank1
 10371  0515  07DF               	addwf	show_pwr@p_ant^(0+128),f
 10372  0516  3000               	movlw	0
 10373  0517  3DE0               	addwfc	(show_pwr@p_ant+1)^(0+128),f
 10374                           
 10375                           ;main.c: 618:                     IntToStr(p_ant, g_work_str);
 10376  0518  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10377  0519  0020               	movlb	0	; select bank0
 10378  051A  00A5               	movwf	IntToStr@number+1
 10379  051B  0021               	movlb	1	; select bank1
 10380  051C  085F               	movf	show_pwr@p_ant^(0+128),w
 10381  051D  0020               	movlb	0	; select bank0
 10382  051E  00A4               	movwf	IntToStr@number
 10383  051F  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 10384  0520  0021               	movlb	1	; select bank1
 10385  0521  00C1               	movwf	??_show_pwr^(0+128)
 10386  0522  0841               	movf	??_show_pwr^(0+128),w
 10387  0523  0020               	movlb	0	; select bank0
 10388  0524  00A6               	movwf	IntToStr@output
 10389  0525  31A1  21B9  3180   	fcall	_IntToStr
 10390                           
 10391                           ;main.c: 619:                     g_work_str_2[0] = g_work_str[2];
 10392  0528  0022               	movlb	2	; select bank2
 10393  0529  0846               	movf	(_g_work_str^(0+256)+2),w
 10394  052A  0021               	movlb	1	; select bank1
 10395  052B  00C1               	movwf	??_show_pwr^(0+128)
 10396  052C  0841               	movf	??_show_pwr^(0+128),w
 10397  052D  0022               	movlb	2	; select bank2
 10398  052E  00BD               	movwf	_g_work_str_2^(0+256)
 10399                           
 10400                           ;main.c: 620:                     g_work_str_2[1] = g_work_str[3];
 10401  052F  0847               	movf	(_g_work_str^(0+256)+3),w
 10402  0530  0021               	movlb	1	; select bank1
 10403  0531  00C1               	movwf	??_show_pwr^(0+128)
 10404  0532  0841               	movf	??_show_pwr^(0+128),w
 10405  0533  0022               	movlb	2	; select bank2
 10406  0534  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 10407                           
 10408                           ;main.c: 621:                     g_work_str_2[2] = g_work_str[4];
 10409  0535  0848               	movf	(_g_work_str^(0+256)+4),w
 10410  0536                     L24:
 10411  0536  0021               	movlb	1	; select bank1
 10412  0537  00C1               	movwf	??_show_pwr^(0+128)
 10413  0538  0841               	movf	??_show_pwr^(0+128),w
 10414  0539  0022               	movlb	2	; select bank2
 10415  053A  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 10416                           
 10417                           ;main.c: 622:                     g_work_str_2[3] = 'W';
 10418  053B  3057               	movlw	87
 10419  053C  2DB9               	goto	L22
 10420  053D                     l8212:	
 10421                           ;main.c: 623:                 } else {
 10422                           
 10423                           
 10424                           ;main.c: 624:                     IntToStr(p_ant, g_work_str);
 10425  053D  0021               	movlb	1	; select bank1
 10426  053E  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10427  053F  0020               	movlb	0	; select bank0
 10428  0540  00A5               	movwf	IntToStr@number+1
 10429  0541  0021               	movlb	1	; select bank1
 10430  0542  085F               	movf	show_pwr@p_ant^(0+128),w
 10431  0543  0020               	movlb	0	; select bank0
 10432  0544  00A4               	movwf	IntToStr@number
 10433  0545  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 10434  0546  0021               	movlb	1	; select bank1
 10435  0547  00C1               	movwf	??_show_pwr^(0+128)
 10436  0548  0841               	movf	??_show_pwr^(0+128),w
 10437  0549  0020               	movlb	0	; select bank0
 10438  054A  00A6               	movwf	IntToStr@output
 10439  054B  31A1  21B9  3180   	fcall	_IntToStr
 10440                           
 10441                           ;main.c: 625:                     if (g_work_str[4] != ' ')
 10442  054E  3020               	movlw	32
 10443  054F  0022               	movlb	2	; select bank2
 10444  0550  0648               	xorwf	(_g_work_str^(0+256)+4),w
 10445  0551  1903               	btfsc	3,2
 10446  0552  2D55               	goto	l8218
 10447                           
 10448                           ;main.c: 626:                         g_work_str_2[0] = g_work_str[4];
 10449  0553  0848               	movf	(_g_work_str^(0+256)+4),w
 10450  0554  2D56               	goto	L23
 10451  0555                     l8218:
 10452                           
 10453                           ;main.c: 628:                         g_work_str_2[0] = '0';
 10454  0555  3030               	movlw	48
 10455  0556                     L23:
 10456  0556  0021               	movlb	1	; select bank1
 10457  0557  00C1               	movwf	??_show_pwr^(0+128)
 10458  0558  0841               	movf	??_show_pwr^(0+128),w
 10459  0559  0022               	movlb	2	; select bank2
 10460  055A  00BD               	movwf	_g_work_str_2^(0+256)
 10461                           
 10462                           ;main.c: 629:                     g_work_str_2[1] = '.';
 10463  055B  302E               	movlw	46
 10464  055C  0021               	movlb	1	; select bank1
 10465  055D  00C1               	movwf	??_show_pwr^(0+128)
 10466  055E  0841               	movf	??_show_pwr^(0+128),w
 10467  055F  0022               	movlb	2	; select bank2
 10468  0560  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 10469                           
 10470                           ;main.c: 630:                     if (g_work_str[5] != ' ')
 10471  0561  3020               	movlw	32
 10472  0562  0649               	xorwf	(_g_work_str^(0+256)+5),w
 10473  0563  1903               	btfsc	3,2
 10474  0564  2D67               	goto	l8224
 10475  0565                     l8222:
 10476                           
 10477                           ;main.c: 631:                         g_work_str_2[2] = g_work_str[5];
 10478  0565  0849               	movf	(_g_work_str^(0+256)+5),w
 10479  0566  2D36               	goto	L24
 10480  0567                     l8224:
 10481                           
 10482                           ;main.c: 633:                         g_work_str_2[2] = '0';
 10483  0567  3030               	movlw	48
 10484  0568  2D36               	goto	L24
 10485  0569                     l8226:
 10486                           
 10487                           ;main.c: 637:                 if (p_ant < 999) {
 10488  0569  0021               	movlb	1	; select bank1
 10489  056A  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10490  056B  3A80               	xorlw	128
 10491  056C  00C1               	movwf	??_show_pwr^(0+128)
 10492  056D  3083               	movlw	131
 10493  056E  0241               	subwf	??_show_pwr^(0+128),w
 10494  056F  1D03               	skipz
 10495  0570  2D73               	goto	u12285
 10496  0571  30E7               	movlw	231
 10497  0572  025F               	subwf	show_pwr@p_ant^(0+128),w
 10498  0573                     u12285:
 10499  0573  1803               	skipnc
 10500  0574  2D94               	goto	l8238
 10501                           
 10502                           ;main.c: 638:                     IntToStr(p_ant, g_work_str);
 10503  0575  0021               	movlb	1	; select bank1
 10504  0576  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10505  0577  0020               	movlb	0	; select bank0
 10506  0578  00A5               	movwf	IntToStr@number+1
 10507  0579  0021               	movlb	1	; select bank1
 10508  057A  085F               	movf	show_pwr@p_ant^(0+128),w
 10509  057B  0020               	movlb	0	; select bank0
 10510  057C  00A4               	movwf	IntToStr@number
 10511  057D  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 10512  057E  0021               	movlb	1	; select bank1
 10513  057F  00C1               	movwf	??_show_pwr^(0+128)
 10514  0580  0841               	movf	??_show_pwr^(0+128),w
 10515  0581  0020               	movlb	0	; select bank0
 10516  0582  00A6               	movwf	IntToStr@output
 10517  0583  31A1  21B9  3180   	fcall	_IntToStr
 10518                           
 10519                           ;main.c: 639:                     g_work_str_2[0] = g_work_str[3];
 10520  0586  0022               	movlb	2	; select bank2
 10521  0587  0847               	movf	(_g_work_str^(0+256)+3),w
 10522  0588  0021               	movlb	1	; select bank1
 10523  0589  00C1               	movwf	??_show_pwr^(0+128)
 10524  058A  0841               	movf	??_show_pwr^(0+128),w
 10525  058B  0022               	movlb	2	; select bank2
 10526  058C  00BD               	movwf	_g_work_str_2^(0+256)
 10527                           
 10528                           ;main.c: 640:                     g_work_str_2[1] = g_work_str[4];
 10529  058D  0848               	movf	(_g_work_str^(0+256)+4),w
 10530  058E  0021               	movlb	1	; select bank1
 10531  058F  00C1               	movwf	??_show_pwr^(0+128)
 10532  0590  0841               	movf	??_show_pwr^(0+128),w
 10533  0591  0022               	movlb	2	; select bank2
 10534  0592  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 10535  0593  2D65               	goto	l8222
 10536  0594                     l8238:
 10537                           
 10538                           ;main.c: 644:                     IntToStr(p_ant, g_work_str);
 10539  0594  0021               	movlb	1	; select bank1
 10540  0595  0860               	movf	(show_pwr@p_ant+1)^(0+128),w
 10541  0596  0020               	movlb	0	; select bank0
 10542  0597  00A5               	movwf	IntToStr@number+1
 10543  0598  0021               	movlb	1	; select bank1
 10544  0599  085F               	movf	show_pwr@p_ant^(0+128),w
 10545  059A  0020               	movlb	0	; select bank0
 10546  059B  00A4               	movwf	IntToStr@number
 10547  059C  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 10548  059D  0021               	movlb	1	; select bank1
 10549  059E  00C1               	movwf	??_show_pwr^(0+128)
 10550  059F  0841               	movf	??_show_pwr^(0+128),w
 10551  05A0  0020               	movlb	0	; select bank0
 10552  05A1  00A6               	movwf	IntToStr@output
 10553  05A2  31A1  21B9  3180   	fcall	_IntToStr
 10554                           
 10555                           ;main.c: 645:                     g_work_str_2[0] = g_work_str[2];
 10556  05A5  0022               	movlb	2	; select bank2
 10557  05A6  0846               	movf	(_g_work_str^(0+256)+2),w
 10558  05A7  0021               	movlb	1	; select bank1
 10559  05A8  00C1               	movwf	??_show_pwr^(0+128)
 10560  05A9  0841               	movf	??_show_pwr^(0+128),w
 10561  05AA  0022               	movlb	2	; select bank2
 10562  05AB  00BD               	movwf	_g_work_str_2^(0+256)
 10563                           
 10564                           ;main.c: 646:                     g_work_str_2[1] = g_work_str[3];
 10565  05AC  0847               	movf	(_g_work_str^(0+256)+3),w
 10566  05AD  0021               	movlb	1	; select bank1
 10567  05AE  00C1               	movwf	??_show_pwr^(0+128)
 10568  05AF  0841               	movf	??_show_pwr^(0+128),w
 10569  05B0  0022               	movlb	2	; select bank2
 10570  05B1  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 10571                           
 10572                           ;main.c: 647:                     g_work_str_2[2] = g_work_str[4];
 10573  05B2  0848               	movf	(_g_work_str^(0+256)+4),w
 10574  05B3  0021               	movlb	1	; select bank1
 10575  05B4  00C1               	movwf	??_show_pwr^(0+128)
 10576  05B5  0841               	movf	??_show_pwr^(0+128),w
 10577  05B6  0022               	movlb	2	; select bank2
 10578  05B7  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 10579                           
 10580                           ;main.c: 648:                     g_work_str_2[3] = g_work_str[5];
 10581  05B8  0849               	movf	(_g_work_str^(0+256)+5),w
 10582  05B9                     L22:
 10583  05B9  0021               	movlb	1	; select bank1
 10584  05BA  00C1               	movwf	??_show_pwr^(0+128)
 10585  05BB  0841               	movf	??_show_pwr^(0+128),w
 10586  05BC  0022               	movlb	2	; select bank2
 10587  05BD  00C0               	movwf	(_g_work_str_2^(0+256)+3)
 10588                           
 10589                           ;main.c: 651:             if (e_c_ledtype == 4 | e_c_ledtype == 5)
 10590  05BE  3004               	movlw	4
 10591  05BF  062F               	xorwf	_e_c_ledtype^(0+256),w
 10592  05C0  1903               	btfsc	3,2
 10593  05C1  2DC6               	goto	l8252
 10594  05C2  3005               	movlw	5
 10595  05C3  062F               	xorwf	_e_c_ledtype^(0+256),w
 10596  05C4  1D03               	btfss	3,2
 10597  05C5  2DD5               	goto	l8254
 10598  05C6                     l8252:
 10599                           
 10600                           ;main.c: 652:                 uart_wr_str(4, 16 + 4 * 12, g_work_str_2, 4);
 10601  05C6  3040               	movlw	64
 10602  05C7  0021               	movlb	1	; select bank1
 10603  05C8  00C1               	movwf	??_show_pwr^(0+128)
 10604  05C9  0841               	movf	??_show_pwr^(0+128),w
 10605  05CA  00F3               	movwf	uart_wr_str@col
 10606  05CB  303D               	movlw	low _g_work_str_2
 10607  05CC  00F4               	movwf	uart_wr_str@str
 10608  05CD  3001               	movlw	high _g_work_str_2
 10609  05CE  00F5               	movwf	uart_wr_str@str+1
 10610  05CF  3004               	movlw	4
 10611  05D0  00C2               	movwf	(??_show_pwr+1)^(0+128)
 10612  05D1  0842               	movf	(??_show_pwr+1)^(0+128),w
 10613  05D2  00F6               	movwf	uart_wr_str@len
 10614  05D3  3004               	movlw	4
 10615  05D4  2DF0               	goto	L25
 10616  05D5                     l8254:
 10617  05D5  3002               	movlw	2
 10618  05D6  062F               	xorwf	_e_c_ledtype^(0+256),w
 10619  05D7  1903               	btfsc	3,2
 10620  05D8  2DDD               	goto	l8258
 10621  05D9  3003               	movlw	3
 10622  05DA  062F               	xorwf	_e_c_ledtype^(0+256),w
 10623  05DB  1D03               	btfss	3,2
 10624  05DC  2DDF               	goto	l8260
 10625  05DD                     l8258:
 10626                           
 10627                           ;main.c: 654:                 uart_wr_str(0, 13, g_work_str_2, 4);
 10628  05DD  300D               	movlw	13
 10629  05DE  2DE3               	goto	L27
 10630  05DF                     l8260:
 10631  05DF  082F               	movf	_e_c_ledtype^(0+256),w
 10632  05E0  1903               	btfsc	3,2
 10633  05E1  2DF3               	goto	l8264
 10634                           
 10635                           ;main.c: 656:                 uart_wr_str(0, 12, g_work_str_2, 4);
 10636  05E2  300C               	movlw	12
 10637  05E3                     L27:
 10638  05E3  0021               	movlb	1	; select bank1
 10639  05E4  00C1               	movwf	??_show_pwr^(0+128)
 10640  05E5  0841               	movf	??_show_pwr^(0+128),w
 10641  05E6  00F3               	movwf	uart_wr_str@col
 10642  05E7  303D               	movlw	low _g_work_str_2
 10643  05E8  00F4               	movwf	uart_wr_str@str
 10644  05E9  3001               	movlw	high _g_work_str_2
 10645  05EA  00F5               	movwf	uart_wr_str@str+1
 10646  05EB  3004               	movlw	4
 10647  05EC  00C2               	movwf	(??_show_pwr+1)^(0+128)
 10648  05ED  0842               	movf	(??_show_pwr+1)^(0+128),w
 10649  05EE  00F6               	movwf	uart_wr_str@len
 10650  05EF  3000               	movlw	0
 10651  05F0                     L25:
 10652  05F0  31AF  2710  3180   	fcall	_uart_wr_str
 10653  05F3                     l8264:
 10654                           
 10655                           ;main.c: 658:             IntToStr(eff, g_work_str);
 10656  05F3  0021               	movlb	1	; select bank1
 10657  05F4  0856               	movf	(show_pwr@eff+1)^(0+128),w
 10658  05F5  0020               	movlb	0	; select bank0
 10659  05F6  00A5               	movwf	IntToStr@number+1
 10660  05F7  0021               	movlb	1	; select bank1
 10661  05F8  0855               	movf	show_pwr@eff^(0+128),w
 10662  05F9  0020               	movlb	0	; select bank0
 10663  05FA  00A4               	movwf	IntToStr@number
 10664  05FB  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 10665  05FC  0021               	movlb	1	; select bank1
 10666  05FD  00C1               	movwf	??_show_pwr^(0+128)
 10667  05FE  0841               	movf	??_show_pwr^(0+128),w
 10668  05FF  0020               	movlb	0	; select bank0
 10669  0600  00A6               	movwf	IntToStr@output
 10670  0601  31A1  21B9  3180   	fcall	_IntToStr
 10671                           
 10672                           ;main.c: 659:             g_work_str_2[0] = g_work_str[4];
 10673  0604  0022               	movlb	2	; select bank2
 10674  0605  0848               	movf	(_g_work_str^(0+256)+4),w
 10675  0606  0021               	movlb	1	; select bank1
 10676  0607  00C1               	movwf	??_show_pwr^(0+128)
 10677  0608  0841               	movf	??_show_pwr^(0+128),w
 10678  0609  0022               	movlb	2	; select bank2
 10679  060A  00BD               	movwf	_g_work_str_2^(0+256)
 10680                           
 10681                           ;main.c: 660:             g_work_str_2[1] = g_work_str[5];
 10682  060B  0849               	movf	(_g_work_str^(0+256)+5),w
 10683  060C  0021               	movlb	1	; select bank1
 10684  060D  00C1               	movwf	??_show_pwr^(0+128)
 10685  060E  0841               	movf	??_show_pwr^(0+128),w
 10686  060F  0022               	movlb	2	; select bank2
 10687  0610  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 10688                           
 10689                           ;main.c: 661:             if (e_c_ledtype == 4 | e_c_ledtype == 5)
 10690  0611  3004               	movlw	4
 10691  0612  062F               	xorwf	_e_c_ledtype^(0+256),w
 10692  0613  1903               	btfsc	3,2
 10693  0614  2E19               	goto	l8274
 10694  0615  3005               	movlw	5
 10695  0616  062F               	xorwf	_e_c_ledtype^(0+256),w
 10696  0617  1D03               	btfss	3,2
 10697  0618  2E28               	goto	l8276
 10698  0619                     l8274:
 10699                           
 10700                           ;main.c: 662:                 uart_wr_str(6, 16 + 5 * 12, g_work_str_2, 2);
 10701  0619  304C               	movlw	76
 10702  061A  0021               	movlb	1	; select bank1
 10703  061B  00C1               	movwf	??_show_pwr^(0+128)
 10704  061C  0841               	movf	??_show_pwr^(0+128),w
 10705  061D  00F3               	movwf	uart_wr_str@col
 10706  061E  303D               	movlw	low _g_work_str_2
 10707  061F  00F4               	movwf	uart_wr_str@str
 10708  0620  3001               	movlw	high _g_work_str_2
 10709  0621  00F5               	movwf	uart_wr_str@str+1
 10710  0622  3002               	movlw	2
 10711  0623  00C2               	movwf	(??_show_pwr+1)^(0+128)
 10712  0624  0842               	movf	(??_show_pwr+1)^(0+128),w
 10713  0625  00F6               	movwf	uart_wr_str@len
 10714  0626  3006               	movlw	6
 10715  0627  2E43               	goto	L28
 10716  0628                     l8276:
 10717  0628  3002               	movlw	2
 10718  0629  062F               	xorwf	_e_c_ledtype^(0+256),w
 10719  062A  1903               	btfsc	3,2
 10720  062B  2E30               	goto	l8280
 10721  062C  3003               	movlw	3
 10722  062D  062F               	xorwf	_e_c_ledtype^(0+256),w
 10723  062E  1D03               	btfss	3,2
 10724  062F  2E32               	goto	l8282
 10725  0630                     l8280:
 10726                           
 10727                           ;main.c: 664:                 uart_wr_str(1, 14, g_work_str_2, 2);
 10728  0630  300E               	movlw	14
 10729  0631  2E36               	goto	L30
 10730  0632                     l8282:
 10731  0632  032F               	decf	_e_c_ledtype^(0+256),w
 10732  0633  1D03               	btfss	3,2
 10733  0634  2E45               	goto	l609
 10734                           
 10735                           ;main.c: 666:                 uart_wr_str(1, 13, g_work_str_2, 2);
 10736  0635  300D               	movlw	13
 10737  0636                     L30:
 10738  0636  0021               	movlb	1	; select bank1
 10739  0637  00C1               	movwf	??_show_pwr^(0+128)
 10740  0638  0841               	movf	??_show_pwr^(0+128),w
 10741  0639  00F3               	movwf	uart_wr_str@col
 10742  063A  303D               	movlw	low _g_work_str_2
 10743  063B  00F4               	movwf	uart_wr_str@str
 10744  063C  3001               	movlw	high _g_work_str_2
 10745  063D  00F5               	movwf	uart_wr_str@str+1
 10746  063E  3002               	movlw	2
 10747  063F  00C2               	movwf	(??_show_pwr+1)^(0+128)
 10748  0640  0842               	movf	(??_show_pwr+1)^(0+128),w
 10749  0641  00F6               	movwf	uart_wr_str@len
 10750  0642  3001               	movlw	1
 10751  0643                     L28:
 10752  0643  31AF  2710         	fcall	_uart_wr_str
 10753  0645                     l609:	
 10754                           ;main.c: 668:     }
 10755                           
 10756  0645  0064               	clrwdt	;# 
 10757  0646  0008               	return
 10758  0647                     __end_of_show_pwr:
 10759                           
 10760                           	psect	text21
 10761  213E                     __ptext21:	
 10762 ;; *************** function ___flge *****************
 10763 ;; Defined at:
 10764 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flge.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  ff1             4    0[BANK0 ] void 
 10767 ;;  ff2             4    4[BANK0 ] void 
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;		None
 10770 ;; Return value:  Size  Location     Type
 10771 ;;		None               void
 10772 ;; Registers used:
 10773 ;;		wreg, status,2, status,0
 10774 ;; Tracked objects:
 10775 ;;		On entry : 1F/0
 10776 ;;		On exit  : 1F/0
 10777 ;;		Unchanged: 0/0
 10778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10779 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10781 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10782 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10783 ;;Total ram usage:       12 bytes
 10784 ;; Hardware stack levels used: 1
 10785 ;; Hardware stack levels required when called: 2
 10786 ;; This function calls:
 10787 ;;		Nothing
 10788 ;; This function is called by:
 10789 ;;		_show_pwr
 10790 ;; This function uses a non-reentrant model
 10791 ;;
 10792                           
 10793  213E                     ___flge:	
 10794                           ;psect for function ___flge
 10795                           
 10796                           
 10797                           ;incstack = 0
 10798                           ; Regs used in ___flge: [wreg+status,2+status,0]
 10799  213E  3000               	movlw	0
 10800  213F  0520               	andwf	___flge@ff1,w
 10801  2140  00F3               	movwf	??___flge
 10802  2141  3000               	movlw	0
 10803  2142  0521               	andwf	___flge@ff1+1,w
 10804  2143  00F4               	movwf	??___flge+1
 10805  2144  3080               	movlw	128
 10806  2145  0522               	andwf	___flge@ff1+2,w
 10807  2146  00F5               	movwf	??___flge+2
 10808  2147  307F               	movlw	127
 10809  2148  0523               	andwf	___flge@ff1+3,w
 10810  2149  00F6               	movwf	??___flge+3
 10811  214A  0876               	movf	??___flge+3,w
 10812  214B  0475               	iorwf	??___flge+2,w
 10813  214C  0474               	iorwf	??___flge+1,w
 10814  214D  0473               	iorwf	??___flge,w
 10815  214E  1D03               	skipz
 10816  214F  2958               	goto	l1300
 10817  2150  3000               	movlw	0
 10818  2151  00A3               	movwf	___flge@ff1+3
 10819  2152  3000               	movlw	0
 10820  2153  00A2               	movwf	___flge@ff1+2
 10821  2154  3000               	movlw	0
 10822  2155  00A1               	movwf	___flge@ff1+1
 10823  2156  3000               	movlw	0
 10824  2157  00A0               	movwf	___flge@ff1
 10825  2158                     l1300:
 10826  2158  3000               	movlw	0
 10827  2159  0524               	andwf	___flge@ff2,w
 10828  215A  00F3               	movwf	??___flge
 10829  215B  3000               	movlw	0
 10830  215C  0525               	andwf	___flge@ff2+1,w
 10831  215D  00F4               	movwf	??___flge+1
 10832  215E  3080               	movlw	128
 10833  215F  0526               	andwf	___flge@ff2+2,w
 10834  2160  00F5               	movwf	??___flge+2
 10835  2161  307F               	movlw	127
 10836  2162  0527               	andwf	___flge@ff2+3,w
 10837  2163  00F6               	movwf	??___flge+3
 10838  2164  0876               	movf	??___flge+3,w
 10839  2165  0475               	iorwf	??___flge+2,w
 10840  2166  0474               	iorwf	??___flge+1,w
 10841  2167  0473               	iorwf	??___flge,w
 10842  2168  1D03               	skipz
 10843  2169  2972               	goto	l7960
 10844  216A  3000               	movlw	0
 10845  216B  00A7               	movwf	___flge@ff2+3
 10846  216C  3000               	movlw	0
 10847  216D  00A6               	movwf	___flge@ff2+2
 10848  216E  3000               	movlw	0
 10849  216F  00A5               	movwf	___flge@ff2+1
 10850  2170  3000               	movlw	0
 10851  2171  00A4               	movwf	___flge@ff2
 10852  2172                     l7960:
 10853  2172  1FA3               	btfss	___flge@ff1+3,7
 10854  2173  298C               	goto	l7964
 10855  2174  3000               	movlw	0
 10856  2175  00F3               	movwf	??___flge
 10857  2176  3000               	movlw	0
 10858  2177  00F4               	movwf	??___flge+1
 10859  2178  3000               	movlw	0
 10860  2179  00F5               	movwf	??___flge+2
 10861  217A  3080               	movlw	128
 10862  217B  00F6               	movwf	??___flge+3
 10863  217C  0820               	movf	___flge@ff1,w
 10864  217D  02F3               	subwf	??___flge,f
 10865  217E  0821               	movf	___flge@ff1+1,w
 10866  217F  3BF4               	subwfb	??___flge+1,f
 10867  2180  0822               	movf	___flge@ff1+2,w
 10868  2181  3BF5               	subwfb	??___flge+2,f
 10869  2182  0823               	movf	___flge@ff1+3,w
 10870  2183  3BF6               	subwfb	??___flge+3,f
 10871  2184  0876               	movf	??___flge+3,w
 10872  2185  00A3               	movwf	___flge@ff1+3
 10873  2186  0875               	movf	??___flge+2,w
 10874  2187  00A2               	movwf	___flge@ff1+2
 10875  2188  0874               	movf	??___flge+1,w
 10876  2189  00A1               	movwf	___flge@ff1+1
 10877  218A  0873               	movf	??___flge,w
 10878  218B  00A0               	movwf	___flge@ff1
 10879  218C                     l7964:
 10880  218C  1FA7               	btfss	___flge@ff2+3,7
 10881  218D  29A6               	goto	l1303
 10882  218E  3000               	movlw	0
 10883  218F  00F3               	movwf	??___flge
 10884  2190  3000               	movlw	0
 10885  2191  00F4               	movwf	??___flge+1
 10886  2192  3000               	movlw	0
 10887  2193  00F5               	movwf	??___flge+2
 10888  2194  3080               	movlw	128
 10889  2195  00F6               	movwf	??___flge+3
 10890  2196  0824               	movf	___flge@ff2,w
 10891  2197  02F3               	subwf	??___flge,f
 10892  2198  0825               	movf	___flge@ff2+1,w
 10893  2199  3BF4               	subwfb	??___flge+1,f
 10894  219A  0826               	movf	___flge@ff2+2,w
 10895  219B  3BF5               	subwfb	??___flge+2,f
 10896  219C  0827               	movf	___flge@ff2+3,w
 10897  219D  3BF6               	subwfb	??___flge+3,f
 10898  219E  0876               	movf	??___flge+3,w
 10899  219F  00A7               	movwf	___flge@ff2+3
 10900  21A0  0875               	movf	??___flge+2,w
 10901  21A1  00A6               	movwf	___flge@ff2+2
 10902  21A2  0874               	movf	??___flge+1,w
 10903  21A3  00A5               	movwf	___flge@ff2+1
 10904  21A4  0873               	movf	??___flge,w
 10905  21A5  00A4               	movwf	___flge@ff2
 10906  21A6                     l1303:
 10907  21A6  3080               	movlw	128
 10908  21A7  06A3               	xorwf	___flge@ff1+3,f
 10909  21A8  3080               	movlw	128
 10910  21A9  06A7               	xorwf	___flge@ff2+3,f
 10911  21AA  0827               	movf	___flge@ff2+3,w
 10912  21AB  0223               	subwf	___flge@ff1+3,w
 10913  21AC  1D03               	skipz
 10914  21AD  0008               	return
 10915  21AE  0826               	movf	___flge@ff2+2,w
 10916  21AF  0222               	subwf	___flge@ff1+2,w
 10917  21B0  1D03               	skipz
 10918  21B1  0008               	return
 10919  21B2  0825               	movf	___flge@ff2+1,w
 10920  21B3  0221               	subwf	___flge@ff1+1,w
 10921  21B4  1D03               	skipz
 10922  21B5  0008               	return
 10923  21B6  0824               	movf	___flge@ff2,w
 10924  21B7  0220               	subwf	___flge@ff1,w
 10925  21B8  0008               	return
 10926  21B9                     __end_of___flge:
 10927                           
 10928                           	psect	text22
 10929  19B9                     __ptext22:	
 10930 ;; *************** function _lcd_swr *****************
 10931 ;; Defined at:
 10932 ;;		line 476 in file "main.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;  swr             2   10[BANK0 ] int 
 10935 ;; Auto vars:     Size  Location     Type
 10936 ;;		None
 10937 ;; Return value:  Size  Location     Type
 10938 ;;                  1    wreg      void 
 10939 ;; Registers used:
 10940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10941 ;; Tracked objects:
 10942 ;;		On entry : 1F/0
 10943 ;;		On exit  : 0/0
 10944 ;;		Unchanged: 0/0
 10945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10950 ;;Total ram usage:        4 bytes
 10951 ;; Hardware stack levels used: 1
 10952 ;; Hardware stack levels required when called: 4
 10953 ;; This function calls:
 10954 ;;		_IntToStr
 10955 ;;		_uart_wr_str
 10956 ;; This function is called by:
 10957 ;;		_lcd_pwr
 10958 ;; This function uses a non-reentrant model
 10959 ;;
 10960                           
 10961  19B9                     _lcd_swr:	
 10962                           ;psect for function _lcd_swr
 10963                           
 10964                           
 10965                           ;incstack = 0
 10966                           ; Regs used in _lcd_swr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10967  19B9  0064               	clrwdt	;# 
 10968                           
 10969                           ;main.c: 478:     if (swr != g_i_SWR_old) {
 10970  19BA  0023               	movlb	3	; select bank3
 10971  19BB  0855               	movf	(_g_i_SWR_old+1)^(0+384),w
 10972  19BC  0020               	movlb	0	; select bank0
 10973  19BD  062B               	xorwf	lcd_swr@swr+1,w
 10974  19BE  1D03               	skipz
 10975  19BF  29C4               	goto	u12825
 10976  19C0  0023               	movlb	3	; select bank3
 10977  19C1  0854               	movf	_g_i_SWR_old^(0+384),w
 10978  19C2  0020               	movlb	0	; select bank0
 10979  19C3  062A               	xorwf	lcd_swr@swr,w
 10980  19C4                     u12825:
 10981  19C4  1903               	skipnz
 10982  19C5  2A83               	goto	l566
 10983                           
 10984                           ;main.c: 479:         g_i_SWR_old = swr;
 10985  19C6  082B               	movf	lcd_swr@swr+1,w
 10986  19C7  0023               	movlb	3	; select bank3
 10987  19C8  00D5               	movwf	(_g_i_SWR_old+1)^(0+384)
 10988  19C9  0020               	movlb	0	; select bank0
 10989  19CA  082A               	movf	lcd_swr@swr,w
 10990  19CB  0023               	movlb	3	; select bank3
 10991  19CC  00D4               	movwf	_g_i_SWR_old^(0+384)
 10992                           
 10993                           ;main.c: 480:         if (swr == 0) {
 10994  19CD  0020               	movlb	0	; select bank0
 10995  19CE  082A               	movf	lcd_swr@swr,w
 10996  19CF  042B               	iorwf	lcd_swr@swr+1,w
 10997  19D0  1D03               	btfss	3,2
 10998  19D1  2A0B               	goto	l8340
 10999                           
 11000                           ;main.c: 481:             if (e_c_ledtype == 4 | e_c_ledtype == 5)
 11001  19D2  3004               	movlw	4
 11002  19D3  0022               	movlb	2	; select bank2
 11003  19D4  062F               	xorwf	_e_c_ledtype^(0+256),w
 11004  19D5  1903               	btfsc	3,2
 11005  19D6  29DB               	goto	l8328
 11006  19D7  3005               	movlw	5
 11007  19D8  062F               	xorwf	_e_c_ledtype^(0+256),w
 11008  19D9  1D03               	btfss	3,2
 11009  19DA  29ED               	goto	l8330
 11010  19DB                     l8328:
 11011                           
 11012                           ;main.c: 482:                 uart_wr_str(2, 16 + 4 * 12, "0.00", 4);
 11013  19DB  3040               	movlw	64
 11014  19DC  0020               	movlb	0	; select bank0
 11015  19DD  00AC               	movwf	??_lcd_swr
 11016  19DE  082C               	movf	??_lcd_swr,w
 11017  19DF  00F3               	movwf	uart_wr_str@col
 11018  19E0  3052               	movlw	low ((STR_18+4)| (0+32768))
 11019  19E1  00F4               	movwf	uart_wr_str@str
 11020  19E2  30B0               	movlw	high ((STR_18+4)| (0+32768))
 11021  19E3  00F5               	movwf	uart_wr_str@str+1
 11022  19E4  3004               	movlw	4
 11023  19E5  00AD               	movwf	??_lcd_swr+1
 11024  19E6  082D               	movf	??_lcd_swr+1,w
 11025  19E7  00F6               	movwf	uart_wr_str@len
 11026  19E8  3002               	movlw	2
 11027  19E9  31AF  2710  3199   	fcall	_uart_wr_str
 11028  19EC  2A07               	goto	l8338
 11029  19ED                     l8330:
 11030  19ED  082F               	movf	_e_c_ledtype^(0+256),w
 11031  19EE  1903               	btfsc	3,2
 11032  19EF  2A02               	goto	l8334
 11033                           
 11034                           ;main.c: 484:                 uart_wr_str(1, 4, "0.00", 4);
 11035  19F0  3004               	movlw	4
 11036  19F1  0020               	movlb	0	; select bank0
 11037  19F2  00AC               	movwf	??_lcd_swr
 11038  19F3  082C               	movf	??_lcd_swr,w
 11039  19F4  00F3               	movwf	uart_wr_str@col
 11040  19F5  3052               	movlw	low ((STR_18+4)| (0+32768))
 11041  19F6  00F4               	movwf	uart_wr_str@str
 11042  19F7  30B0               	movlw	high ((STR_18+4)| (0+32768))
 11043  19F8  00F5               	movwf	uart_wr_str@str+1
 11044  19F9  3004               	movlw	4
 11045  19FA  00AD               	movwf	??_lcd_swr+1
 11046  19FB  082D               	movf	??_lcd_swr+1,w
 11047  19FC  00F6               	movwf	uart_wr_str@len
 11048  19FD  3001               	movlw	1
 11049  19FE  31AF  2710  3199   	fcall	_uart_wr_str
 11050  1A01  2A07               	goto	l8338
 11051  1A02                     l8334:
 11052  1A02  082F               	movf	_e_c_ledtype^(0+256),w
 11053  1A03  1D03               	btfss	3,2
 11054  1A04  2A07               	goto	l8338
 11055                           
 11056                           ;main.c: 486:                 LATBbits.LATB6 = 1;
 11057  1A05  170D               	bsf	13,6	;volatile
 11058                           
 11059                           ;main.c: 487:                 LATBbits.LATB7 = 1;
 11060  1A06  178D               	bsf	13,7	;volatile
 11061  1A07                     l8338:
 11062                           
 11063                           ;main.c: 489:             g_i_SWR_old = 0;
 11064  1A07  0023               	movlb	3	; select bank3
 11065  1A08  01D4               	clrf	_g_i_SWR_old^(0+384)
 11066  1A09  01D5               	clrf	(_g_i_SWR_old+1)^(0+384)
 11067                           
 11068                           ;main.c: 490:         } else {
 11069  1A0A  2A83               	goto	l566
 11070  1A0B                     l8340:
 11071                           
 11072                           ;main.c: 491:             IntToStr(swr, g_work_str);
 11073  1A0B  082B               	movf	lcd_swr@swr+1,w
 11074  1A0C  00A5               	movwf	IntToStr@number+1
 11075  1A0D  082A               	movf	lcd_swr@swr,w
 11076  1A0E  00A4               	movwf	IntToStr@number
 11077  1A0F  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 11078  1A10  00AC               	movwf	??_lcd_swr
 11079  1A11  082C               	movf	??_lcd_swr,w
 11080  1A12  00A6               	movwf	IntToStr@output
 11081  1A13  31A1  21B9  3199   	fcall	_IntToStr
 11082                           
 11083                           ;main.c: 492:             g_work_str_2[0] = g_work_str[3];
 11084  1A16  0022               	movlb	2	; select bank2
 11085  1A17  0847               	movf	(_g_work_str^(0+256)+3),w
 11086  1A18  0020               	movlb	0	; select bank0
 11087  1A19  00AC               	movwf	??_lcd_swr
 11088  1A1A  082C               	movf	??_lcd_swr,w
 11089  1A1B  0022               	movlb	2	; select bank2
 11090  1A1C  00BD               	movwf	_g_work_str_2^(0+256)
 11091                           
 11092                           ;main.c: 493:             g_work_str_2[1] = '.';
 11093  1A1D  302E               	movlw	46
 11094  1A1E  0020               	movlb	0	; select bank0
 11095  1A1F  00AC               	movwf	??_lcd_swr
 11096  1A20  082C               	movf	??_lcd_swr,w
 11097  1A21  0022               	movlb	2	; select bank2
 11098  1A22  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 11099                           
 11100                           ;main.c: 494:             g_work_str_2[2] = g_work_str[4];
 11101  1A23  0848               	movf	(_g_work_str^(0+256)+4),w
 11102  1A24  0020               	movlb	0	; select bank0
 11103  1A25  00AC               	movwf	??_lcd_swr
 11104  1A26  082C               	movf	??_lcd_swr,w
 11105  1A27  0022               	movlb	2	; select bank2
 11106  1A28  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 11107                           
 11108                           ;main.c: 495:             g_work_str_2[3] = g_work_str[5];
 11109  1A29  0849               	movf	(_g_work_str^(0+256)+5),w
 11110  1A2A  0020               	movlb	0	; select bank0
 11111  1A2B  00AC               	movwf	??_lcd_swr
 11112  1A2C  082C               	movf	??_lcd_swr,w
 11113  1A2D  0022               	movlb	2	; select bank2
 11114  1A2E  00C0               	movwf	(_g_work_str_2^(0+256)+3)
 11115                           
 11116                           ;main.c: 496:             if (e_c_ledtype == 4 | e_c_ledtype == 5)
 11117  1A2F  3004               	movlw	4
 11118  1A30  062F               	xorwf	_e_c_ledtype^(0+256),w
 11119  1A31  1903               	btfsc	3,2
 11120  1A32  2A37               	goto	l8354
 11121  1A33  3005               	movlw	5
 11122  1A34  062F               	xorwf	_e_c_ledtype^(0+256),w
 11123  1A35  1D03               	btfss	3,2
 11124  1A36  2A49               	goto	l8356
 11125  1A37                     l8354:
 11126                           
 11127                           ;main.c: 497:                 uart_wr_str(2, 16 + 4 * 12, g_work_str_2, 4);
 11128  1A37  3040               	movlw	64
 11129  1A38  0020               	movlb	0	; select bank0
 11130  1A39  00AC               	movwf	??_lcd_swr
 11131  1A3A  082C               	movf	??_lcd_swr,w
 11132  1A3B  00F3               	movwf	uart_wr_str@col
 11133  1A3C  303D               	movlw	low _g_work_str_2
 11134  1A3D  00F4               	movwf	uart_wr_str@str
 11135  1A3E  3001               	movlw	high _g_work_str_2
 11136  1A3F  00F5               	movwf	uart_wr_str@str+1
 11137  1A40  3004               	movlw	4
 11138  1A41  00AD               	movwf	??_lcd_swr+1
 11139  1A42  082D               	movf	??_lcd_swr+1,w
 11140  1A43  00F6               	movwf	uart_wr_str@len
 11141  1A44  3002               	movlw	2
 11142  1A45  31AF  2710  3199   	fcall	_uart_wr_str
 11143  1A48  2A83               	goto	l566
 11144  1A49                     l8356:
 11145  1A49  082F               	movf	_e_c_ledtype^(0+256),w
 11146  1A4A  1903               	btfsc	3,2
 11147  1A4B  2A5E               	goto	l8360
 11148                           
 11149                           ;main.c: 499:                 uart_wr_str(1, 4, g_work_str_2, 4);
 11150  1A4C  3004               	movlw	4
 11151  1A4D  0020               	movlb	0	; select bank0
 11152  1A4E  00AC               	movwf	??_lcd_swr
 11153  1A4F  082C               	movf	??_lcd_swr,w
 11154  1A50  00F3               	movwf	uart_wr_str@col
 11155  1A51  303D               	movlw	low _g_work_str_2
 11156  1A52  00F4               	movwf	uart_wr_str@str
 11157  1A53  3001               	movlw	high _g_work_str_2
 11158  1A54  00F5               	movwf	uart_wr_str@str+1
 11159  1A55  3004               	movlw	4
 11160  1A56  00AD               	movwf	??_lcd_swr+1
 11161  1A57  082D               	movf	??_lcd_swr+1,w
 11162  1A58  00F6               	movwf	uart_wr_str@len
 11163  1A59  3001               	movlw	1
 11164  1A5A  31AF  2710  3199   	fcall	_uart_wr_str
 11165  1A5D  2A83               	goto	l566
 11166  1A5E                     l8360:
 11167  1A5E  082F               	movf	_e_c_ledtype^(0+256),w
 11168  1A5F  1D03               	btfss	3,2
 11169  1A60  2A83               	goto	l566
 11170                           
 11171                           ;main.c: 501:                 if (swr <= 150) {
 11172  1A61  0020               	movlb	0	; select bank0
 11173  1A62  082B               	movf	lcd_swr@swr+1,w
 11174  1A63  3A80               	xorlw	128
 11175  1A64  00AC               	movwf	??_lcd_swr
 11176  1A65  3080               	movlw	128
 11177  1A66  022C               	subwf	??_lcd_swr,w
 11178  1A67  1D03               	skipz
 11179  1A68  2A6B               	goto	u12925
 11180  1A69  3097               	movlw	151
 11181  1A6A  022A               	subwf	lcd_swr@swr,w
 11182  1A6B                     u12925:
 11183  1A6B  1803               	skipnc
 11184  1A6C  2A71               	goto	l8366
 11185                           
 11186                           ;main.c: 502:                     LATBbits.LATB6 = 0;
 11187  1A6D  0022               	movlb	2	; select bank2
 11188  1A6E  130D               	bcf	13,6	;volatile
 11189                           
 11190                           ;main.c: 503:                     LATBbits.LATB7 = 1;
 11191  1A6F  178D               	bsf	13,7	;volatile
 11192                           
 11193                           ;main.c: 504:                 }
 11194  1A70  2A83               	goto	l566
 11195  1A71                     l8366:
 11196  1A71  0020               	movlb	0	; select bank0
 11197  1A72  082B               	movf	lcd_swr@swr+1,w
 11198  1A73  3A80               	xorlw	128
 11199  1A74  00AC               	movwf	??_lcd_swr
 11200  1A75  3080               	movlw	128
 11201  1A76  022C               	subwf	??_lcd_swr,w
 11202  1A77  1D03               	skipz
 11203  1A78  2A7B               	goto	u12935
 11204  1A79  30FB               	movlw	251
 11205  1A7A  022A               	subwf	lcd_swr@swr,w
 11206  1A7B                     u12935:
 11207  1A7B  1803               	skipnc
 11208  1A7C  2A80               	goto	l585
 11209                           
 11210                           ;main.c: 506:                     LATBbits.LATB6 = 0;
 11211  1A7D  0022               	movlb	2	; select bank2
 11212  1A7E  130D               	bcf	13,6	;volatile
 11213  1A7F  2A82               	goto	L32
 11214  1A80                     l585:	
 11215                           ;main.c: 509:                 else {
 11216                           
 11217                           ;main.c: 508:                 }
 11218                           
 11219                           ;main.c: 507:                     LATBbits.LATB7 = 0;
 11220                           
 11221                           
 11222                           ;main.c: 510:                     LATBbits.LATB6 = 1;
 11223  1A80  0022               	movlb	2	; select bank2
 11224  1A81  170D               	bsf	13,6	;volatile
 11225  1A82                     L32:
 11226                           
 11227                           ;main.c: 511:                     LATBbits.LATB7 = 0;
 11228  1A82  138D               	bcf	13,7	;volatile
 11229  1A83                     l566:	
 11230                           ;main.c: 515:     }
 11231                           
 11232  1A83  0064               	clrwdt	;# 
 11233                           
 11234                           ;main.c: 517:     return;
 11235  1A84  0008               	return
 11236  1A85                     __end_of_lcd_swr:
 11237                           
 11238                           	psect	text23
 11239  0820                     __ptext23:	
 11240 ;; *************** function _get_pwr *****************
 11241 ;; Defined at:
 11242 ;;		line 173 in file "./main.h"
 11243 ;; Parameters:    Size  Location     Type
 11244 ;;		None
 11245 ;; Auto vars:     Size  Location     Type
 11246 ;;  l_doub_pwr      4   45[BANK1 ] void 
 11247 ;;  l_Forward       4   41[BANK1 ] long 
 11248 ;;  l_Reverse       4   37[BANK1 ] long 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      void 
 11251 ;; Registers used:
 11252 ;;		wreg, status,2, status,0, pclath, cstack
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/2
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Totals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;Total ram usage:       20 bytes
 11263 ;; Hardware stack levels used: 1
 11264 ;; Hardware stack levels required when called: 4
 11265 ;; This function calls:
 11266 ;;		___aldiv
 11267 ;;		___fladd
 11268 ;;		___fldiv
 11269 ;;		___flmul
 11270 ;;		___fltol
 11271 ;;		___lmul
 11272 ;;		___wmul
 11273 ;;		___xxtofl
 11274 ;;		_correction
 11275 ;;		_get_forward
 11276 ;;		_get_reverse
 11277 ;; This function is called by:
 11278 ;;		_get_swr
 11279 ;;		_lcd_pwr
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283  0820                     _get_pwr:	
 11284                           ;psect for function _get_pwr
 11285                           
 11286                           
 11287                           ;incstack = 0
 11288                           ; Regs used in _get_pwr: [wreg+status,2+status,0+pclath+cstack]
 11289  0820  0064               	clrwdt	;# 
 11290                           
 11291                           ;./main.h: 178:     l_Forward = get_forward();
 11292  0821  31A0  2000  3188   	fcall	_get_forward
 11293  0824  082A               	movf	?_get_forward,w
 11294  0825  0021               	movlb	1	; select bank1
 11295  0826  00C9               	movwf	get_pwr@l_Forward^(0+128)
 11296  0827  0020               	movlb	0	; select bank0
 11297  0828  082B               	movf	?_get_forward+1,w
 11298  0829  0021               	movlb	1	; select bank1
 11299  082A  00CA               	movwf	(get_pwr@l_Forward^(0+128)+1)
 11300  082B  01CB               	clrf	(get_pwr@l_Forward^(0+128)+2)
 11301  082C  01CC               	clrf	(get_pwr@l_Forward^(0+128)+3)
 11302                           
 11303                           ;./main.h: 179:     l_Reverse = get_reverse();
 11304  082D  31AE  26C5  3188   	fcall	_get_reverse
 11305  0830  082A               	movf	?_get_reverse,w
 11306  0831  0021               	movlb	1	; select bank1
 11307  0832  00C5               	movwf	get_pwr@l_Reverse^(0+128)
 11308  0833  0020               	movlb	0	; select bank0
 11309  0834  082B               	movf	?_get_reverse+1,w
 11310  0835  0021               	movlb	1	; select bank1
 11311  0836  00C6               	movwf	(get_pwr@l_Reverse^(0+128)+1)
 11312  0837  01C7               	clrf	(get_pwr@l_Reverse^(0+128)+2)
 11313  0838  01C8               	clrf	(get_pwr@l_Reverse^(0+128)+3)
 11314                           
 11315                           ;./main.h: 180:     if (e_c_b_D_correction == 1)
 11316  0839  0022               	movlb	2	; select bank2
 11317  083A  036B               	decf	_e_c_b_D_correction^(0+256),w
 11318  083B  1D03               	btfss	3,2
 11319  083C  285E               	goto	l8018
 11320                           
 11321                           ;./main.h: 181:         l_doub_pwr = correction((int) (l_Forward * 3));
 11322  083D  3003               	movlw	3
 11323  083E  0020               	movlb	0	; select bank0
 11324  083F  00A5               	movwf	___wmul@multiplicand
 11325  0840  3000               	movlw	0
 11326  0841  00A6               	movwf	___wmul@multiplicand+1
 11327  0842  0021               	movlb	1	; select bank1
 11328  0843  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11329  0844  0020               	movlb	0	; select bank0
 11330  0845  00A4               	movwf	___wmul@multiplier+1
 11331  0846  0021               	movlb	1	; select bank1
 11332  0847  0849               	movf	get_pwr@l_Forward^(0+128),w
 11333  0848  0020               	movlb	0	; select bank0
 11334  0849  00A3               	movwf	___wmul@multiplier
 11335  084A  31AD  2515  3188   	fcall	___wmul
 11336  084D  0824               	movf	?___wmul+1,w
 11337  084E  00AA               	movwf	correction@input+1
 11338  084F  0823               	movf	?___wmul,w
 11339  0850  00A9               	movwf	correction@input
 11340  0851  319C  2428  3188   	fcall	_correction
 11341  0854  0829               	movf	?_correction,w
 11342  0855  00AC               	movwf	___xxtofl@val
 11343  0856  082A               	movf	?_correction+1,w
 11344  0857  00AD               	movwf	___xxtofl@val+1
 11345  0858  0D89               	rlf	9,f
 11346  0859  3B89               	subwfb	9,f
 11347  085A  0989               	comf	9,f
 11348  085B  00AE               	movwf	___xxtofl@val+2
 11349  085C  00AF               	movwf	___xxtofl@val+3
 11350  085D  2882               	goto	L33
 11351  085E                     l8018:
 11352                           
 11353                           ;./main.h: 183:         l_doub_pwr = l_Forward * 3;
 11354  085E  3000               	movlw	0
 11355  085F  0020               	movlb	0	; select bank0
 11356  0860  00A7               	movwf	___lmul@multiplicand+3
 11357  0861  3000               	movlw	0
 11358  0862  00A6               	movwf	___lmul@multiplicand+2
 11359  0863  3000               	movlw	0
 11360  0864  00A5               	movwf	___lmul@multiplicand+1
 11361  0865  3003               	movlw	3
 11362  0866  00A4               	movwf	___lmul@multiplicand
 11363  0867  0021               	movlb	1	; select bank1
 11364  0868  084C               	movf	(get_pwr@l_Forward+3)^(0+128),w
 11365  0869  0020               	movlb	0	; select bank0
 11366  086A  00A3               	movwf	___lmul@multiplier+3
 11367  086B  0021               	movlb	1	; select bank1
 11368  086C  084B               	movf	(get_pwr@l_Forward+2)^(0+128),w
 11369  086D  0020               	movlb	0	; select bank0
 11370  086E  00A2               	movwf	___lmul@multiplier+2
 11371  086F  0021               	movlb	1	; select bank1
 11372  0870  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11373  0871  0020               	movlb	0	; select bank0
 11374  0872  00A1               	movwf	___lmul@multiplier+1
 11375  0873  0021               	movlb	1	; select bank1
 11376  0874  0849               	movf	get_pwr@l_Forward^(0+128),w
 11377  0875  0020               	movlb	0	; select bank0
 11378  0876  00A0               	movwf	___lmul@multiplier
 11379  0877  31AD  2555  3188   	fcall	___lmul
 11380  087A  0823               	movf	?___lmul+3,w
 11381  087B  00AF               	movwf	___xxtofl@val+3
 11382  087C  0822               	movf	?___lmul+2,w
 11383  087D  00AE               	movwf	___xxtofl@val+2
 11384  087E  0821               	movf	?___lmul+1,w
 11385  087F  00AD               	movwf	___xxtofl@val+1
 11386  0880  0820               	movf	?___lmul,w
 11387  0881  00AC               	movwf	___xxtofl@val
 11388  0882                     L33:
 11389  0882  3001               	movlw	1
 11390  0883  31A3  234F  3188   	fcall	___xxtofl
 11391  0886  082F               	movf	?___xxtofl+3,w
 11392  0887  0021               	movlb	1	; select bank1
 11393  0888  00D0               	movwf	(get_pwr@l_doub_pwr+3)^(0+128)
 11394  0889  0020               	movlb	0	; select bank0
 11395  088A  082E               	movf	?___xxtofl+2,w
 11396  088B  0021               	movlb	1	; select bank1
 11397  088C  00CF               	movwf	(get_pwr@l_doub_pwr+2)^(0+128)
 11398  088D  0020               	movlb	0	; select bank0
 11399  088E  082D               	movf	?___xxtofl+1,w
 11400  088F  0021               	movlb	1	; select bank1
 11401  0890  00CE               	movwf	(get_pwr@l_doub_pwr+1)^(0+128)
 11402  0891  0020               	movlb	0	; select bank0
 11403  0892  082C               	movf	?___xxtofl,w
 11404  0893  0021               	movlb	1	; select bank1
 11405  0894  00CD               	movwf	get_pwr@l_doub_pwr^(0+128)
 11406                           
 11407                           ;./main.h: 185:     if (l_Reverse >= l_Forward)
 11408  0895  0848               	movf	(get_pwr@l_Reverse+3)^(0+128),w
 11409  0896  3A80               	xorlw	128
 11410  0897  00BD               	movwf	??_get_pwr^(0+128)
 11411  0898  084C               	movf	(get_pwr@l_Forward+3)^(0+128),w
 11412  0899  3A80               	xorlw	128
 11413  089A  023D               	subwf	??_get_pwr^(0+128),w
 11414  089B  1D03               	skipz
 11415  089C  28A7               	goto	u11933
 11416  089D  084B               	movf	(get_pwr@l_Forward+2)^(0+128),w
 11417  089E  0247               	subwf	(get_pwr@l_Reverse+2)^(0+128),w
 11418  089F  1D03               	skipz
 11419  08A0  28A7               	goto	u11933
 11420  08A1  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11421  08A2  0246               	subwf	(get_pwr@l_Reverse+1)^(0+128),w
 11422  08A3  1D03               	skipz
 11423  08A4  28A7               	goto	u11933
 11424  08A5  0849               	movf	get_pwr@l_Forward^(0+128),w
 11425  08A6  0245               	subwf	get_pwr@l_Reverse^(0+128),w
 11426  08A7                     u11933:
 11427  08A7  1803               	btfsc	3,0
 11428  08A8  2913               	goto	l8022
 11429                           
 11430                           ;./main.h: 188:         l_Forward = ((l_Forward + l_Reverse) * 100) / (l_Forward - l_Rev
      +                          erse);
 11431  08A9  0845               	movf	get_pwr@l_Reverse^(0+128),w
 11432  08AA  0249               	subwf	get_pwr@l_Forward^(0+128),w
 11433  08AB  00BD               	movwf	??_get_pwr^(0+128)
 11434  08AC  0846               	movf	(get_pwr@l_Reverse+1)^(0+128),w
 11435  08AD  3B4A               	subwfb	(get_pwr@l_Forward+1)^(0+128),w
 11436  08AE  00BE               	movwf	(??_get_pwr^(0+128)+1)
 11437  08AF  0847               	movf	(get_pwr@l_Reverse+2)^(0+128),w
 11438  08B0  3B4B               	subwfb	(get_pwr@l_Forward+2)^(0+128),w
 11439  08B1  00BF               	movwf	(??_get_pwr^(0+128)+2)
 11440  08B2  0848               	movf	(get_pwr@l_Reverse+3)^(0+128),w
 11441  08B3  3B4C               	subwfb	(get_pwr@l_Forward+3)^(0+128),w
 11442  08B4  00C0               	movwf	(??_get_pwr^(0+128)+3)
 11443  08B5  0840               	movf	(??_get_pwr+3)^(0+128),w
 11444  08B6  0020               	movlb	0	; select bank0
 11445  08B7  00AB               	movwf	___aldiv@divisor+3
 11446  08B8  0021               	movlb	1	; select bank1
 11447  08B9  083F               	movf	(??_get_pwr+2)^(0+128),w
 11448  08BA  0020               	movlb	0	; select bank0
 11449  08BB  00AA               	movwf	___aldiv@divisor+2
 11450  08BC  0021               	movlb	1	; select bank1
 11451  08BD  083E               	movf	(??_get_pwr+1)^(0+128),w
 11452  08BE  0020               	movlb	0	; select bank0
 11453  08BF  00A9               	movwf	___aldiv@divisor+1
 11454  08C0  0021               	movlb	1	; select bank1
 11455  08C1  083D               	movf	??_get_pwr^(0+128),w
 11456  08C2  0020               	movlb	0	; select bank0
 11457  08C3  00A8               	movwf	___aldiv@divisor
 11458  08C4  0021               	movlb	1	; select bank1
 11459  08C5  0849               	movf	get_pwr@l_Forward^(0+128),w
 11460  08C6  0745               	addwf	get_pwr@l_Reverse^(0+128),w
 11461  08C7  00C1               	movwf	(??_get_pwr+4)^(0+128)
 11462  08C8  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11463  08C9  3D46               	addwfc	(get_pwr@l_Reverse+1)^(0+128),w
 11464  08CA  00C2               	movwf	((??_get_pwr+4)^(0+128)+1)
 11465  08CB  084B               	movf	(get_pwr@l_Forward+2)^(0+128),w
 11466  08CC  3D47               	addwfc	(get_pwr@l_Reverse+2)^(0+128),w
 11467  08CD  00C3               	movwf	((??_get_pwr+4)^(0+128)+2)
 11468  08CE  084C               	movf	(get_pwr@l_Forward+3)^(0+128),w
 11469  08CF  3D48               	addwfc	(get_pwr@l_Reverse+3)^(0+128),w
 11470  08D0  00C4               	movwf	((??_get_pwr+4)^(0+128)+3)
 11471  08D1  0844               	movf	(??_get_pwr+7)^(0+128),w
 11472  08D2  0020               	movlb	0	; select bank0
 11473  08D3  00A3               	movwf	___lmul@multiplier+3
 11474  08D4  0021               	movlb	1	; select bank1
 11475  08D5  0843               	movf	(??_get_pwr+6)^(0+128),w
 11476  08D6  0020               	movlb	0	; select bank0
 11477  08D7  00A2               	movwf	___lmul@multiplier+2
 11478  08D8  0021               	movlb	1	; select bank1
 11479  08D9  0842               	movf	(??_get_pwr+5)^(0+128),w
 11480  08DA  0020               	movlb	0	; select bank0
 11481  08DB  00A1               	movwf	___lmul@multiplier+1
 11482  08DC  0021               	movlb	1	; select bank1
 11483  08DD  0841               	movf	(??_get_pwr+4)^(0+128),w
 11484  08DE  0020               	movlb	0	; select bank0
 11485  08DF  00A0               	movwf	___lmul@multiplier
 11486  08E0  3000               	movlw	0
 11487  08E1  00A7               	movwf	___lmul@multiplicand+3
 11488  08E2  3000               	movlw	0
 11489  08E3  00A6               	movwf	___lmul@multiplicand+2
 11490  08E4  3000               	movlw	0
 11491  08E5  00A5               	movwf	___lmul@multiplicand+1
 11492  08E6  3064               	movlw	100
 11493  08E7  00A4               	movwf	___lmul@multiplicand
 11494  08E8  31AD  2555  3188   	fcall	___lmul
 11495  08EB  0823               	movf	?___lmul+3,w
 11496  08EC  00AF               	movwf	___aldiv@dividend+3
 11497  08ED  0822               	movf	?___lmul+2,w
 11498  08EE  00AE               	movwf	___aldiv@dividend+2
 11499  08EF  0821               	movf	?___lmul+1,w
 11500  08F0  00AD               	movwf	___aldiv@dividend+1
 11501  08F1  0820               	movf	?___lmul,w
 11502  08F2  00AC               	movwf	___aldiv@dividend
 11503  08F3  31A2  2239  3188   	fcall	___aldiv
 11504  08F6  082B               	movf	?___aldiv+3,w
 11505  08F7  0021               	movlb	1	; select bank1
 11506  08F8  00CC               	movwf	(get_pwr@l_Forward+3)^(0+128)
 11507  08F9  0020               	movlb	0	; select bank0
 11508  08FA  082A               	movf	?___aldiv+2,w
 11509  08FB  0021               	movlb	1	; select bank1
 11510  08FC  00CB               	movwf	(get_pwr@l_Forward+2)^(0+128)
 11511  08FD  0020               	movlb	0	; select bank0
 11512  08FE  0829               	movf	?___aldiv+1,w
 11513  08FF  0021               	movlb	1	; select bank1
 11514  0900  00CA               	movwf	(get_pwr@l_Forward+1)^(0+128)
 11515  0901  0020               	movlb	0	; select bank0
 11516  0902  0828               	movf	?___aldiv,w
 11517  0903  0021               	movlb	1	; select bank1
 11518  0904  00C9               	movwf	get_pwr@l_Forward^(0+128)
 11519                           
 11520                           ;./main.h: 189:         if (l_Forward > 999)
 11521  0905  1BCC               	btfsc	(get_pwr@l_Forward+3)^(0+128),7
 11522  0906  291C               	goto	l8030
 11523  0907  084C               	movf	(get_pwr@l_Forward+3)^(0+128),w
 11524  0908  1D03               	btfss	3,2
 11525  0909  2913               	goto	l8022
 11526  090A  084B               	movf	(get_pwr@l_Forward+2)^(0+128),w
 11527  090B  1D03               	btfss	3,2
 11528  090C  2913               	goto	l8022
 11529  090D  30E8               	movlw	232
 11530  090E  0249               	subwf	get_pwr@l_Forward^(0+128),w
 11531  090F  3003               	movlw	3
 11532  0910  3B4A               	subwfb	(get_pwr@l_Forward+1)^(0+128),w
 11533  0911  1C03               	btfss	3,0
 11534  0912  291C               	goto	l8030
 11535  0913                     l8022:
 11536                           
 11537                           ;./main.h: 186:         l_Forward = 999;
 11538  0913  3000               	movlw	0
 11539  0914  0021               	movlb	1	; select bank1
 11540  0915  00CC               	movwf	(get_pwr@l_Forward+3)^(0+128)
 11541  0916  3000               	movlw	0
 11542  0917  00CB               	movwf	(get_pwr@l_Forward+2)^(0+128)
 11543  0918  3003               	movlw	3
 11544  0919  00CA               	movwf	(get_pwr@l_Forward+1)^(0+128)
 11545  091A  30E7               	movlw	231
 11546  091B  00C9               	movwf	get_pwr@l_Forward^(0+128)
 11547  091C                     l8030:
 11548                           
 11549                           ;./main.h: 193:     l_doub_pwr = l_doub_pwr * e_c_K_Mult / 1000.0;
 11550  091C  3044               	movlw	68
 11551  091D  0020               	movlb	0	; select bank0
 11552  091E  00BD               	movwf	___fldiv@a+3
 11553  091F  307A               	movlw	122
 11554  0920  00BC               	movwf	___fldiv@a+2
 11555  0921  3000               	movlw	0
 11556  0922  00BB               	movwf	___fldiv@a+1
 11557  0923  3000               	movlw	0
 11558  0924  00BA               	movwf	___fldiv@a
 11559  0925  0021               	movlb	1	; select bank1
 11560  0926  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11561  0927  0020               	movlb	0	; select bank0
 11562  0928  00EB               	movwf	___flmul@b+3
 11563  0929  0021               	movlb	1	; select bank1
 11564  092A  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11565  092B  0020               	movlb	0	; select bank0
 11566  092C  00EA               	movwf	___flmul@b+2
 11567  092D  0021               	movlb	1	; select bank1
 11568  092E  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11569  092F  0020               	movlb	0	; select bank0
 11570  0930  00E9               	movwf	___flmul@b+1
 11571  0931  0021               	movlb	1	; select bank1
 11572  0932  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11573  0933  0020               	movlb	0	; select bank0
 11574  0934  00E8               	movwf	___flmul@b
 11575  0935  0023               	movlb	3	; select bank3
 11576  0936  0859               	movf	_e_c_K_Mult^(0+384),w
 11577  0937  0021               	movlb	1	; select bank1
 11578  0938  00BD               	movwf	??_get_pwr^(0+128)
 11579  0939  01BE               	clrf	(??_get_pwr^(0+128)+1)
 11580  093A  01BF               	clrf	(??_get_pwr^(0+128)+2)
 11581  093B  01C0               	clrf	(??_get_pwr^(0+128)+3)
 11582  093C  0840               	movf	(??_get_pwr+3)^(0+128),w
 11583  093D  0020               	movlb	0	; select bank0
 11584  093E  00AF               	movwf	___xxtofl@val+3
 11585  093F  0021               	movlb	1	; select bank1
 11586  0940  083F               	movf	(??_get_pwr+2)^(0+128),w
 11587  0941  0020               	movlb	0	; select bank0
 11588  0942  00AE               	movwf	___xxtofl@val+2
 11589  0943  0021               	movlb	1	; select bank1
 11590  0944  083E               	movf	(??_get_pwr+1)^(0+128),w
 11591  0945  0020               	movlb	0	; select bank0
 11592  0946  00AD               	movwf	___xxtofl@val+1
 11593  0947  0021               	movlb	1	; select bank1
 11594  0948  083D               	movf	??_get_pwr^(0+128),w
 11595  0949  0020               	movlb	0	; select bank0
 11596  094A  00AC               	movwf	___xxtofl@val
 11597  094B  3001               	movlw	1
 11598  094C  31A3  234F  3188   	fcall	___xxtofl
 11599  094F  082F               	movf	?___xxtofl+3,w
 11600  0950  00EF               	movwf	___flmul@a+3
 11601  0951  082E               	movf	?___xxtofl+2,w
 11602  0952  00EE               	movwf	___flmul@a+2
 11603  0953  082D               	movf	?___xxtofl+1,w
 11604  0954  00ED               	movwf	___flmul@a+1
 11605  0955  082C               	movf	?___xxtofl,w
 11606  0956  00EC               	movwf	___flmul@a
 11607  0957  3193  233E  3188   	fcall	___flmul
 11608  095A  086B               	movf	?___flmul+3,w
 11609  095B  00C1               	movwf	___fldiv@b+3
 11610  095C  086A               	movf	?___flmul+2,w
 11611  095D  00C0               	movwf	___fldiv@b+2
 11612  095E  0869               	movf	?___flmul+1,w
 11613  095F  00BF               	movwf	___fldiv@b+1
 11614  0960  0868               	movf	?___flmul,w
 11615  0961  00BE               	movwf	___fldiv@b
 11616  0962  319E  2687  3188   	fcall	___fldiv
 11617  0965  083D               	movf	?___fldiv+3,w
 11618  0966  0021               	movlb	1	; select bank1
 11619  0967  00D0               	movwf	(get_pwr@l_doub_pwr+3)^(0+128)
 11620  0968  0020               	movlb	0	; select bank0
 11621  0969  083C               	movf	?___fldiv+2,w
 11622  096A  0021               	movlb	1	; select bank1
 11623  096B  00CF               	movwf	(get_pwr@l_doub_pwr+2)^(0+128)
 11624  096C  0020               	movlb	0	; select bank0
 11625  096D  083B               	movf	?___fldiv+1,w
 11626  096E  0021               	movlb	1	; select bank1
 11627  096F  00CE               	movwf	(get_pwr@l_doub_pwr+1)^(0+128)
 11628  0970  0020               	movlb	0	; select bank0
 11629  0971  083A               	movf	?___fldiv,w
 11630  0972  0021               	movlb	1	; select bank1
 11631  0973  00CD               	movwf	get_pwr@l_doub_pwr^(0+128)
 11632                           
 11633                           ;./main.h: 194:     l_doub_pwr = l_doub_pwr / 1.414;
 11634  0974  303F               	movlw	63
 11635  0975  0020               	movlb	0	; select bank0
 11636  0976  00BD               	movwf	___fldiv@a+3
 11637  0977  30B4               	movlw	180
 11638  0978  00BC               	movwf	___fldiv@a+2
 11639  0979  30FD               	movlw	253
 11640  097A  00BB               	movwf	___fldiv@a+1
 11641  097B  30F4               	movlw	244
 11642  097C  00BA               	movwf	___fldiv@a
 11643  097D  0021               	movlb	1	; select bank1
 11644  097E  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11645  097F  0020               	movlb	0	; select bank0
 11646  0980  00C1               	movwf	___fldiv@b+3
 11647  0981  0021               	movlb	1	; select bank1
 11648  0982  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11649  0983  0020               	movlb	0	; select bank0
 11650  0984  00C0               	movwf	___fldiv@b+2
 11651  0985  0021               	movlb	1	; select bank1
 11652  0986  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11653  0987  0020               	movlb	0	; select bank0
 11654  0988  00BF               	movwf	___fldiv@b+1
 11655  0989  0021               	movlb	1	; select bank1
 11656  098A  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11657  098B  0020               	movlb	0	; select bank0
 11658  098C  00BE               	movwf	___fldiv@b
 11659  098D  319E  2687  3188   	fcall	___fldiv
 11660  0990  083D               	movf	?___fldiv+3,w
 11661  0991  0021               	movlb	1	; select bank1
 11662  0992  00D0               	movwf	(get_pwr@l_doub_pwr+3)^(0+128)
 11663  0993  0020               	movlb	0	; select bank0
 11664  0994  083C               	movf	?___fldiv+2,w
 11665  0995  0021               	movlb	1	; select bank1
 11666  0996  00CF               	movwf	(get_pwr@l_doub_pwr+2)^(0+128)
 11667  0997  0020               	movlb	0	; select bank0
 11668  0998  083B               	movf	?___fldiv+1,w
 11669  0999  0021               	movlb	1	; select bank1
 11670  099A  00CE               	movwf	(get_pwr@l_doub_pwr+1)^(0+128)
 11671  099B  0020               	movlb	0	; select bank0
 11672  099C  083A               	movf	?___fldiv,w
 11673  099D  0021               	movlb	1	; select bank1
 11674  099E  00CD               	movwf	get_pwr@l_doub_pwr^(0+128)
 11675                           
 11676                           ;./main.h: 195:     if (e_c_b_P_High == 1)
 11677  099F  0022               	movlb	2	; select bank2
 11678  09A0  0331               	decf	_e_c_b_P_High^(0+256),w
 11679  09A1  1D03               	btfss	3,2
 11680  09A2  29A8               	goto	l8038
 11681                           
 11682                           ;./main.h: 196:         l_doub_pwr = l_doub_pwr * l_doub_pwr / 50;
 11683  09A3  3042               	movlw	66
 11684  09A4  0020               	movlb	0	; select bank0
 11685  09A5  00BD               	movwf	___fldiv@a+3
 11686  09A6  3048               	movlw	72
 11687  09A7  29AC               	goto	L34
 11688  09A8                     l8038:
 11689                           
 11690                           ;./main.h: 198:         l_doub_pwr = l_doub_pwr * l_doub_pwr / 5;
 11691  09A8  3040               	movlw	64
 11692  09A9  0020               	movlb	0	; select bank0
 11693  09AA  00BD               	movwf	___fldiv@a+3
 11694  09AB  30A0               	movlw	160
 11695  09AC                     L34:
 11696  09AC  00BC               	movwf	___fldiv@a+2
 11697  09AD  3000               	movlw	0
 11698  09AE  00BB               	movwf	___fldiv@a+1
 11699  09AF  3000               	movlw	0
 11700  09B0  00BA               	movwf	___fldiv@a
 11701  09B1  0021               	movlb	1	; select bank1
 11702  09B2  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11703  09B3  0020               	movlb	0	; select bank0
 11704  09B4  00EB               	movwf	___flmul@b+3
 11705  09B5  0021               	movlb	1	; select bank1
 11706  09B6  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11707  09B7  0020               	movlb	0	; select bank0
 11708  09B8  00EA               	movwf	___flmul@b+2
 11709  09B9  0021               	movlb	1	; select bank1
 11710  09BA  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11711  09BB  0020               	movlb	0	; select bank0
 11712  09BC  00E9               	movwf	___flmul@b+1
 11713  09BD  0021               	movlb	1	; select bank1
 11714  09BE  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11715  09BF  0020               	movlb	0	; select bank0
 11716  09C0  00E8               	movwf	___flmul@b
 11717  09C1  0021               	movlb	1	; select bank1
 11718  09C2  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11719  09C3  0020               	movlb	0	; select bank0
 11720  09C4  00EF               	movwf	___flmul@a+3
 11721  09C5  0021               	movlb	1	; select bank1
 11722  09C6  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11723  09C7  0020               	movlb	0	; select bank0
 11724  09C8  00EE               	movwf	___flmul@a+2
 11725  09C9  0021               	movlb	1	; select bank1
 11726  09CA  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11727  09CB  0020               	movlb	0	; select bank0
 11728  09CC  00ED               	movwf	___flmul@a+1
 11729  09CD  0021               	movlb	1	; select bank1
 11730  09CE  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11731  09CF  0020               	movlb	0	; select bank0
 11732  09D0  00EC               	movwf	___flmul@a
 11733  09D1  3193  233E  3188   	fcall	___flmul
 11734  09D4  086B               	movf	?___flmul+3,w
 11735  09D5  00C1               	movwf	___fldiv@b+3
 11736  09D6  086A               	movf	?___flmul+2,w
 11737  09D7  00C0               	movwf	___fldiv@b+2
 11738  09D8  0869               	movf	?___flmul+1,w
 11739  09D9  00BF               	movwf	___fldiv@b+1
 11740  09DA  0868               	movf	?___flmul,w
 11741  09DB  00BE               	movwf	___fldiv@b
 11742  09DC  319E  2687  3188   	fcall	___fldiv
 11743  09DF  083D               	movf	?___fldiv+3,w
 11744  09E0  0021               	movlb	1	; select bank1
 11745  09E1  00D0               	movwf	(get_pwr@l_doub_pwr+3)^(0+128)
 11746  09E2  0020               	movlb	0	; select bank0
 11747  09E3  083C               	movf	?___fldiv+2,w
 11748  09E4  0021               	movlb	1	; select bank1
 11749  09E5  00CF               	movwf	(get_pwr@l_doub_pwr+2)^(0+128)
 11750  09E6  0020               	movlb	0	; select bank0
 11751  09E7  083B               	movf	?___fldiv+1,w
 11752  09E8  0021               	movlb	1	; select bank1
 11753  09E9  00CE               	movwf	(get_pwr@l_doub_pwr+1)^(0+128)
 11754  09EA  0020               	movlb	0	; select bank0
 11755  09EB  083A               	movf	?___fldiv,w
 11756  09EC  0021               	movlb	1	; select bank1
 11757  09ED  00CD               	movwf	get_pwr@l_doub_pwr^(0+128)
 11758                           
 11759                           ;./main.h: 199:     l_doub_pwr = l_doub_pwr + 0.5;
 11760  09EE  303F               	movlw	63
 11761  09EF  0020               	movlb	0	; select bank0
 11762  09F0  00D7               	movwf	___fladd@b+3
 11763  09F1  3000               	movlw	0
 11764  09F2  00D6               	movwf	___fladd@b+2
 11765  09F3  3000               	movlw	0
 11766  09F4  00D5               	movwf	___fladd@b+1
 11767  09F5  3000               	movlw	0
 11768  09F6  00D4               	movwf	___fladd@b
 11769  09F7  0021               	movlb	1	; select bank1
 11770  09F8  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11771  09F9  0020               	movlb	0	; select bank0
 11772  09FA  00DB               	movwf	___fladd@a+3
 11773  09FB  0021               	movlb	1	; select bank1
 11774  09FC  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11775  09FD  0020               	movlb	0	; select bank0
 11776  09FE  00DA               	movwf	___fladd@a+2
 11777  09FF  0021               	movlb	1	; select bank1
 11778  0A00  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11779  0A01  0020               	movlb	0	; select bank0
 11780  0A02  00D9               	movwf	___fladd@a+1
 11781  0A03  0021               	movlb	1	; select bank1
 11782  0A04  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11783  0A05  0020               	movlb	0	; select bank0
 11784  0A06  00D8               	movwf	___fladd@a
 11785  0A07  3191  215D  3188   	fcall	___fladd
 11786  0A0A  0857               	movf	?___fladd+3,w
 11787  0A0B  0021               	movlb	1	; select bank1
 11788  0A0C  00D0               	movwf	(get_pwr@l_doub_pwr+3)^(0+128)
 11789  0A0D  0020               	movlb	0	; select bank0
 11790  0A0E  0856               	movf	?___fladd+2,w
 11791  0A0F  0021               	movlb	1	; select bank1
 11792  0A10  00CF               	movwf	(get_pwr@l_doub_pwr+2)^(0+128)
 11793  0A11  0020               	movlb	0	; select bank0
 11794  0A12  0855               	movf	?___fladd+1,w
 11795  0A13  0021               	movlb	1	; select bank1
 11796  0A14  00CE               	movwf	(get_pwr@l_doub_pwr+1)^(0+128)
 11797  0A15  0020               	movlb	0	; select bank0
 11798  0A16  0854               	movf	?___fladd,w
 11799  0A17  0021               	movlb	1	; select bank1
 11800  0A18  00CD               	movwf	get_pwr@l_doub_pwr^(0+128)
 11801                           
 11802                           ;./main.h: 201:     g_i_PWR = (int) (l_doub_pwr);
 11803  0A19  0850               	movf	(get_pwr@l_doub_pwr+3)^(0+128),w
 11804  0A1A  00B5               	movwf	(___fltol@f1+3)^(0+128)
 11805  0A1B  084F               	movf	(get_pwr@l_doub_pwr+2)^(0+128),w
 11806  0A1C  00B4               	movwf	(___fltol@f1+2)^(0+128)
 11807  0A1D  084E               	movf	(get_pwr@l_doub_pwr+1)^(0+128),w
 11808  0A1E  00B3               	movwf	(___fltol@f1+1)^(0+128)
 11809  0A1F  084D               	movf	get_pwr@l_doub_pwr^(0+128),w
 11810  0A20  00B2               	movwf	___fltol@f1^(0+128)
 11811  0A21  31A0  2060  3188   	fcall	___fltol
 11812  0A24  0833               	movf	(?___fltol+1)^(0+128),w
 11813  0A25  0022               	movlb	2	; select bank2
 11814  0A26  00A7               	movwf	(_g_i_PWR+1)^(0+256)
 11815  0A27  0021               	movlb	1	; select bank1
 11816  0A28  0832               	movf	?___fltol^(0+128),w
 11817  0A29  0022               	movlb	2	; select bank2
 11818  0A2A  00A6               	movwf	_g_i_PWR^(0+256)
 11819                           
 11820                           ;./main.h: 202:     if (l_Forward < 100)
 11821  0A2B  0021               	movlb	1	; select bank1
 11822  0A2C  1BCC               	btfsc	(get_pwr@l_Forward+3)^(0+128),7
 11823  0A2D  2A3B               	goto	l8042
 11824  0A2E  084C               	movf	(get_pwr@l_Forward+3)^(0+128),w
 11825  0A2F  1D03               	btfss	3,2
 11826  0A30  2A40               	goto	l8044
 11827  0A31  084B               	movf	(get_pwr@l_Forward+2)^(0+128),w
 11828  0A32  1D03               	btfss	3,2
 11829  0A33  2A40               	goto	l8044
 11830  0A34  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11831  0A35  1D03               	btfss	3,2
 11832  0A36  2A40               	goto	l8044
 11833  0A37  3064               	movlw	100
 11834  0A38  0249               	subwf	get_pwr@l_Forward^(0+128),w
 11835  0A39  1803               	btfsc	3,0
 11836  0A3A  2A40               	goto	l8044
 11837  0A3B                     l8042:
 11838                           
 11839                           ;./main.h: 203:         g_i_SWR = 999;
 11840  0A3B  30E7               	movlw	231
 11841  0A3C  00F8               	movwf	_g_i_SWR
 11842  0A3D  3003               	movlw	3
 11843  0A3E  00F9               	movwf	_g_i_SWR+1
 11844  0A3F  0008               	return
 11845  0A40                     l8044:
 11846                           
 11847                           ;./main.h: 205:         g_i_SWR = (int) (l_Forward);
 11848  0A40  0021               	movlb	1	; select bank1
 11849  0A41  084A               	movf	(get_pwr@l_Forward+1)^(0+128),w
 11850  0A42  00F9               	movwf	_g_i_SWR+1
 11851  0A43  0849               	movf	get_pwr@l_Forward^(0+128),w
 11852  0A44  00F8               	movwf	_g_i_SWR
 11853  0A45  0008               	return
 11854  0A46                     __end_of_get_pwr:
 11855                           
 11856                           	psect	text24
 11857  2EC5                     __ptext24:	
 11858 ;; *************** function _get_reverse *****************
 11859 ;; Defined at:
 11860 ;;		line 116 in file "./main.h"
 11861 ;; Parameters:    Size  Location     Type
 11862 ;;		None
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  returnRevers    2   12[BANK0 ] unsigned int 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  2   10[BANK0 ] unsigned int 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0, pclath, cstack
 11869 ;; Tracked objects:
 11870 ;;		On entry : 1F/1
 11871 ;;		On exit  : 1F/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;Total ram usage:        6 bytes
 11879 ;; Hardware stack levels used: 1
 11880 ;; Hardware stack levels required when called: 3
 11881 ;; This function calls:
 11882 ;;		_ADC_Get_Sample
 11883 ;; This function is called by:
 11884 ;;		_get_pwr
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888  2EC5                     _get_reverse:	
 11889                           ;psect for function _get_reverse
 11890                           
 11891                           
 11892                           ;./main.h: 117:     unsigned int returnReverse;;./main.h: 118:     FVRCON = 0b10000001;
 11893                           
 11894                           ;incstack = 0
 11895                           ; Regs used in _get_reverse: [wreg+status,2+status,0+pclath+cstack]
 11896  2EC5  3081               	movlw	129
 11897  2EC6  0022               	movlb	2	; select bank2
 11898  2EC7  0097               	movwf	23	;volatile
 11899  2EC8                     l189:	
 11900                           ;./main.h: 120:     while (FVRCONbits.FVRRDY == 0);
 11901                           
 11902  2EC8  1F17               	btfss	23,6	;volatile
 11903  2EC9  2EC8               	goto	l189
 11904                           
 11905                           ;./main.h: 122:     returnReverse = ADC_Get_Sample(0);
 11906  2ECA  3000               	movlw	0
 11907  2ECB  31AD  2584  31AE   	fcall	_ADC_Get_Sample
 11908  2ECE  0874               	movf	?_ADC_Get_Sample+1,w
 11909  2ECF  00AD               	movwf	get_reverse@returnReverse+1
 11910  2ED0  0873               	movf	?_ADC_Get_Sample,w
 11911  2ED1  00AC               	movwf	get_reverse@returnReverse
 11912                           
 11913                           ;./main.h: 123:     if (returnReverse <= 1000)
 11914  2ED2  3003               	movlw	3
 11915  2ED3  022D               	subwf	get_reverse@returnReverse+1,w
 11916  2ED4  30E9               	movlw	233
 11917  2ED5  1903               	skipnz
 11918  2ED6  022C               	subwf	get_reverse@returnReverse,w
 11919  2ED7  1803               	skipnc
 11920  2ED8  2EDE               	goto	l7652
 11921                           
 11922                           ;./main.h: 124:         return returnReverse;
 11923  2ED9  082D               	movf	get_reverse@returnReverse+1,w
 11924  2EDA  00AB               	movwf	?_get_reverse+1
 11925  2EDB  082C               	movf	get_reverse@returnReverse,w
 11926  2EDC  00AA               	movwf	?_get_reverse
 11927  2EDD  0008               	return
 11928  2EDE                     l7652:
 11929                           
 11930                           ;./main.h: 125:     FVRCON = 0b10000010;
 11931  2EDE  3082               	movlw	130
 11932  2EDF  0022               	movlb	2	; select bank2
 11933  2EE0  0097               	movwf	23	;volatile
 11934  2EE1                     l194:	
 11935                           ;./main.h: 127:     while (FVRCONbits.FVRRDY == 0);
 11936                           
 11937  2EE1  1F17               	btfss	23,6	;volatile
 11938  2EE2  2EE1               	goto	l194
 11939                           
 11940                           ;./main.h: 129:     returnReverse = ADC_Get_Sample(0);
 11941  2EE3  3000               	movlw	0
 11942  2EE4  31AD  2584  31AE   	fcall	_ADC_Get_Sample
 11943  2EE7  0874               	movf	?_ADC_Get_Sample+1,w
 11944  2EE8  00AD               	movwf	get_reverse@returnReverse+1
 11945  2EE9  0873               	movf	?_ADC_Get_Sample,w
 11946  2EEA  00AC               	movwf	get_reverse@returnReverse
 11947                           
 11948                           ;./main.h: 130:     if (returnReverse <= 1000)
 11949  2EEB  3003               	movlw	3
 11950  2EEC  022D               	subwf	get_reverse@returnReverse+1,w
 11951  2EED  30E9               	movlw	233
 11952  2EEE  1903               	skipnz
 11953  2EEF  022C               	subwf	get_reverse@returnReverse,w
 11954  2EF0  1803               	skipnc
 11955  2EF1  2EF7               	goto	l7662
 11956                           
 11957                           ;./main.h: 131:         return returnReverse * 2;
 11958  2EF2  352C               	lslf	get_reverse@returnReverse,w
 11959  2EF3  00AA               	movwf	?_get_reverse
 11960  2EF4  0D2D               	rlf	get_reverse@returnReverse+1,w
 11961  2EF5  00AB               	movwf	?_get_reverse+1
 11962  2EF6  0008               	return
 11963  2EF7                     l7662:
 11964                           
 11965                           ;./main.h: 132:     FVRCON = 0b10000011;
 11966  2EF7  3083               	movlw	131
 11967  2EF8  0022               	movlb	2	; select bank2
 11968  2EF9  0097               	movwf	23	;volatile
 11969  2EFA                     l198:	
 11970                           ;./main.h: 134:     while (FVRCONbits.FVRRDY == 0);
 11971                           
 11972  2EFA  1F17               	btfss	23,6	;volatile
 11973  2EFB  2EFA               	goto	l198
 11974                           
 11975                           ;./main.h: 136:     returnReverse = ADC_Get_Sample(0);
 11976  2EFC  3000               	movlw	0
 11977  2EFD  31AD  2584         	fcall	_ADC_Get_Sample
 11978  2EFF  0874               	movf	?_ADC_Get_Sample+1,w
 11979  2F00  00AD               	movwf	get_reverse@returnReverse+1
 11980  2F01  0873               	movf	?_ADC_Get_Sample,w
 11981  2F02  00AC               	movwf	get_reverse@returnReverse
 11982                           
 11983                           ;./main.h: 137:     return returnReverse * 4;
 11984  2F03  082D               	movf	get_reverse@returnReverse+1,w
 11985  2F04  00F6               	movwf	??_get_reverse+1
 11986  2F05  082C               	movf	get_reverse@returnReverse,w
 11987  2F06  00F5               	movwf	??_get_reverse
 11988  2F07  35F5               	lslf	??_get_reverse,f
 11989  2F08  0DF6               	rlf	??_get_reverse+1,f
 11990  2F09  35F5               	lslf	??_get_reverse,f
 11991  2F0A  0DF6               	rlf	??_get_reverse+1,f
 11992  2F0B  0875               	movf	??_get_reverse,w
 11993  2F0C  00AA               	movwf	?_get_reverse
 11994  2F0D  0876               	movf	??_get_reverse+1,w
 11995  2F0E  00AB               	movwf	?_get_reverse+1
 11996  2F0F  0008               	return
 11997  2F10                     __end_of_get_reverse:
 11998                           
 11999                           	psect	text25
 12000  2000                     __ptext25:	
 12001 ;; *************** function _get_forward *****************
 12002 ;; Defined at:
 12003 ;;		line 141 in file "./main.h"
 12004 ;; Parameters:    Size  Location     Type
 12005 ;;		None
 12006 ;; Auto vars:     Size  Location     Type
 12007 ;;  returnUIntVa    2   12[BANK0 ] unsigned int 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;                  2   10[BANK0 ] unsigned int 
 12010 ;; Registers used:
 12011 ;;		wreg, status,2, status,0, pclath, cstack
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/2
 12014 ;;		On exit  : 1F/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;Total ram usage:        6 bytes
 12022 ;; Hardware stack levels used: 1
 12023 ;; Hardware stack levels required when called: 3
 12024 ;; This function calls:
 12025 ;;		_ADC_Get_Sample
 12026 ;; This function is called by:
 12027 ;;		_get_pwr
 12028 ;; This function uses a non-reentrant model
 12029 ;;
 12030                           
 12031  2000                     _get_forward:	
 12032                           ;psect for function _get_forward
 12033                           
 12034                           
 12035                           ;./main.h: 142:     unsigned int returnUIntValue;;./main.h: 143:     FVRCON = 0b10000001
      +                          ;
 12036                           
 12037                           ;incstack = 0
 12038                           ; Regs used in _get_forward: [wreg+status,2+status,0+pclath+cstack]
 12039  2000  3081               	movlw	129
 12040  2001  0022               	movlb	2	; select bank2
 12041  2002  0097               	movwf	23	;volatile
 12042  2003                     l203:	
 12043                           ;./main.h: 145:     while (FVRCONbits.FVRRDY == 0);
 12044                           
 12045  2003  1F17               	btfss	23,6	;volatile
 12046  2004  2803               	goto	l203
 12047                           
 12048                           ;./main.h: 147:     returnUIntValue = ADC_Get_Sample(1);
 12049  2005  3001               	movlw	1
 12050  2006  31AD  2584  31A0   	fcall	_ADC_Get_Sample
 12051  2009  0874               	movf	?_ADC_Get_Sample+1,w
 12052  200A  00AD               	movwf	get_forward@returnUIntValue+1
 12053  200B  0873               	movf	?_ADC_Get_Sample,w
 12054  200C  00AC               	movwf	get_forward@returnUIntValue
 12055                           
 12056                           ;./main.h: 148:     if (returnUIntValue <= 1000) {
 12057  200D  3003               	movlw	3
 12058  200E  022D               	subwf	get_forward@returnUIntValue+1,w
 12059  200F  30E9               	movlw	233
 12060  2010  1903               	skipnz
 12061  2011  022C               	subwf	get_forward@returnUIntValue,w
 12062  2012  1803               	skipnc
 12063  2013  281C               	goto	l7682
 12064                           
 12065                           ;./main.h: 149:         g_b_Overload = 0;
 12066  2014  0022               	movlb	2	; select bank2
 12067  2015  01B6               	clrf	_g_b_Overload^(0+256)
 12068                           
 12069                           ;./main.h: 150:         return returnUIntValue;
 12070  2016  0020               	movlb	0	; select bank0
 12071  2017  082D               	movf	get_forward@returnUIntValue+1,w
 12072  2018  00AB               	movwf	?_get_forward+1
 12073  2019  082C               	movf	get_forward@returnUIntValue,w
 12074  201A  00AA               	movwf	?_get_forward
 12075  201B  0008               	return
 12076  201C                     l7682:
 12077                           
 12078                           ;./main.h: 152:     FVRCON = 0b10000010;
 12079  201C  3082               	movlw	130
 12080  201D  0022               	movlb	2	; select bank2
 12081  201E  0097               	movwf	23	;volatile
 12082  201F                     l208:	
 12083                           ;./main.h: 154:     while (FVRCONbits.FVRRDY == 0);
 12084                           
 12085  201F  1F17               	btfss	23,6	;volatile
 12086  2020  281F               	goto	l208
 12087                           
 12088                           ;./main.h: 156:     returnUIntValue = ADC_Get_Sample(1);
 12089  2021  3001               	movlw	1
 12090  2022  31AD  2584  31A0   	fcall	_ADC_Get_Sample
 12091  2025  0874               	movf	?_ADC_Get_Sample+1,w
 12092  2026  00AD               	movwf	get_forward@returnUIntValue+1
 12093  2027  0873               	movf	?_ADC_Get_Sample,w
 12094  2028  00AC               	movwf	get_forward@returnUIntValue
 12095                           
 12096                           ;./main.h: 157:     if (returnUIntValue <= 1000) {
 12097  2029  3003               	movlw	3
 12098  202A  022D               	subwf	get_forward@returnUIntValue+1,w
 12099  202B  30E9               	movlw	233
 12100  202C  1903               	skipnz
 12101  202D  022C               	subwf	get_forward@returnUIntValue,w
 12102  202E  1803               	skipnc
 12103  202F  2838               	goto	l7694
 12104                           
 12105                           ;./main.h: 158:         g_b_Overload = 0;
 12106  2030  0022               	movlb	2	; select bank2
 12107  2031  01B6               	clrf	_g_b_Overload^(0+256)
 12108                           
 12109                           ;./main.h: 159:         return returnUIntValue * 2;
 12110  2032  0020               	movlb	0	; select bank0
 12111  2033  352C               	lslf	get_forward@returnUIntValue,w
 12112  2034  00AA               	movwf	?_get_forward
 12113  2035  0D2D               	rlf	get_forward@returnUIntValue+1,w
 12114  2036  00AB               	movwf	?_get_forward+1
 12115  2037  0008               	return
 12116  2038                     l7694:
 12117                           
 12118                           ;./main.h: 161:     FVRCON = 0b10000011;
 12119  2038  3083               	movlw	131
 12120  2039  0022               	movlb	2	; select bank2
 12121  203A  0097               	movwf	23	;volatile
 12122  203B                     l212:	
 12123                           ;./main.h: 163:     while (FVRCONbits.FVRRDY == 0);
 12124                           
 12125  203B  1F17               	btfss	23,6	;volatile
 12126  203C  283B               	goto	l212
 12127                           
 12128                           ;./main.h: 165:     returnUIntValue = ADC_Get_Sample(1);
 12129  203D  3001               	movlw	1
 12130  203E  31AD  2584  31A0   	fcall	_ADC_Get_Sample
 12131  2041  0874               	movf	?_ADC_Get_Sample+1,w
 12132  2042  00AD               	movwf	get_forward@returnUIntValue+1
 12133  2043  0873               	movf	?_ADC_Get_Sample,w
 12134  2044  00AC               	movwf	get_forward@returnUIntValue
 12135                           
 12136                           ;./main.h: 166:     if (returnUIntValue > 1000)
 12137  2045  3003               	movlw	3
 12138  2046  022D               	subwf	get_forward@returnUIntValue+1,w
 12139  2047  30E9               	movlw	233
 12140  2048  1903               	skipnz
 12141  2049  022C               	subwf	get_forward@returnUIntValue,w
 12142  204A  1C03               	skipc
 12143  204B  2850               	goto	l7702
 12144                           
 12145                           ;./main.h: 167:         g_b_Overload = 1;
 12146  204C  0022               	movlb	2	; select bank2
 12147  204D  01B6               	clrf	_g_b_Overload^(0+256)
 12148  204E  0AB6               	incf	_g_b_Overload^(0+256),f
 12149  204F  2852               	goto	l7704
 12150  2050                     l7702:
 12151                           
 12152                           ;./main.h: 169:         g_b_Overload = 0;
 12153  2050  0022               	movlb	2	; select bank2
 12154  2051  01B6               	clrf	_g_b_Overload^(0+256)
 12155  2052                     l7704:
 12156                           
 12157                           ;./main.h: 170:     return returnUIntValue * 4;
 12158  2052  0020               	movlb	0	; select bank0
 12159  2053  082D               	movf	get_forward@returnUIntValue+1,w
 12160  2054  00F6               	movwf	??_get_forward+1
 12161  2055  082C               	movf	get_forward@returnUIntValue,w
 12162  2056  00F5               	movwf	??_get_forward
 12163  2057  35F5               	lslf	??_get_forward,f
 12164  2058  0DF6               	rlf	??_get_forward+1,f
 12165  2059  35F5               	lslf	??_get_forward,f
 12166  205A  0DF6               	rlf	??_get_forward+1,f
 12167  205B  0875               	movf	??_get_forward,w
 12168  205C  00AA               	movwf	?_get_forward
 12169  205D  0876               	movf	??_get_forward+1,w
 12170  205E  00AB               	movwf	?_get_forward+1
 12171  205F  0008               	return
 12172  2060                     __end_of_get_forward:
 12173                           
 12174                           	psect	text26
 12175  2D84                     __ptext26:	
 12176 ;; *************** function _ADC_Get_Sample *****************
 12177 ;; Defined at:
 12178 ;;		line 72 in file "cross_compiler.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;  channel         1    wreg     unsigned char 
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  channel         1    5[BANK0 ] unsigned char 
 12183 ;;  result          2    6[BANK0 ] unsigned int 
 12184 ;;  upper           1    9[BANK0 ] unsigned char 
 12185 ;;  lower           1    8[BANK0 ] unsigned char 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  2    3[COMMON] unsigned int 
 12188 ;; Registers used:
 12189 ;;		wreg, status,2, status,0
 12190 ;; Tracked objects:
 12191 ;;		On entry : 1F/2
 12192 ;;		On exit  : 1F/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12199 ;;Total ram usage:       12 bytes
 12200 ;; Hardware stack levels used: 1
 12201 ;; Hardware stack levels required when called: 2
 12202 ;; This function calls:
 12203 ;;		Nothing
 12204 ;; This function is called by:
 12205 ;;		_get_reverse
 12206 ;;		_get_forward
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210  2D84                     _ADC_Get_Sample:	
 12211                           ;psect for function _ADC_Get_Sample
 12212                           
 12213                           
 12214                           ;incstack = 0
 12215                           ; Regs used in _ADC_Get_Sample: [wreg+status,2+status,0]
 12216                           ;ADC_Get_Sample@channel stored from wreg
 12217  2D84  0020               	movlb	0	; select bank0
 12218  2D85  00A5               	movwf	ADC_Get_Sample@channel
 12219                           
 12220                           ;cross_compiler.c: 72: unsigned int ADC_Get_Sample(char channel);cross_compiler.c: 73: {
      +                          ;cross_compiler.c: 74:   ADCON0bits.CHS = channel;
 12221  2D86  0825               	movf	ADC_Get_Sample@channel,w
 12222  2D87  00A0               	movwf	??_ADC_Get_Sample
 12223  2D88  0DA0               	rlf	??_ADC_Get_Sample,f
 12224  2D89  0DA0               	rlf	??_ADC_Get_Sample,f
 12225  2D8A  0021               	movlb	1	; select bank1
 12226  2D8B  081D               	movf	29,w	;volatile
 12227  2D8C  0020               	movlb	0	; select bank0
 12228  2D8D  0620               	xorwf	??_ADC_Get_Sample,w
 12229  2D8E  3983               	andlw	-125
 12230  2D8F  0620               	xorwf	??_ADC_Get_Sample,w
 12231  2D90  0021               	movlb	1	; select bank1
 12232  2D91  009D               	movwf	29	;volatile
 12233                           
 12234                           ;cross_compiler.c: 75:   ADCON0bits.ADGO = 1;
 12235  2D92  149D               	bsf	29,1	;volatile
 12236                           
 12237                           ;cross_compiler.c: 76:   _delay((unsigned long)(20));;
 12238  2D93  3006               	movlw	6
 12239  2D94                     u14907:
 12240  2D94  0B89               	decfsz	9,f
 12241  2D95  2D94               	goto	u14907
 12242  2D96  3200               	nop2
 12243  2D97                     l833:	
 12244                           ;cross_compiler.c: 78:     ;
 12245                           
 12246                           
 12247                           ;cross_compiler.c: 77:   while (ADCON0bits.ADGO == 1)
 12248  2D97  0021               	movlb	1	; select bank1
 12249  2D98  189D               	btfsc	29,1	;volatile
 12250  2D99  2D97               	goto	l833
 12251                           
 12252                           ;cross_compiler.c: 79:   unsigned char lower = ADRESL;
 12253  2D9A  081B               	movf	27,w	;volatile
 12254  2D9B  0020               	movlb	0	; select bank0
 12255  2D9C  00A0               	movwf	??_ADC_Get_Sample
 12256  2D9D  0820               	movf	??_ADC_Get_Sample,w
 12257  2D9E  00A8               	movwf	ADC_Get_Sample@lower
 12258                           
 12259                           ;cross_compiler.c: 80:   unsigned char upper = ADRESH;
 12260  2D9F  0021               	movlb	1	; select bank1
 12261  2DA0  081C               	movf	28,w	;volatile
 12262  2DA1  0020               	movlb	0	; select bank0
 12263  2DA2  00A0               	movwf	??_ADC_Get_Sample
 12264  2DA3  0820               	movf	??_ADC_Get_Sample,w
 12265  2DA4  00A9               	movwf	ADC_Get_Sample@upper
 12266                           
 12267                           ;cross_compiler.c: 81:   unsigned int result = (unsigned int)(upper << 8) + lower;
 12268  2DA5  0828               	movf	ADC_Get_Sample@lower,w
 12269  2DA6  00A0               	movwf	??_ADC_Get_Sample
 12270  2DA7  01A1               	clrf	??_ADC_Get_Sample+1
 12271  2DA8  0829               	movf	ADC_Get_Sample@upper,w
 12272  2DA9  00A2               	movwf	??_ADC_Get_Sample+2
 12273  2DAA  01A3               	clrf	??_ADC_Get_Sample+3
 12274  2DAB  0822               	movf	??_ADC_Get_Sample+2,w
 12275  2DAC  00A3               	movwf	??_ADC_Get_Sample+3
 12276  2DAD  01A2               	clrf	??_ADC_Get_Sample+2
 12277  2DAE  0820               	movf	??_ADC_Get_Sample,w
 12278  2DAF  0722               	addwf	??_ADC_Get_Sample+2,w
 12279  2DB0  00A6               	movwf	ADC_Get_Sample@result
 12280  2DB1  0821               	movf	??_ADC_Get_Sample+1,w
 12281  2DB2  3D23               	addwfc	??_ADC_Get_Sample+3,w
 12282  2DB3  00A7               	movwf	ADC_Get_Sample@result+1
 12283                           
 12284                           ;cross_compiler.c: 82:   return result;
 12285  2DB4  0827               	movf	ADC_Get_Sample@result+1,w
 12286  2DB5  00F4               	movwf	?_ADC_Get_Sample+1
 12287  2DB6  0826               	movf	ADC_Get_Sample@result,w
 12288  2DB7  00F3               	movwf	?_ADC_Get_Sample
 12289  2DB8  0008               	return
 12290  2DB9                     __end_of_ADC_Get_Sample:
 12291                           
 12292                           	psect	text27
 12293  1C28                     __ptext27:	
 12294 ;; *************** function _correction *****************
 12295 ;; Defined at:
 12296 ;;		line 80 in file "./main.h"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;  input           2    9[BANK0 ] int 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  2    9[BANK0 ] int 
 12303 ;; Registers used:
 12304 ;;		wreg, status,2
 12305 ;; Tracked objects:
 12306 ;;		On entry : 1F/0
 12307 ;;		On exit  : 1F/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12310 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;Total ram usage:        3 bytes
 12315 ;; Hardware stack levels used: 1
 12316 ;; Hardware stack levels required when called: 2
 12317 ;; This function calls:
 12318 ;;		Nothing
 12319 ;; This function is called by:
 12320 ;;		_get_pwr
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324  1C28                     _correction:	
 12325                           ;psect for function _correction
 12326                           
 12327                           
 12328                           ;./main.h: 82:     if (input <= 80)
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in _correction: [wreg+status,2]
 12332  1C28  082A               	movf	correction@input+1,w
 12333  1C29  3A80               	xorlw	128
 12334  1C2A  00AB               	movwf	??_correction
 12335  1C2B  3080               	movlw	128
 12336  1C2C  022B               	subwf	??_correction,w
 12337  1C2D  1D03               	skipz
 12338  1C2E  2C31               	goto	u5825
 12339  1C2F  3051               	movlw	81
 12340  1C30  0229               	subwf	correction@input,w
 12341  1C31                     u5825:
 12342  1C31  1803               	skipnc
 12343  1C32  2C37               	goto	l4748
 12344                           
 12345                           ;./main.h: 83:         return 0;
 12346  1C33  0020               	movlb	0	; select bank0
 12347  1C34  01A9               	clrf	?_correction
 12348  1C35  01AA               	clrf	?_correction+1
 12349  1C36  0008               	return
 12350  1C37                     l4748:
 12351                           
 12352                           ;./main.h: 84:     if (input <= 171)
 12353  1C37  0020               	movlb	0	; select bank0
 12354  1C38  082A               	movf	correction@input+1,w
 12355  1C39  3A80               	xorlw	128
 12356  1C3A  00AB               	movwf	??_correction
 12357  1C3B  3080               	movlw	128
 12358  1C3C  022B               	subwf	??_correction,w
 12359  1C3D  1D03               	skipz
 12360  1C3E  2C41               	goto	u5835
 12361  1C3F  30AC               	movlw	172
 12362  1C40  0229               	subwf	correction@input,w
 12363  1C41                     u5835:
 12364  1C41  1803               	skipnc
 12365  1C42  2C49               	goto	l4752
 12366                           
 12367                           ;./main.h: 85:         input += 244;
 12368  1C43  30F4               	movlw	244
 12369  1C44  0020               	movlb	0	; select bank0
 12370  1C45  07A9               	addwf	correction@input,f
 12371  1C46  3000               	movlw	0
 12372  1C47  3DAA               	addwfc	correction@input+1,f
 12373  1C48  0008               	return
 12374  1C49                     l4752:
 12375  1C49  0020               	movlb	0	; select bank0
 12376  1C4A  082A               	movf	correction@input+1,w
 12377  1C4B  3A80               	xorlw	128
 12378  1C4C  00AB               	movwf	??_correction
 12379  1C4D  3081               	movlw	129
 12380  1C4E  022B               	subwf	??_correction,w
 12381  1C4F  1D03               	skipz
 12382  1C50  2C53               	goto	u5845
 12383  1C51  3049               	movlw	73
 12384  1C52  0229               	subwf	correction@input,w
 12385  1C53                     u5845:
 12386  1C53  1803               	skipnc
 12387  1C54  2C5B               	goto	l4756
 12388                           
 12389                           ;./main.h: 87:         input += 254;
 12390  1C55  30FE               	movlw	254
 12391  1C56  0020               	movlb	0	; select bank0
 12392  1C57  07A9               	addwf	correction@input,f
 12393  1C58  3000               	movlw	0
 12394  1C59  3DAA               	addwfc	correction@input+1,f
 12395  1C5A  0008               	return
 12396  1C5B                     l4756:
 12397  1C5B  0020               	movlb	0	; select bank0
 12398  1C5C  082A               	movf	correction@input+1,w
 12399  1C5D  3A80               	xorlw	128
 12400  1C5E  00AB               	movwf	??_correction
 12401  1C5F  3082               	movlw	130
 12402  1C60  022B               	subwf	??_correction,w
 12403  1C61  1D03               	skipz
 12404  1C62  2C65               	goto	u5855
 12405  1C63  3047               	movlw	71
 12406  1C64  0229               	subwf	correction@input,w
 12407  1C65                     u5855:
 12408  1C65  1803               	skipnc
 12409  1C66  2C6D               	goto	l4760
 12410                           
 12411                           ;./main.h: 89:         input += 280;
 12412  1C67  3018               	movlw	24
 12413  1C68  0020               	movlb	0	; select bank0
 12414  1C69  07A9               	addwf	correction@input,f
 12415  1C6A  3001               	movlw	1
 12416  1C6B  3DAA               	addwfc	correction@input+1,f
 12417  1C6C  0008               	return
 12418  1C6D                     l4760:
 12419  1C6D  0020               	movlb	0	; select bank0
 12420  1C6E  082A               	movf	correction@input+1,w
 12421  1C6F  3A80               	xorlw	128
 12422  1C70  00AB               	movwf	??_correction
 12423  1C71  3083               	movlw	131
 12424  1C72  022B               	subwf	??_correction,w
 12425  1C73  1D03               	skipz
 12426  1C74  2C77               	goto	u5865
 12427  1C75  3035               	movlw	53
 12428  1C76  0229               	subwf	correction@input,w
 12429  1C77                     u5865:
 12430  1C77  1803               	skipnc
 12431  1C78  2C7F               	goto	l4764
 12432                           
 12433                           ;./main.h: 91:         input += 297;
 12434  1C79  3029               	movlw	41
 12435  1C7A  0020               	movlb	0	; select bank0
 12436  1C7B  07A9               	addwf	correction@input,f
 12437  1C7C  3001               	movlw	1
 12438  1C7D  3DAA               	addwfc	correction@input+1,f
 12439  1C7E  0008               	return
 12440  1C7F                     l4764:
 12441  1C7F  0020               	movlb	0	; select bank0
 12442  1C80  082A               	movf	correction@input+1,w
 12443  1C81  3A80               	xorlw	128
 12444  1C82  00AB               	movwf	??_correction
 12445  1C83  3084               	movlw	132
 12446  1C84  022B               	subwf	??_correction,w
 12447  1C85  1D03               	skipz
 12448  1C86  2C89               	goto	u5875
 12449  1C87  304D               	movlw	77
 12450  1C88  0229               	subwf	correction@input,w
 12451  1C89                     u5875:
 12452  1C89  1803               	skipnc
 12453  1C8A  2C91               	goto	l4768
 12454                           
 12455                           ;./main.h: 93:         input += 310;
 12456  1C8B  3036               	movlw	54
 12457  1C8C  0020               	movlb	0	; select bank0
 12458  1C8D  07A9               	addwf	correction@input,f
 12459  1C8E  3001               	movlw	1
 12460  1C8F  3DAA               	addwfc	correction@input+1,f
 12461  1C90  0008               	return
 12462  1C91                     l4768:
 12463  1C91  0020               	movlb	0	; select bank0
 12464  1C92  082A               	movf	correction@input+1,w
 12465  1C93  3A80               	xorlw	128
 12466  1C94  00AB               	movwf	??_correction
 12467  1C95  3088               	movlw	136
 12468  1C96  022B               	subwf	??_correction,w
 12469  1C97  1D03               	skipz
 12470  1C98  2C9B               	goto	u5885
 12471  1C99  3086               	movlw	134
 12472  1C9A  0229               	subwf	correction@input,w
 12473  1C9B                     u5885:
 12474  1C9B  1803               	skipnc
 12475  1C9C  2CA3               	goto	l4772
 12476                           
 12477                           ;./main.h: 95:         input += 430;
 12478  1C9D  30AE               	movlw	174
 12479  1C9E  0020               	movlb	0	; select bank0
 12480  1C9F  07A9               	addwf	correction@input,f
 12481  1CA0  3001               	movlw	1
 12482  1CA1  3DAA               	addwfc	correction@input+1,f
 12483  1CA2  0008               	return
 12484  1CA3                     l4772:
 12485  1CA3  0020               	movlb	0	; select bank0
 12486  1CA4  082A               	movf	correction@input+1,w
 12487  1CA5  3A80               	xorlw	128
 12488  1CA6  00AB               	movwf	??_correction
 12489  1CA7  308C               	movlw	140
 12490  1CA8  022B               	subwf	??_correction,w
 12491  1CA9  1D03               	skipz
 12492  1CAA  2CAD               	goto	u5895
 12493  1CAB  30FB               	movlw	251
 12494  1CAC  0229               	subwf	correction@input,w
 12495  1CAD                     u5895:
 12496  1CAD  1803               	skipnc
 12497  1CAE  2CB5               	goto	l4776
 12498                           
 12499                           ;./main.h: 97:         input += 484;
 12500  1CAF  30E4               	movlw	228
 12501  1CB0  0020               	movlb	0	; select bank0
 12502  1CB1  07A9               	addwf	correction@input,f
 12503  1CB2  3001               	movlw	1
 12504  1CB3  3DAA               	addwfc	correction@input+1,f
 12505  1CB4  0008               	return
 12506  1CB5                     l4776:
 12507  1CB5  0020               	movlb	0	; select bank0
 12508  1CB6  082A               	movf	correction@input+1,w
 12509  1CB7  3A80               	xorlw	128
 12510  1CB8  00AB               	movwf	??_correction
 12511  1CB9  3092               	movlw	146
 12512  1CBA  022B               	subwf	??_correction,w
 12513  1CBB  1D03               	skipz
 12514  1CBC  2CBF               	goto	u5905
 12515  1CBD  3010               	movlw	16
 12516  1CBE  0229               	subwf	correction@input,w
 12517  1CBF                     u5905:
 12518  1CBF  1803               	skipnc
 12519  1CC0  2CC7               	goto	l4780
 12520                           
 12521                           ;./main.h: 99:         input += 530;
 12522  1CC1  3012               	movlw	18
 12523  1CC2  0020               	movlb	0	; select bank0
 12524  1CC3  07A9               	addwf	correction@input,f
 12525  1CC4  3002               	movlw	2
 12526  1CC5  3DAA               	addwfc	correction@input+1,f
 12527  1CC6  0008               	return
 12528  1CC7                     l4780:
 12529  1CC7  0020               	movlb	0	; select bank0
 12530  1CC8  082A               	movf	correction@input+1,w
 12531  1CC9  3A80               	xorlw	128
 12532  1CCA  00AB               	movwf	??_correction
 12533  1CCB  3096               	movlw	150
 12534  1CCC  022B               	subwf	??_correction,w
 12535  1CCD  1D03               	skipz
 12536  1CCE  2CD1               	goto	u5915
 12537  1CCF  30E7               	movlw	231
 12538  1CD0  0229               	subwf	correction@input,w
 12539  1CD1                     u5915:
 12540  1CD1  1803               	skipnc
 12541  1CD2  2CD9               	goto	l4784
 12542                           
 12543                           ;./main.h: 101:         input += 648;
 12544  1CD3  3088               	movlw	136
 12545  1CD4  0020               	movlb	0	; select bank0
 12546  1CD5  07A9               	addwf	correction@input,f
 12547  1CD6  3002               	movlw	2
 12548  1CD7  3DAA               	addwfc	correction@input+1,f
 12549  1CD8  0008               	return
 12550  1CD9                     l4784:
 12551  1CD9  0020               	movlb	0	; select bank0
 12552  1CDA  082A               	movf	correction@input+1,w
 12553  1CDB  3A80               	xorlw	128
 12554  1CDC  00AB               	movwf	??_correction
 12555  1CDD  309B               	movlw	155
 12556  1CDE  022B               	subwf	??_correction,w
 12557  1CDF  1D03               	skipz
 12558  1CE0  2CE3               	goto	u5925
 12559  1CE1  30EB               	movlw	235
 12560  1CE2  0229               	subwf	correction@input,w
 12561  1CE3                     u5925:
 12562  1CE3  1803               	skipnc
 12563  1CE4  2CEB               	goto	l4788
 12564                           
 12565                           ;./main.h: 103:         input += 743;
 12566  1CE5  30E7               	movlw	231
 12567  1CE6  0020               	movlb	0	; select bank0
 12568  1CE7  07A9               	addwf	correction@input,f
 12569  1CE8  3002               	movlw	2
 12570  1CE9  3DAA               	addwfc	correction@input+1,f
 12571  1CEA  0008               	return
 12572  1CEB                     l4788:
 12573  1CEB  0020               	movlb	0	; select bank0
 12574  1CEC  082A               	movf	correction@input+1,w
 12575  1CED  3A80               	xorlw	128
 12576  1CEE  00AB               	movwf	??_correction
 12577  1CEF  30A1               	movlw	161
 12578  1CF0  022B               	subwf	??_correction,w
 12579  1CF1  1D03               	skipz
 12580  1CF2  2CF5               	goto	u5935
 12581  1CF3  3037               	movlw	55
 12582  1CF4  0229               	subwf	correction@input,w
 12583  1CF5                     u5935:
 12584  1CF5  1803               	skipnc
 12585  1CF6  2CFD               	goto	l4792
 12586                           
 12587                           ;./main.h: 105:         input += 800;
 12588  1CF7  3020               	movlw	32
 12589  1CF8  0020               	movlb	0	; select bank0
 12590  1CF9  07A9               	addwf	correction@input,f
 12591  1CFA  3003               	movlw	3
 12592  1CFB  3DAA               	addwfc	correction@input+1,f
 12593  1CFC  0008               	return
 12594  1CFD                     l4792:
 12595  1CFD  0020               	movlb	0	; select bank0
 12596  1CFE  082A               	movf	correction@input+1,w
 12597  1CFF  3A80               	xorlw	128
 12598  1D00  00AB               	movwf	??_correction
 12599  1D01  30A9               	movlw	169
 12600  1D02  022B               	subwf	??_correction,w
 12601  1D03  1D03               	skipz
 12602  1D04  2D07               	goto	u5945
 12603  1D05  3005               	movlw	5
 12604  1D06  0229               	subwf	correction@input,w
 12605  1D07                     u5945:
 12606  1D07  1803               	skipnc
 12607  1D08  2D0F               	goto	l4796
 12608                           
 12609                           ;./main.h: 107:         input += 840;
 12610  1D09  3048               	movlw	72
 12611  1D0A  0020               	movlb	0	; select bank0
 12612  1D0B  07A9               	addwf	correction@input,f
 12613  1D0C  3003               	movlw	3
 12614  1D0D  3DAA               	addwfc	correction@input+1,f
 12615  1D0E  0008               	return
 12616  1D0F                     l4796:
 12617                           
 12618                           ;./main.h: 109:         input += 860;
 12619  1D0F  305C               	movlw	92
 12620  1D10  0020               	movlb	0	; select bank0
 12621  1D11  07A9               	addwf	correction@input,f
 12622  1D12  3003               	movlw	3
 12623  1D13  3DAA               	addwfc	correction@input+1,f
 12624                           
 12625                           ;./main.h: 111:     return input;
 12626  1D14  0008               	return
 12627  1D15                     __end_of_correction:
 12628                           
 12629                           	psect	text28
 12630  234F                     __ptext28:	
 12631 ;; *************** function ___xxtofl *****************
 12632 ;; Defined at:
 12633 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\xxtofl.c"
 12634 ;; Parameters:    Size  Location     Type
 12635 ;;  sign            1    wreg     unsigned char 
 12636 ;;  val             4   12[BANK0 ] long 
 12637 ;; Auto vars:     Size  Location     Type
 12638 ;;  sign            1   20[BANK0 ] unsigned char 
 12639 ;;  arg             4   22[BANK0 ] unsigned long 
 12640 ;;  exp             1   21[BANK0 ] unsigned char 
 12641 ;; Return value:  Size  Location     Type
 12642 ;;                  4   12[BANK0 ] unsigned char 
 12643 ;; Registers used:
 12644 ;;		wreg, status,2, status,0
 12645 ;; Tracked objects:
 12646 ;;		On entry : 1F/0
 12647 ;;		On exit  : 1F/0
 12648 ;;		Unchanged: 0/0
 12649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12650 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12651 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12652 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12653 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;Total ram usage:       14 bytes
 12655 ;; Hardware stack levels used: 1
 12656 ;; Hardware stack levels required when called: 2
 12657 ;; This function calls:
 12658 ;;		Nothing
 12659 ;; This function is called by:
 12660 ;;		_get_pwr
 12661 ;;		_show_pwr
 12662 ;; This function uses a non-reentrant model
 12663 ;;
 12664                           
 12665  234F                     ___xxtofl:	
 12666                           ;psect for function ___xxtofl
 12667                           
 12668                           
 12669                           ;incstack = 0
 12670                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 12671                           ;___xxtofl@sign stored from wreg
 12672  234F  00B4               	movwf	___xxtofl@sign
 12673  2350  0834               	movf	___xxtofl@sign,w
 12674  2351  1D03               	btfss	3,2
 12675  2352  1FAF               	btfss	___xxtofl@val+3,7
 12676  2353  2B64               	goto	l5664
 12677  2354  092C               	comf	___xxtofl@val,w
 12678  2355  00B6               	movwf	___xxtofl@arg
 12679  2356  092D               	comf	___xxtofl@val+1,w
 12680  2357  00B7               	movwf	___xxtofl@arg+1
 12681  2358  092E               	comf	___xxtofl@val+2,w
 12682  2359  00B8               	movwf	___xxtofl@arg+2
 12683  235A  092F               	comf	___xxtofl@val+3,w
 12684  235B  00B9               	movwf	___xxtofl@arg+3
 12685  235C  0AB6               	incf	___xxtofl@arg,f
 12686  235D  1903               	skipnz
 12687  235E  0AB7               	incf	___xxtofl@arg+1,f
 12688  235F  1903               	skipnz
 12689  2360  0AB8               	incf	___xxtofl@arg+2,f
 12690  2361  1903               	skipnz
 12691  2362  0AB9               	incf	___xxtofl@arg+3,f
 12692  2363  2B6C               	goto	l1563
 12693  2364                     l5664:
 12694  2364  082F               	movf	___xxtofl@val+3,w
 12695  2365  00B9               	movwf	___xxtofl@arg+3
 12696  2366  082E               	movf	___xxtofl@val+2,w
 12697  2367  00B8               	movwf	___xxtofl@arg+2
 12698  2368  082D               	movf	___xxtofl@val+1,w
 12699  2369  00B7               	movwf	___xxtofl@arg+1
 12700  236A  082C               	movf	___xxtofl@val,w
 12701  236B  00B6               	movwf	___xxtofl@arg
 12702  236C                     l1563:
 12703  236C  082F               	movf	___xxtofl@val+3,w
 12704  236D  042E               	iorwf	___xxtofl@val+2,w
 12705  236E  042D               	iorwf	___xxtofl@val+1,w
 12706  236F  042C               	iorwf	___xxtofl@val,w
 12707  2370  1D03               	skipz
 12708  2371  2B7B               	goto	l5670
 12709  2372  3000               	movlw	0
 12710  2373  00AF               	movwf	?___xxtofl+3
 12711  2374  3000               	movlw	0
 12712  2375  00AE               	movwf	?___xxtofl+2
 12713  2376  3000               	movlw	0
 12714  2377  00AD               	movwf	?___xxtofl+1
 12715  2378  3000               	movlw	0
 12716  2379  00AC               	movwf	?___xxtofl
 12717  237A  0008               	return
 12718  237B                     l5670:
 12719  237B  3096               	movlw	150
 12720  237C  00B0               	movwf	??___xxtofl
 12721  237D  0830               	movf	??___xxtofl,w
 12722  237E  00B5               	movwf	___xxtofl@exp
 12723  237F                     l5674:
 12724  237F  30FE               	movlw	254
 12725  2380  0539               	andwf	___xxtofl@arg+3,w
 12726  2381  1903               	btfsc	3,2
 12727  2382  2BA2               	goto	l1569
 12728  2383  3001               	movlw	1
 12729  2384  00B0               	movwf	??___xxtofl
 12730  2385  0830               	movf	??___xxtofl,w
 12731  2386  07B5               	addwf	___xxtofl@exp,f
 12732  2387  3001               	movlw	1
 12733  2388                     u7735:
 12734  2388  36B9               	lsrf	___xxtofl@arg+3,f
 12735  2389  0CB8               	rrf	___xxtofl@arg+2,f
 12736  238A  0CB7               	rrf	___xxtofl@arg+1,f
 12737  238B  0CB6               	rrf	___xxtofl@arg,f
 12738  238C  0B89               	decfsz	9,f
 12739  238D  2B88               	goto	u7735
 12740  238E  2B7F               	goto	l5674
 12741  238F                     l5676:
 12742  238F  3001               	movlw	1
 12743  2390  00B0               	movwf	??___xxtofl
 12744  2391  0830               	movf	??___xxtofl,w
 12745  2392  07B5               	addwf	___xxtofl@exp,f
 12746  2393  3001               	movlw	1
 12747  2394  07B6               	addwf	___xxtofl@arg,f
 12748  2395  3000               	movlw	0
 12749  2396  3DB7               	addwfc	___xxtofl@arg+1,f
 12750  2397  3000               	movlw	0
 12751  2398  3DB8               	addwfc	___xxtofl@arg+2,f
 12752  2399  3000               	movlw	0
 12753  239A  3DB9               	addwfc	___xxtofl@arg+3,f
 12754  239B  3001               	movlw	1
 12755  239C                     u7755:
 12756  239C  36B9               	lsrf	___xxtofl@arg+3,f
 12757  239D  0CB8               	rrf	___xxtofl@arg+2,f
 12758  239E  0CB7               	rrf	___xxtofl@arg+1,f
 12759  239F  0CB6               	rrf	___xxtofl@arg,f
 12760  23A0  0B89               	decfsz	9,f
 12761  23A1  2B9C               	goto	u7755
 12762  23A2                     l1569:
 12763  23A2  30FF               	movlw	255
 12764  23A3  0539               	andwf	___xxtofl@arg+3,w
 12765  23A4  1903               	btfsc	3,2
 12766  23A5  2BB4               	goto	l5684
 12767  23A6  2B8F               	goto	l5676
 12768  23A7                     l5686:
 12769  23A7  3002               	movlw	2
 12770  23A8  0235               	subwf	___xxtofl@exp,w
 12771  23A9  1C03               	btfss	3,0
 12772  23AA  2BB6               	goto	l1576
 12773  23AB  3001               	movlw	1
 12774  23AC  02B5               	subwf	___xxtofl@exp,f
 12775  23AD  3001               	movlw	1
 12776  23AE                     u7775:
 12777  23AE  35B6               	lslf	___xxtofl@arg,f
 12778  23AF  0DB7               	rlf	___xxtofl@arg+1,f
 12779  23B0  0DB8               	rlf	___xxtofl@arg+2,f
 12780  23B1  0DB9               	rlf	___xxtofl@arg+3,f
 12781  23B2  0B89               	decfsz	9,f
 12782  23B3  2BAE               	goto	u7775
 12783  23B4                     l5684:
 12784  23B4  1FB8               	btfss	___xxtofl@arg+2,7
 12785  23B5  2BA7               	goto	l5686
 12786  23B6                     l1576:
 12787  23B6  1835               	btfsc	___xxtofl@exp,0
 12788  23B7  2BC0               	goto	l1577
 12789  23B8  30FF               	movlw	255
 12790  23B9  05B6               	andwf	___xxtofl@arg,f
 12791  23BA  30FF               	movlw	255
 12792  23BB  05B7               	andwf	___xxtofl@arg+1,f
 12793  23BC  307F               	movlw	127
 12794  23BD  05B8               	andwf	___xxtofl@arg+2,f
 12795  23BE  30FF               	movlw	255
 12796  23BF  05B9               	andwf	___xxtofl@arg+3,f
 12797  23C0                     l1577:
 12798  23C0  1003               	clrc
 12799  23C1  0CB5               	rrf	___xxtofl@exp,f
 12800  23C2  0835               	movf	___xxtofl@exp,w
 12801  23C3  00B0               	movwf	??___xxtofl
 12802  23C4  01B1               	clrf	??___xxtofl+1
 12803  23C5  01B2               	clrf	??___xxtofl+2
 12804  23C6  01B3               	clrf	??___xxtofl+3
 12805  23C7  3018               	movlw	24
 12806  23C8                     u7815:
 12807  23C8  35B0               	lslf	??___xxtofl,f
 12808  23C9  0DB1               	rlf	??___xxtofl+1,f
 12809  23CA  0DB2               	rlf	??___xxtofl+2,f
 12810  23CB  0DB3               	rlf	??___xxtofl+3,f
 12811  23CC  0B89               	decfsz	9,f
 12812  23CD  2BC8               	goto	u7815
 12813  23CE  0830               	movf	??___xxtofl,w
 12814  23CF  04B6               	iorwf	___xxtofl@arg,f
 12815  23D0  0831               	movf	??___xxtofl+1,w
 12816  23D1  04B7               	iorwf	___xxtofl@arg+1,f
 12817  23D2  0832               	movf	??___xxtofl+2,w
 12818  23D3  04B8               	iorwf	___xxtofl@arg+2,f
 12819  23D4  0833               	movf	??___xxtofl+3,w
 12820  23D5  04B9               	iorwf	___xxtofl@arg+3,f
 12821  23D6  0834               	movf	___xxtofl@sign,w
 12822  23D7  1D03               	btfss	3,2
 12823  23D8  1FAF               	btfss	___xxtofl@val+3,7
 12824  23D9  2BDB               	goto	l5698
 12825  23DA  17B9               	bsf	___xxtofl@arg+3,7
 12826  23DB                     l5698:
 12827  23DB  0839               	movf	___xxtofl@arg+3,w
 12828  23DC  00AF               	movwf	?___xxtofl+3
 12829  23DD  0838               	movf	___xxtofl@arg+2,w
 12830  23DE  00AE               	movwf	?___xxtofl+2
 12831  23DF  0837               	movf	___xxtofl@arg+1,w
 12832  23E0  00AD               	movwf	?___xxtofl+1
 12833  23E1  0836               	movf	___xxtofl@arg,w
 12834  23E2  00AC               	movwf	?___xxtofl
 12835  23E3  0008               	return
 12836  23E4                     __end_of___xxtofl:
 12837                           
 12838                           	psect	text29
 12839  2D15                     __ptext29:	
 12840 ;; *************** function ___wmul *****************
 12841 ;; Defined at:
 12842 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
 12843 ;; Parameters:    Size  Location     Type
 12844 ;;  multiplier      2    3[BANK0 ] unsigned int 
 12845 ;;  multiplicand    2    5[BANK0 ] unsigned int 
 12846 ;; Auto vars:     Size  Location     Type
 12847 ;;  product         2    7[BANK0 ] unsigned int 
 12848 ;; Return value:  Size  Location     Type
 12849 ;;                  2    3[BANK0 ] unsigned int 
 12850 ;; Registers used:
 12851 ;;		wreg, status,2, status,0
 12852 ;; Tracked objects:
 12853 ;;		On entry : 1F/0
 12854 ;;		On exit  : 1F/0
 12855 ;;		Unchanged: 0/0
 12856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12857 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12858 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12860 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12861 ;;Total ram usage:        6 bytes
 12862 ;; Hardware stack levels used: 1
 12863 ;; Hardware stack levels required when called: 2
 12864 ;; This function calls:
 12865 ;;		Nothing
 12866 ;; This function is called by:
 12867 ;;		_get_pwr
 12868 ;;		_lcd_pwr
 12869 ;;		_cells_init
 12870 ;; This function uses a non-reentrant model
 12871 ;;
 12872                           
 12873  2D15                     ___wmul:	
 12874                           ;psect for function ___wmul
 12875                           
 12876                           
 12877                           ;incstack = 0
 12878                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12879  2D15  01A7               	clrf	___wmul@product
 12880  2D16  01A8               	clrf	___wmul@product+1
 12881  2D17                     l5062:
 12882  2D17  1C23               	btfss	___wmul@multiplier,0
 12883  2D18  2D1D               	goto	l1122
 12884  2D19  0825               	movf	___wmul@multiplicand,w
 12885  2D1A  07A7               	addwf	___wmul@product,f
 12886  2D1B  0826               	movf	___wmul@multiplicand+1,w
 12887  2D1C  3DA8               	addwfc	___wmul@product+1,f
 12888  2D1D                     l1122:
 12889  2D1D  3001               	movlw	1
 12890  2D1E                     u6415:
 12891  2D1E  35A5               	lslf	___wmul@multiplicand,f
 12892  2D1F  0DA6               	rlf	___wmul@multiplicand+1,f
 12893  2D20  0B89               	decfsz	9,f
 12894  2D21  2D1E               	goto	u6415
 12895  2D22  3001               	movlw	1
 12896  2D23                     u6425:
 12897  2D23  36A4               	lsrf	___wmul@multiplier+1,f
 12898  2D24  0CA3               	rrf	___wmul@multiplier,f
 12899  2D25  0B89               	decfsz	9,f
 12900  2D26  2D23               	goto	u6425
 12901  2D27  0823               	movf	___wmul@multiplier,w
 12902  2D28  0424               	iorwf	___wmul@multiplier+1,w
 12903  2D29  1D03               	btfss	3,2
 12904  2D2A  2D17               	goto	l5062
 12905  2D2B  0828               	movf	___wmul@product+1,w
 12906  2D2C  00A4               	movwf	?___wmul+1
 12907  2D2D  0827               	movf	___wmul@product,w
 12908  2D2E  00A3               	movwf	?___wmul
 12909  2D2F  0008               	return
 12910  2D30                     __end_of___wmul:
 12911                           
 12912                           	psect	text30
 12913  2D55                     __ptext30:	
 12914 ;; *************** function ___lmul *****************
 12915 ;; Defined at:
 12916 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul32.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  multiplier      4    0[BANK0 ] unsigned long 
 12919 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;  product         4    3[COMMON] unsigned long 
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  4    0[BANK0 ] unsigned long 
 12924 ;; Registers used:
 12925 ;;		wreg, status,2, status,0
 12926 ;; Tracked objects:
 12927 ;;		On entry : 1F/0
 12928 ;;		On exit  : 1F/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12931 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;Total ram usage:       12 bytes
 12936 ;; Hardware stack levels used: 1
 12937 ;; Hardware stack levels required when called: 2
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_get_pwr
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945  2D55                     ___lmul:	
 12946                           ;psect for function ___lmul
 12947                           
 12948                           
 12949                           ;incstack = 0
 12950                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 12951  2D55  3000               	movlw	0
 12952  2D56  00F6               	movwf	___lmul@product+3
 12953  2D57  3000               	movlw	0
 12954  2D58  00F5               	movwf	___lmul@product+2
 12955  2D59  3000               	movlw	0
 12956  2D5A  00F4               	movwf	___lmul@product+1
 12957  2D5B  3000               	movlw	0
 12958  2D5C  00F3               	movwf	___lmul@product
 12959  2D5D                     l7902:
 12960  2D5D  1C20               	btfss	___lmul@multiplier,0
 12961  2D5E  2D67               	goto	l7906
 12962  2D5F  0824               	movf	___lmul@multiplicand,w
 12963  2D60  07F3               	addwf	___lmul@product,f
 12964  2D61  0825               	movf	___lmul@multiplicand+1,w
 12965  2D62  3DF4               	addwfc	___lmul@product+1,f
 12966  2D63  0826               	movf	___lmul@multiplicand+2,w
 12967  2D64  3DF5               	addwfc	___lmul@product+2,f
 12968  2D65  0827               	movf	___lmul@multiplicand+3,w
 12969  2D66  3DF6               	addwfc	___lmul@product+3,f
 12970  2D67                     l7906:
 12971  2D67  3001               	movlw	1
 12972  2D68                     u11645:
 12973  2D68  35A4               	lslf	___lmul@multiplicand,f
 12974  2D69  0DA5               	rlf	___lmul@multiplicand+1,f
 12975  2D6A  0DA6               	rlf	___lmul@multiplicand+2,f
 12976  2D6B  0DA7               	rlf	___lmul@multiplicand+3,f
 12977  2D6C  0B89               	decfsz	9,f
 12978  2D6D  2D68               	goto	u11645
 12979  2D6E  3001               	movlw	1
 12980  2D6F                     u11655:
 12981  2D6F  36A3               	lsrf	___lmul@multiplier+3,f
 12982  2D70  0CA2               	rrf	___lmul@multiplier+2,f
 12983  2D71  0CA1               	rrf	___lmul@multiplier+1,f
 12984  2D72  0CA0               	rrf	___lmul@multiplier,f
 12985  2D73  0B89               	decfsz	9,f
 12986  2D74  2D6F               	goto	u11655
 12987  2D75  0823               	movf	___lmul@multiplier+3,w
 12988  2D76  0422               	iorwf	___lmul@multiplier+2,w
 12989  2D77  0421               	iorwf	___lmul@multiplier+1,w
 12990  2D78  0420               	iorwf	___lmul@multiplier,w
 12991  2D79  1D03               	skipz
 12992  2D7A  2D5D               	goto	l7902
 12993  2D7B  0876               	movf	___lmul@product+3,w
 12994  2D7C  00A3               	movwf	?___lmul+3
 12995  2D7D  0875               	movf	___lmul@product+2,w
 12996  2D7E  00A2               	movwf	?___lmul+2
 12997  2D7F  0874               	movf	___lmul@product+1,w
 12998  2D80  00A1               	movwf	?___lmul+1
 12999  2D81  0873               	movf	___lmul@product,w
 13000  2D82  00A0               	movwf	?___lmul
 13001  2D83  0008               	return
 13002  2D84                     __end_of___lmul:
 13003                           
 13004                           	psect	text31
 13005  2060                     __ptext31:	
 13006 ;; *************** function ___fltol *****************
 13007 ;; Defined at:
 13008 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fltol.c"
 13009 ;; Parameters:    Size  Location     Type
 13010 ;;  f1              4   18[BANK1 ] unsigned long 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  exp1            1   28[BANK1 ] unsigned char 
 13013 ;;  sign1           1   27[BANK1 ] unsigned char 
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  4   18[BANK1 ] long 
 13016 ;; Registers used:
 13017 ;;		wreg, status,2, status,0
 13018 ;; Tracked objects:
 13019 ;;		On entry : 1F/1
 13020 ;;		On exit  : 1F/1
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:       11 bytes
 13028 ;; Hardware stack levels used: 1
 13029 ;; Hardware stack levels required when called: 2
 13030 ;; This function calls:
 13031 ;;		Nothing
 13032 ;; This function is called by:
 13033 ;;		_get_pwr
 13034 ;;		_show_pwr
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038  2060                     ___fltol:	
 13039                           ;psect for function ___fltol
 13040                           
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 13044  2060  1003               	clrc
 13045  2061  0D34               	rlf	(___fltol@f1+2)^(0+128),w
 13046  2062  0D35               	rlf	(___fltol@f1+3)^(0+128),w
 13047  2063  00B6               	movwf	??___fltol^(0+128)
 13048  2064  0836               	movf	??___fltol^(0+128),w
 13049  2065  00BC               	movwf	___fltol@exp1^(0+128)
 13050  2066  083C               	movf	___fltol@exp1^(0+128),w
 13051  2067  1D03               	btfss	3,2
 13052  2068  2872               	goto	l7980
 13053  2069                     l7976:
 13054  2069  3000               	movlw	0
 13055  206A  00B5               	movwf	(?___fltol+3)^(0+128)
 13056  206B  3000               	movlw	0
 13057  206C  00B4               	movwf	(?___fltol+2)^(0+128)
 13058  206D  3000               	movlw	0
 13059  206E  00B3               	movwf	(?___fltol+1)^(0+128)
 13060  206F  3000               	movlw	0
 13061  2070  00B2               	movwf	?___fltol^(0+128)
 13062  2071  0008               	return
 13063  2072                     l7980:
 13064  2072  0832               	movf	___fltol@f1^(0+128),w
 13065  2073  00B6               	movwf	??___fltol^(0+128)
 13066  2074  0833               	movf	(___fltol@f1+1)^(0+128),w
 13067  2075  00B7               	movwf	(??___fltol^(0+128)+1)
 13068  2076  0834               	movf	(___fltol@f1+2)^(0+128),w
 13069  2077  00B8               	movwf	(??___fltol^(0+128)+2)
 13070  2078  0835               	movf	(___fltol@f1+3)^(0+128),w
 13071  2079  00B9               	movwf	(??___fltol^(0+128)+3)
 13072  207A  301F               	movlw	31
 13073  207B                     u11835:
 13074  207B  36B9               	lsrf	(??___fltol^(0+128)+3),f
 13075  207C  0CB8               	rrf	(??___fltol^(0+128)+2),f
 13076  207D  0CB7               	rrf	(??___fltol^(0+128)+1),f
 13077  207E  0CB6               	rrf	??___fltol^(0+128),f
 13078  207F  0B89               	decfsz	9,f
 13079  2080  287B               	goto	u11835
 13080  2081  0836               	movf	??___fltol^(0+128),w
 13081  2082  00BA               	movwf	(??___fltol+4)^(0+128)
 13082  2083  083A               	movf	(??___fltol+4)^(0+128),w
 13083  2084  00BB               	movwf	___fltol@sign1^(0+128)
 13084  2085  17B4               	bsf	(___fltol@f1^(0+128)+2),7
 13085  2086  30FF               	movlw	255
 13086  2087  05B2               	andwf	___fltol@f1^(0+128),f
 13087  2088  30FF               	movlw	255
 13088  2089  05B3               	andwf	(___fltol@f1+1)^(0+128),f
 13089  208A  30FF               	movlw	255
 13090  208B  05B4               	andwf	(___fltol@f1+2)^(0+128),f
 13091  208C  3000               	movlw	0
 13092  208D  05B5               	andwf	(___fltol@f1+3)^(0+128),f
 13093  208E  3096               	movlw	150
 13094  208F  02BC               	subwf	___fltol@exp1^(0+128),f
 13095  2090  1FBC               	btfss	___fltol@exp1^(0+128),7
 13096  2091  28A5               	goto	l7998
 13097  2092  083C               	movf	___fltol@exp1^(0+128),w
 13098  2093  3A80               	xorlw	128
 13099  2094  3E97               	addlw	151
 13100  2095  1C03               	btfss	3,0
 13101  2096  2869               	goto	l7976
 13102  2097                     l7996:
 13103  2097  3001               	movlw	1
 13104  2098                     u11865:
 13105  2098  36B5               	lsrf	(___fltol@f1+3)^(0+128),f
 13106  2099  0CB4               	rrf	(___fltol@f1+2)^(0+128),f
 13107  209A  0CB3               	rrf	(___fltol@f1+1)^(0+128),f
 13108  209B  0CB2               	rrf	___fltol@f1^(0+128),f
 13109  209C  0B89               	decfsz	9,f
 13110  209D  2898               	goto	u11865
 13111  209E  3001               	movlw	1
 13112  209F  00B6               	movwf	??___fltol^(0+128)
 13113  20A0  0836               	movf	??___fltol^(0+128),w
 13114  20A1  07BC               	addwf	___fltol@exp1^(0+128),f
 13115  20A2  1903               	btfsc	3,2
 13116  20A3  28B6               	goto	l8006
 13117  20A4  2897               	goto	l7996
 13118  20A5                     l7998:
 13119  20A5  3020               	movlw	32
 13120  20A6  023C               	subwf	___fltol@exp1^(0+128),w
 13121  20A7  1803               	btfsc	3,0
 13122  20A8  2869               	goto	l7976
 13123  20A9                     l1323:
 13124  20A9  083C               	movf	___fltol@exp1^(0+128),w
 13125  20AA  1903               	btfsc	3,2
 13126  20AB  28B6               	goto	l8006
 13127  20AC  3001               	movlw	1
 13128  20AD                     u11895:
 13129  20AD  35B2               	lslf	___fltol@f1^(0+128),f
 13130  20AE  0DB3               	rlf	(___fltol@f1+1)^(0+128),f
 13131  20AF  0DB4               	rlf	(___fltol@f1+2)^(0+128),f
 13132  20B0  0DB5               	rlf	(___fltol@f1+3)^(0+128),f
 13133  20B1  0B89               	decfsz	9,f
 13134  20B2  28AD               	goto	u11895
 13135  20B3  3001               	movlw	1
 13136  20B4  02BC               	subwf	___fltol@exp1^(0+128),f
 13137  20B5  28A9               	goto	l1323
 13138  20B6                     l8006:
 13139  20B6  083B               	movf	___fltol@sign1^(0+128),w
 13140  20B7  1903               	btfsc	3,2
 13141  20B8  0008               	return
 13142  20B9  09B2               	comf	___fltol@f1^(0+128),f
 13143  20BA  09B3               	comf	(___fltol@f1+1)^(0+128),f
 13144  20BB  09B4               	comf	(___fltol@f1+2)^(0+128),f
 13145  20BC  09B5               	comf	(___fltol@f1+3)^(0+128),f
 13146  20BD  0AB2               	incf	___fltol@f1^(0+128),f
 13147  20BE  1903               	skipnz
 13148  20BF  0AB3               	incf	(___fltol@f1+1)^(0+128),f
 13149  20C0  1903               	skipnz
 13150  20C1  0AB4               	incf	(___fltol@f1+2)^(0+128),f
 13151  20C2  1903               	skipnz
 13152  20C3  0AB5               	incf	(___fltol@f1+3)^(0+128),f
 13153  20C4  0008               	return
 13154  20C5                     __end_of___fltol:
 13155                           
 13156                           	psect	text32
 13157  133E                     __ptext32:	
 13158 ;; *************** function ___flmul *****************
 13159 ;; Defined at:
 13160 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcmul.c"
 13161 ;; Parameters:    Size  Location     Type
 13162 ;;  b               4   72[BANK0 ] long 
 13163 ;;  a               4   76[BANK0 ] long 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;  prod            4   12[BANK1 ] struct .
 13166 ;;  grs             4    7[BANK1 ] unsigned long 
 13167 ;;  temp            2   16[BANK1 ] struct .
 13168 ;;  bexp            1   11[BANK1 ] unsigned char 
 13169 ;;  aexp            1    6[BANK1 ] unsigned char 
 13170 ;;  sign            1    5[BANK1 ] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  4   72[BANK0 ] unsigned char 
 13173 ;; Registers used:
 13174 ;;		wreg, status,2, status,0, pclath, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 1F/0
 13177 ;;		On exit  : 1F/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13180 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Totals:         0       8      18       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;Total ram usage:       26 bytes
 13185 ;; Hardware stack levels used: 1
 13186 ;; Hardware stack levels required when called: 3
 13187 ;; This function calls:
 13188 ;;		__Umul8_16
 13189 ;; This function is called by:
 13190 ;;		_get_pwr
 13191 ;;		_show_pwr
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195  133E                     ___flmul:	
 13196                           ;psect for function ___flmul
 13197                           
 13198                           
 13199                           ;incstack = 0
 13200                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 13201  133E  086B               	movf	___flmul@b+3,w
 13202  133F  3980               	andlw	128
 13203  1340  0021               	movlb	1	; select bank1
 13204  1341  00A0               	movwf	??___flmul^(0+128)
 13205  1342  0820               	movf	??___flmul^(0+128),w
 13206  1343  00A5               	movwf	___flmul@sign^(0+128)
 13207  1344  0020               	movlb	0	; select bank0
 13208  1345  356B               	lslf	___flmul@b+3,w
 13209  1346  0021               	movlb	1	; select bank1
 13210  1347  00A0               	movwf	??___flmul^(0+128)
 13211  1348  0820               	movf	??___flmul^(0+128),w
 13212  1349  00AB               	movwf	___flmul@bexp^(0+128)
 13213  134A  0020               	movlb	0	; select bank0
 13214  134B  1FEA               	btfss	___flmul@b+2,7
 13215  134C  2B4F               	goto	l5526
 13216  134D  0021               	movlb	1	; select bank1
 13217  134E  142B               	bsf	___flmul@bexp^(0+128),0
 13218  134F                     l5526:
 13219  134F  0021               	movlb	1	; select bank1
 13220  1350  082B               	movf	___flmul@bexp^(0+128),w
 13221  1351  1903               	btfsc	3,2
 13222  1352  2B62               	goto	l5534
 13223  1353  0A2B               	incf	___flmul@bexp^(0+128),w
 13224  1354  1D03               	btfss	3,2
 13225  1355  2B5F               	goto	l5532
 13226  1356  3000               	movlw	0
 13227  1357  0020               	movlb	0	; select bank0
 13228  1358  00EB               	movwf	___flmul@b+3
 13229  1359  3000               	movlw	0
 13230  135A  00EA               	movwf	___flmul@b+2
 13231  135B  3000               	movlw	0
 13232  135C  00E9               	movwf	___flmul@b+1
 13233  135D  3000               	movlw	0
 13234  135E  00E8               	movwf	___flmul@b
 13235  135F                     l5532:
 13236  135F  0020               	movlb	0	; select bank0
 13237  1360  17EA               	bsf	___flmul@b+2,7
 13238  1361  2B6B               	goto	l5536
 13239  1362                     l5534:
 13240  1362  3000               	movlw	0
 13241  1363  0020               	movlb	0	; select bank0
 13242  1364  00EB               	movwf	___flmul@b+3
 13243  1365  3000               	movlw	0
 13244  1366  00EA               	movwf	___flmul@b+2
 13245  1367  3000               	movlw	0
 13246  1368  00E9               	movwf	___flmul@b+1
 13247  1369  3000               	movlw	0
 13248  136A  00E8               	movwf	___flmul@b
 13249  136B                     l5536:
 13250  136B  086F               	movf	___flmul@a+3,w
 13251  136C  3980               	andlw	128
 13252  136D  0021               	movlb	1	; select bank1
 13253  136E  00A0               	movwf	??___flmul^(0+128)
 13254  136F  0820               	movf	??___flmul^(0+128),w
 13255  1370  06A5               	xorwf	___flmul@sign^(0+128),f
 13256  1371  0020               	movlb	0	; select bank0
 13257  1372  356F               	lslf	___flmul@a+3,w
 13258  1373  0021               	movlb	1	; select bank1
 13259  1374  00A0               	movwf	??___flmul^(0+128)
 13260  1375  0820               	movf	??___flmul^(0+128),w
 13261  1376  00A6               	movwf	___flmul@aexp^(0+128)
 13262  1377  0020               	movlb	0	; select bank0
 13263  1378  1FEE               	btfss	___flmul@a+2,7
 13264  1379  2B7C               	goto	l5544
 13265  137A  0021               	movlb	1	; select bank1
 13266  137B  1426               	bsf	___flmul@aexp^(0+128),0
 13267  137C                     l5544:
 13268  137C  0021               	movlb	1	; select bank1
 13269  137D  0826               	movf	___flmul@aexp^(0+128),w
 13270  137E  1903               	btfsc	3,2
 13271  137F  2B8F               	goto	l5552
 13272  1380  0A26               	incf	___flmul@aexp^(0+128),w
 13273  1381  1D03               	btfss	3,2
 13274  1382  2B8C               	goto	l5550
 13275  1383  3000               	movlw	0
 13276  1384  0020               	movlb	0	; select bank0
 13277  1385  00EF               	movwf	___flmul@a+3
 13278  1386  3000               	movlw	0
 13279  1387  00EE               	movwf	___flmul@a+2
 13280  1388  3000               	movlw	0
 13281  1389  00ED               	movwf	___flmul@a+1
 13282  138A  3000               	movlw	0
 13283  138B  00EC               	movwf	___flmul@a
 13284  138C                     l5550:
 13285  138C  0020               	movlb	0	; select bank0
 13286  138D  17EE               	bsf	___flmul@a+2,7
 13287  138E  2B98               	goto	l5554
 13288  138F                     l5552:
 13289  138F  3000               	movlw	0
 13290  1390  0020               	movlb	0	; select bank0
 13291  1391  00EF               	movwf	___flmul@a+3
 13292  1392  3000               	movlw	0
 13293  1393  00EE               	movwf	___flmul@a+2
 13294  1394  3000               	movlw	0
 13295  1395  00ED               	movwf	___flmul@a+1
 13296  1396  3000               	movlw	0
 13297  1397  00EC               	movwf	___flmul@a
 13298  1398                     l5554:
 13299  1398  0021               	movlb	1	; select bank1
 13300  1399  0826               	movf	___flmul@aexp^(0+128),w
 13301  139A  1D03               	btfss	3,2
 13302  139B  082B               	movf	___flmul@bexp^(0+128),w
 13303  139C  1D03               	btfss	3,2
 13304  139D  2BA8               	goto	l5562
 13305  139E  3000               	movlw	0
 13306  139F  0020               	movlb	0	; select bank0
 13307  13A0  00EB               	movwf	?___flmul+3
 13308  13A1  3000               	movlw	0
 13309  13A2  00EA               	movwf	?___flmul+2
 13310  13A3  3000               	movlw	0
 13311  13A4  00E9               	movwf	?___flmul+1
 13312  13A5  3000               	movlw	0
 13313  13A6  00E8               	movwf	?___flmul
 13314  13A7  0008               	return
 13315  13A8                     l5562:
 13316  13A8  0020               	movlb	0	; select bank0
 13317  13A9  0868               	movf	___flmul@b,w
 13318  13AA  0021               	movlb	1	; select bank1
 13319  13AB  00A0               	movwf	??___flmul^(0+128)
 13320  13AC  0820               	movf	??___flmul^(0+128),w
 13321  13AD  00F3               	movwf	__Umul8_16@multiplicand
 13322  13AE  0020               	movlb	0	; select bank0
 13323  13AF  086E               	movf	___flmul@a+2,w
 13324  13B0  3188  2001  3193   	fcall	__Umul8_16
 13325  13B3  0874               	movf	?__Umul8_16+1,w
 13326  13B4  0021               	movlb	1	; select bank1
 13327  13B5  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13328  13B6  0873               	movf	?__Umul8_16,w
 13329  13B7  00B0               	movwf	___flmul@temp^(0+128)
 13330  13B8  0830               	movf	___flmul@temp^(0+128),w
 13331  13B9  00A0               	movwf	??___flmul^(0+128)
 13332  13BA  01A1               	clrf	(??___flmul^(0+128)+1)
 13333  13BB  01A2               	clrf	(??___flmul^(0+128)+2)
 13334  13BC  01A3               	clrf	(??___flmul^(0+128)+3)
 13335  13BD  0823               	movf	(??___flmul+3)^(0+128),w
 13336  13BE  00AA               	movwf	(___flmul@grs+3)^(0+128)
 13337  13BF  0822               	movf	(??___flmul+2)^(0+128),w
 13338  13C0  00A9               	movwf	(___flmul@grs+2)^(0+128)
 13339  13C1  0821               	movf	(??___flmul+1)^(0+128),w
 13340  13C2  00A8               	movwf	(___flmul@grs+1)^(0+128)
 13341  13C3  0820               	movf	??___flmul^(0+128),w
 13342  13C4  00A7               	movwf	___flmul@grs^(0+128)
 13343  13C5  0831               	movf	(___flmul@temp^(0+128)+1),w
 13344  13C6  00A0               	movwf	??___flmul^(0+128)
 13345  13C7  01A1               	clrf	(??___flmul^(0+128)+1)
 13346  13C8  01A2               	clrf	(??___flmul^(0+128)+2)
 13347  13C9  01A3               	clrf	(??___flmul^(0+128)+3)
 13348  13CA  0823               	movf	(??___flmul+3)^(0+128),w
 13349  13CB  00AF               	movwf	(___flmul@prod+3)^(0+128)
 13350  13CC  0822               	movf	(??___flmul+2)^(0+128),w
 13351  13CD  00AE               	movwf	(___flmul@prod+2)^(0+128)
 13352  13CE  0821               	movf	(??___flmul+1)^(0+128),w
 13353  13CF  00AD               	movwf	(___flmul@prod+1)^(0+128)
 13354  13D0  0820               	movf	??___flmul^(0+128),w
 13355  13D1  00AC               	movwf	___flmul@prod^(0+128)
 13356  13D2  0020               	movlb	0	; select bank0
 13357  13D3  0869               	movf	___flmul@b+1,w
 13358  13D4  0021               	movlb	1	; select bank1
 13359  13D5  00A0               	movwf	??___flmul^(0+128)
 13360  13D6  0820               	movf	??___flmul^(0+128),w
 13361  13D7  00F3               	movwf	__Umul8_16@multiplicand
 13362  13D8  0020               	movlb	0	; select bank0
 13363  13D9  086D               	movf	___flmul@a+1,w
 13364  13DA  3188  2001  3193   	fcall	__Umul8_16
 13365  13DD  0874               	movf	?__Umul8_16+1,w
 13366  13DE  0021               	movlb	1	; select bank1
 13367  13DF  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13368  13E0  0873               	movf	?__Umul8_16,w
 13369  13E1  00B0               	movwf	___flmul@temp^(0+128)
 13370  13E2  0830               	movf	___flmul@temp^(0+128),w
 13371  13E3  00A0               	movwf	??___flmul^(0+128)
 13372  13E4  01A1               	clrf	(??___flmul^(0+128)+1)
 13373  13E5  01A2               	clrf	(??___flmul^(0+128)+2)
 13374  13E6  01A3               	clrf	(??___flmul^(0+128)+3)
 13375  13E7  0820               	movf	??___flmul^(0+128),w
 13376  13E8  07A7               	addwf	___flmul@grs^(0+128),f
 13377  13E9  0821               	movf	(??___flmul+1)^(0+128),w
 13378  13EA  3DA8               	addwfc	(___flmul@grs+1)^(0+128),f
 13379  13EB  0822               	movf	(??___flmul+2)^(0+128),w
 13380  13EC  3DA9               	addwfc	(___flmul@grs+2)^(0+128),f
 13381  13ED  0823               	movf	(??___flmul+3)^(0+128),w
 13382  13EE  3DAA               	addwfc	(___flmul@grs+3)^(0+128),f
 13383  13EF  0831               	movf	(___flmul@temp^(0+128)+1),w
 13384  13F0  00A0               	movwf	??___flmul^(0+128)
 13385  13F1  01A1               	clrf	(??___flmul^(0+128)+1)
 13386  13F2  01A2               	clrf	(??___flmul^(0+128)+2)
 13387  13F3  01A3               	clrf	(??___flmul^(0+128)+3)
 13388  13F4  0820               	movf	??___flmul^(0+128),w
 13389  13F5  07AC               	addwf	___flmul@prod^(0+128),f
 13390  13F6  0821               	movf	(??___flmul+1)^(0+128),w
 13391  13F7  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13392  13F8  0822               	movf	(??___flmul+2)^(0+128),w
 13393  13F9  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13394  13FA  0823               	movf	(??___flmul+3)^(0+128),w
 13395  13FB  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13396  13FC  0020               	movlb	0	; select bank0
 13397  13FD  086A               	movf	___flmul@b+2,w
 13398  13FE  0021               	movlb	1	; select bank1
 13399  13FF  00A0               	movwf	??___flmul^(0+128)
 13400  1400  0820               	movf	??___flmul^(0+128),w
 13401  1401  00F3               	movwf	__Umul8_16@multiplicand
 13402  1402  0020               	movlb	0	; select bank0
 13403  1403  086C               	movf	___flmul@a,w
 13404  1404  3188  2001  3193   	fcall	__Umul8_16
 13405  1407  0874               	movf	?__Umul8_16+1,w
 13406  1408  0021               	movlb	1	; select bank1
 13407  1409  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13408  140A  0873               	movf	?__Umul8_16,w
 13409  140B  00B0               	movwf	___flmul@temp^(0+128)
 13410  140C  0830               	movf	___flmul@temp^(0+128),w
 13411  140D  00A0               	movwf	??___flmul^(0+128)
 13412  140E  01A1               	clrf	(??___flmul^(0+128)+1)
 13413  140F  01A2               	clrf	(??___flmul^(0+128)+2)
 13414  1410  01A3               	clrf	(??___flmul^(0+128)+3)
 13415  1411  0820               	movf	??___flmul^(0+128),w
 13416  1412  07A7               	addwf	___flmul@grs^(0+128),f
 13417  1413  0821               	movf	(??___flmul+1)^(0+128),w
 13418  1414  3DA8               	addwfc	(___flmul@grs+1)^(0+128),f
 13419  1415  0822               	movf	(??___flmul+2)^(0+128),w
 13420  1416  3DA9               	addwfc	(___flmul@grs+2)^(0+128),f
 13421  1417  0823               	movf	(??___flmul+3)^(0+128),w
 13422  1418  3DAA               	addwfc	(___flmul@grs+3)^(0+128),f
 13423  1419  0831               	movf	(___flmul@temp^(0+128)+1),w
 13424  141A  00A0               	movwf	??___flmul^(0+128)
 13425  141B  01A1               	clrf	(??___flmul^(0+128)+1)
 13426  141C  01A2               	clrf	(??___flmul^(0+128)+2)
 13427  141D  01A3               	clrf	(??___flmul^(0+128)+3)
 13428  141E  0820               	movf	??___flmul^(0+128),w
 13429  141F  07AC               	addwf	___flmul@prod^(0+128),f
 13430  1420  0821               	movf	(??___flmul+1)^(0+128),w
 13431  1421  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13432  1422  0822               	movf	(??___flmul+2)^(0+128),w
 13433  1423  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13434  1424  0823               	movf	(??___flmul+3)^(0+128),w
 13435  1425  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13436  1426  3008               	movlw	8
 13437  1427                     u7535:
 13438  1427  35A7               	lslf	___flmul@grs^(0+128),f
 13439  1428  0DA8               	rlf	(___flmul@grs+1)^(0+128),f
 13440  1429  0DA9               	rlf	(___flmul@grs+2)^(0+128),f
 13441  142A  0DAA               	rlf	(___flmul@grs+3)^(0+128),f
 13442  142B  0B89               	decfsz	9,f
 13443  142C  2C27               	goto	u7535
 13444  142D  0020               	movlb	0	; select bank0
 13445  142E  0869               	movf	___flmul@b+1,w
 13446  142F  0021               	movlb	1	; select bank1
 13447  1430  00A0               	movwf	??___flmul^(0+128)
 13448  1431  0820               	movf	??___flmul^(0+128),w
 13449  1432  00F3               	movwf	__Umul8_16@multiplicand
 13450  1433  0020               	movlb	0	; select bank0
 13451  1434  086C               	movf	___flmul@a,w
 13452  1435  3188  2001  3193   	fcall	__Umul8_16
 13453  1438  0874               	movf	?__Umul8_16+1,w
 13454  1439  0021               	movlb	1	; select bank1
 13455  143A  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13456  143B  0873               	movf	?__Umul8_16,w
 13457  143C  00B0               	movwf	___flmul@temp^(0+128)
 13458  143D  0830               	movf	___flmul@temp^(0+128),w
 13459  143E  07A7               	addwf	___flmul@grs^(0+128),f
 13460  143F  0831               	movf	(___flmul@temp+1)^(0+128),w
 13461  1440  3DA8               	addwfc	(___flmul@grs+1)^(0+128),f
 13462  1441  3000               	movlw	0
 13463  1442  3DA9               	addwfc	(___flmul@grs+2)^(0+128),f
 13464  1443  3DAA               	addwfc	(___flmul@grs+3)^(0+128),f
 13465  1444  0020               	movlb	0	; select bank0
 13466  1445  0868               	movf	___flmul@b,w
 13467  1446  0021               	movlb	1	; select bank1
 13468  1447  00A0               	movwf	??___flmul^(0+128)
 13469  1448  0820               	movf	??___flmul^(0+128),w
 13470  1449  00F3               	movwf	__Umul8_16@multiplicand
 13471  144A  0020               	movlb	0	; select bank0
 13472  144B  086D               	movf	___flmul@a+1,w
 13473  144C  3188  2001  3193   	fcall	__Umul8_16
 13474  144F  0874               	movf	?__Umul8_16+1,w
 13475  1450  0021               	movlb	1	; select bank1
 13476  1451  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13477  1452  0873               	movf	?__Umul8_16,w
 13478  1453  00B0               	movwf	___flmul@temp^(0+128)
 13479  1454  0830               	movf	___flmul@temp^(0+128),w
 13480  1455  07A7               	addwf	___flmul@grs^(0+128),f
 13481  1456  0831               	movf	(___flmul@temp+1)^(0+128),w
 13482  1457  3DA8               	addwfc	(___flmul@grs+1)^(0+128),f
 13483  1458  3000               	movlw	0
 13484  1459  3DA9               	addwfc	(___flmul@grs+2)^(0+128),f
 13485  145A  3DAA               	addwfc	(___flmul@grs+3)^(0+128),f
 13486  145B  3008               	movlw	8
 13487  145C                     u7545:
 13488  145C  35A7               	lslf	___flmul@grs^(0+128),f
 13489  145D  0DA8               	rlf	(___flmul@grs+1)^(0+128),f
 13490  145E  0DA9               	rlf	(___flmul@grs+2)^(0+128),f
 13491  145F  0DAA               	rlf	(___flmul@grs+3)^(0+128),f
 13492  1460  0B89               	decfsz	9,f
 13493  1461  2C5C               	goto	u7545
 13494  1462  0020               	movlb	0	; select bank0
 13495  1463  0868               	movf	___flmul@b,w
 13496  1464  0021               	movlb	1	; select bank1
 13497  1465  00A0               	movwf	??___flmul^(0+128)
 13498  1466  0820               	movf	??___flmul^(0+128),w
 13499  1467  00F3               	movwf	__Umul8_16@multiplicand
 13500  1468  0020               	movlb	0	; select bank0
 13501  1469  086C               	movf	___flmul@a,w
 13502  146A  3188  2001  3193   	fcall	__Umul8_16
 13503  146D  0874               	movf	?__Umul8_16+1,w
 13504  146E  0021               	movlb	1	; select bank1
 13505  146F  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13506  1470  0873               	movf	?__Umul8_16,w
 13507  1471  00B0               	movwf	___flmul@temp^(0+128)
 13508  1472  0830               	movf	___flmul@temp^(0+128),w
 13509  1473  07A7               	addwf	___flmul@grs^(0+128),f
 13510  1474  0831               	movf	(___flmul@temp+1)^(0+128),w
 13511  1475  3DA8               	addwfc	(___flmul@grs+1)^(0+128),f
 13512  1476  3000               	movlw	0
 13513  1477  3DA9               	addwfc	(___flmul@grs+2)^(0+128),f
 13514  1478  3DAA               	addwfc	(___flmul@grs+3)^(0+128),f
 13515  1479  0020               	movlb	0	; select bank0
 13516  147A  0869               	movf	___flmul@b+1,w
 13517  147B  0021               	movlb	1	; select bank1
 13518  147C  00A0               	movwf	??___flmul^(0+128)
 13519  147D  0820               	movf	??___flmul^(0+128),w
 13520  147E  00F3               	movwf	__Umul8_16@multiplicand
 13521  147F  0020               	movlb	0	; select bank0
 13522  1480  086E               	movf	___flmul@a+2,w
 13523  1481  3188  2001  3193   	fcall	__Umul8_16
 13524  1484  0874               	movf	?__Umul8_16+1,w
 13525  1485  0021               	movlb	1	; select bank1
 13526  1486  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13527  1487  0873               	movf	?__Umul8_16,w
 13528  1488  00B0               	movwf	___flmul@temp^(0+128)
 13529  1489  0830               	movf	___flmul@temp^(0+128),w
 13530  148A  07AC               	addwf	___flmul@prod^(0+128),f
 13531  148B  0831               	movf	(___flmul@temp+1)^(0+128),w
 13532  148C  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13533  148D  3000               	movlw	0
 13534  148E  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13535  148F  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13536  1490  0020               	movlb	0	; select bank0
 13537  1491  086A               	movf	___flmul@b+2,w
 13538  1492  0021               	movlb	1	; select bank1
 13539  1493  00A0               	movwf	??___flmul^(0+128)
 13540  1494  0820               	movf	??___flmul^(0+128),w
 13541  1495  00F3               	movwf	__Umul8_16@multiplicand
 13542  1496  0020               	movlb	0	; select bank0
 13543  1497  086D               	movf	___flmul@a+1,w
 13544  1498  3188  2001  3193   	fcall	__Umul8_16
 13545  149B  0874               	movf	?__Umul8_16+1,w
 13546  149C  0021               	movlb	1	; select bank1
 13547  149D  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13548  149E  0873               	movf	?__Umul8_16,w
 13549  149F  00B0               	movwf	___flmul@temp^(0+128)
 13550  14A0  0830               	movf	___flmul@temp^(0+128),w
 13551  14A1  07AC               	addwf	___flmul@prod^(0+128),f
 13552  14A2  0831               	movf	(___flmul@temp+1)^(0+128),w
 13553  14A3  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13554  14A4  3000               	movlw	0
 13555  14A5  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13556  14A6  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13557  14A7  0020               	movlb	0	; select bank0
 13558  14A8  086A               	movf	___flmul@b+2,w
 13559  14A9  0021               	movlb	1	; select bank1
 13560  14AA  00A0               	movwf	??___flmul^(0+128)
 13561  14AB  0820               	movf	??___flmul^(0+128),w
 13562  14AC  00F3               	movwf	__Umul8_16@multiplicand
 13563  14AD  0020               	movlb	0	; select bank0
 13564  14AE  086E               	movf	___flmul@a+2,w
 13565  14AF  3188  2001  3193   	fcall	__Umul8_16
 13566  14B2  0874               	movf	?__Umul8_16+1,w
 13567  14B3  0021               	movlb	1	; select bank1
 13568  14B4  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13569  14B5  0873               	movf	?__Umul8_16,w
 13570  14B6  00B0               	movwf	___flmul@temp^(0+128)
 13571  14B7  0830               	movf	___flmul@temp^(0+128),w
 13572  14B8  00A0               	movwf	??___flmul^(0+128)
 13573  14B9  0831               	movf	(___flmul@temp+1)^(0+128),w
 13574  14BA  00A1               	movwf	(??___flmul^(0+128)+1)
 13575  14BB  01A2               	clrf	(??___flmul^(0+128)+2)
 13576  14BC  01A3               	clrf	(??___flmul^(0+128)+3)
 13577  14BD  3008               	movlw	8
 13578  14BE                     u7555:
 13579  14BE  35A0               	lslf	??___flmul^(0+128),f
 13580  14BF  0DA1               	rlf	(??___flmul^(0+128)+1),f
 13581  14C0  0DA2               	rlf	(??___flmul^(0+128)+2),f
 13582  14C1  0DA3               	rlf	(??___flmul^(0+128)+3),f
 13583  14C2  0B89               	decfsz	9,f
 13584  14C3  2CBE               	goto	u7555
 13585  14C4  0820               	movf	??___flmul^(0+128),w
 13586  14C5  07AC               	addwf	___flmul@prod^(0+128),f
 13587  14C6  0821               	movf	(??___flmul+1)^(0+128),w
 13588  14C7  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13589  14C8  0822               	movf	(??___flmul+2)^(0+128),w
 13590  14C9  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13591  14CA  0823               	movf	(??___flmul+3)^(0+128),w
 13592  14CB  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13593  14CC  082A               	movf	(___flmul@grs^(0+128)+3),w
 13594  14CD  00A0               	movwf	??___flmul^(0+128)
 13595  14CE  01A1               	clrf	(??___flmul^(0+128)+1)
 13596  14CF  01A2               	clrf	(??___flmul^(0+128)+2)
 13597  14D0  01A3               	clrf	(??___flmul^(0+128)+3)
 13598  14D1  0820               	movf	??___flmul^(0+128),w
 13599  14D2  07AC               	addwf	___flmul@prod^(0+128),f
 13600  14D3  0821               	movf	(??___flmul+1)^(0+128),w
 13601  14D4  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13602  14D5  0822               	movf	(??___flmul+2)^(0+128),w
 13603  14D6  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13604  14D7  0823               	movf	(??___flmul+3)^(0+128),w
 13605  14D8  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13606  14D9  3008               	movlw	8
 13607  14DA                     u7565:
 13608  14DA  35A7               	lslf	___flmul@grs^(0+128),f
 13609  14DB  0DA8               	rlf	(___flmul@grs+1)^(0+128),f
 13610  14DC  0DA9               	rlf	(___flmul@grs+2)^(0+128),f
 13611  14DD  0DAA               	rlf	(___flmul@grs+3)^(0+128),f
 13612  14DE  0B89               	decfsz	9,f
 13613  14DF  2CDA               	goto	u7565
 13614  14E0  082B               	movf	___flmul@bexp^(0+128),w
 13615  14E1  0726               	addwf	___flmul@aexp^(0+128),w
 13616  14E2  00A0               	movwf	??___flmul^(0+128)
 13617  14E3  01A1               	clrf	(??___flmul^(0+128)+1)
 13618  14E4  0DA1               	rlf	(??___flmul+1)^(0+128),f
 13619  14E5  0820               	movf	??___flmul^(0+128),w
 13620  14E6  3E82               	addlw	130
 13621  14E7  00B0               	movwf	___flmul@temp^(0+128)
 13622  14E8  30FF               	movlw	255
 13623  14E9  3D21               	addwfc	(??___flmul+1)^(0+128),w
 13624  14EA  00B1               	movwf	(___flmul@temp+1)^(0+128)
 13625  14EB                     l5614:
 13626  14EB  1BAE               	btfsc	(___flmul@prod+2)^(0+128),7
 13627  14EC  2D02               	goto	l5616
 13628  14ED  3001               	movlw	1
 13629  14EE                     u7575:
 13630  14EE  35AC               	lslf	___flmul@prod^(0+128),f
 13631  14EF  0DAD               	rlf	(___flmul@prod+1)^(0+128),f
 13632  14F0  0DAE               	rlf	(___flmul@prod+2)^(0+128),f
 13633  14F1  0DAF               	rlf	(___flmul@prod+3)^(0+128),f
 13634  14F2  0B89               	decfsz	9,f
 13635  14F3  2CEE               	goto	u7575
 13636  14F4  1BAA               	btfsc	(___flmul@grs+3)^(0+128),7
 13637  14F5  142C               	bsf	___flmul@prod^(0+128),0
 13638  14F6  3001               	movlw	1
 13639  14F7                     u7595:
 13640  14F7  35A7               	lslf	___flmul@grs^(0+128),f
 13641  14F8  0DA8               	rlf	(___flmul@grs+1)^(0+128),f
 13642  14F9  0DA9               	rlf	(___flmul@grs+2)^(0+128),f
 13643  14FA  0DAA               	rlf	(___flmul@grs+3)^(0+128),f
 13644  14FB  0B89               	decfsz	9,f
 13645  14FC  2CF7               	goto	u7595
 13646  14FD  30FF               	movlw	255
 13647  14FE  07B0               	addwf	___flmul@temp^(0+128),f
 13648  14FF  30FF               	movlw	255
 13649  1500  3DB1               	addwfc	(___flmul@temp+1)^(0+128),f
 13650  1501  2CEB               	goto	l5614
 13651  1502                     l5616:
 13652  1502  01A6               	clrf	___flmul@aexp^(0+128)
 13653  1503  1FAA               	btfss	(___flmul@grs+3)^(0+128),7
 13654  1504  2D1B               	goto	l5626
 13655  1505  30FF               	movlw	255
 13656  1506  0527               	andwf	___flmul@grs^(0+128),w
 13657  1507  00A0               	movwf	??___flmul^(0+128)
 13658  1508  30FF               	movlw	255
 13659  1509  0528               	andwf	(___flmul@grs+1)^(0+128),w
 13660  150A  00A1               	movwf	(??___flmul^(0+128)+1)
 13661  150B  30FF               	movlw	255
 13662  150C  0529               	andwf	(___flmul@grs+2)^(0+128),w
 13663  150D  00A2               	movwf	(??___flmul^(0+128)+2)
 13664  150E  307F               	movlw	127
 13665  150F  052A               	andwf	(___flmul@grs+3)^(0+128),w
 13666  1510  00A3               	movwf	(??___flmul^(0+128)+3)
 13667  1511  0823               	movf	(??___flmul+3)^(0+128),w
 13668  1512  0422               	iorwf	(??___flmul+2)^(0+128),w
 13669  1513  0421               	iorwf	(??___flmul+1)^(0+128),w
 13670  1514  0420               	iorwf	??___flmul^(0+128),w
 13671  1515  1903               	skipnz
 13672  1516  182C               	btfsc	___flmul@prod^(0+128),0
 13673  1517  2D19               	goto	l5622
 13674  1518  2D1B               	goto	l5626
 13675  1519                     l5622:
 13676  1519  01A6               	clrf	___flmul@aexp^(0+128)
 13677  151A  0AA6               	incf	___flmul@aexp^(0+128),f
 13678  151B                     l5626:
 13679  151B  0826               	movf	___flmul@aexp^(0+128),w
 13680  151C  1903               	btfsc	3,2
 13681  151D  2D44               	goto	l5636
 13682  151E  3001               	movlw	1
 13683  151F  07AC               	addwf	___flmul@prod^(0+128),f
 13684  1520  3000               	movlw	0
 13685  1521  3DAD               	addwfc	(___flmul@prod+1)^(0+128),f
 13686  1522  3000               	movlw	0
 13687  1523  3DAE               	addwfc	(___flmul@prod+2)^(0+128),f
 13688  1524  3000               	movlw	0
 13689  1525  3DAF               	addwfc	(___flmul@prod+3)^(0+128),f
 13690  1526  1C2F               	btfss	(___flmul@prod+3)^(0+128),0
 13691  1527  2D44               	goto	l5636
 13692  1528  082C               	movf	___flmul@prod^(0+128),w
 13693  1529  00A0               	movwf	??___flmul^(0+128)
 13694  152A  082D               	movf	(___flmul@prod+1)^(0+128),w
 13695  152B  00A1               	movwf	(??___flmul^(0+128)+1)
 13696  152C  082E               	movf	(___flmul@prod+2)^(0+128),w
 13697  152D  00A2               	movwf	(??___flmul^(0+128)+2)
 13698  152E  082F               	movf	(___flmul@prod+3)^(0+128),w
 13699  152F  00A3               	movwf	(??___flmul^(0+128)+3)
 13700  1530  3001               	movlw	1
 13701  1531  00A4               	movwf	(??___flmul+4)^(0+128)
 13702  1532                     u7665:
 13703  1532  37A3               	asrf	(??___flmul^(0+128)+3),f
 13704  1533  0CA2               	rrf	(??___flmul^(0+128)+2),f
 13705  1534  0CA1               	rrf	(??___flmul^(0+128)+1),f
 13706  1535  0CA0               	rrf	??___flmul^(0+128),f
 13707  1536  0BA4               	decfsz	(??___flmul+4)^(0+128),f
 13708  1537  2D32               	goto	u7665
 13709  1538  0823               	movf	(??___flmul+3)^(0+128),w
 13710  1539  00AF               	movwf	(___flmul@prod+3)^(0+128)
 13711  153A  0822               	movf	(??___flmul+2)^(0+128),w
 13712  153B  00AE               	movwf	(___flmul@prod+2)^(0+128)
 13713  153C  0821               	movf	(??___flmul+1)^(0+128),w
 13714  153D  00AD               	movwf	(___flmul@prod+1)^(0+128)
 13715  153E  0820               	movf	??___flmul^(0+128),w
 13716  153F  00AC               	movwf	___flmul@prod^(0+128)
 13717  1540  3001               	movlw	1
 13718  1541  07B0               	addwf	___flmul@temp^(0+128),f
 13719  1542  3000               	movlw	0
 13720  1543  3DB1               	addwfc	(___flmul@temp+1)^(0+128),f
 13721  1544                     l5636:
 13722  1544  0831               	movf	(___flmul@temp+1)^(0+128),w
 13723  1545  3A80               	xorlw	128
 13724  1546  00A0               	movwf	??___flmul^(0+128)
 13725  1547  3080               	movlw	128
 13726  1548  0220               	subwf	??___flmul^(0+128),w
 13727  1549  1D03               	skipz
 13728  154A  2D4D               	goto	u7675
 13729  154B  30FF               	movlw	255
 13730  154C  0230               	subwf	___flmul@temp^(0+128),w
 13731  154D                     u7675:
 13732  154D  1C03               	skipc
 13733  154E  2D59               	goto	l5640
 13734  154F  307F               	movlw	127
 13735  1550  0021               	movlb	1	; select bank1
 13736  1551  00AF               	movwf	(___flmul@prod+3)^(0+128)
 13737  1552  3080               	movlw	128
 13738  1553  00AE               	movwf	(___flmul@prod+2)^(0+128)
 13739  1554  3000               	movlw	0
 13740  1555  00AD               	movwf	(___flmul@prod+1)^(0+128)
 13741  1556  3000               	movlw	0
 13742  1557  00AC               	movwf	___flmul@prod^(0+128)
 13743  1558  2D83               	goto	l1531
 13744  1559                     l5640:
 13745  1559  0021               	movlb	1	; select bank1
 13746  155A  0831               	movf	(___flmul@temp+1)^(0+128),w
 13747  155B  3A80               	xorlw	128
 13748  155C  00A0               	movwf	??___flmul^(0+128)
 13749  155D  3080               	movlw	128
 13750  155E  0220               	subwf	??___flmul^(0+128),w
 13751  155F  1D03               	skipz
 13752  1560  2D63               	goto	u7685
 13753  1561  3001               	movlw	1
 13754  1562  0230               	subwf	___flmul@temp^(0+128),w
 13755  1563                     u7685:
 13756  1563  1803               	skipnc
 13757  1564  2D70               	goto	l5646
 13758  1565  3000               	movlw	0
 13759  1566  0021               	movlb	1	; select bank1
 13760  1567  00AF               	movwf	(___flmul@prod+3)^(0+128)
 13761  1568  3000               	movlw	0
 13762  1569  00AE               	movwf	(___flmul@prod+2)^(0+128)
 13763  156A  3000               	movlw	0
 13764  156B  00AD               	movwf	(___flmul@prod+1)^(0+128)
 13765  156C  3000               	movlw	0
 13766  156D  00AC               	movwf	___flmul@prod^(0+128)
 13767  156E  01A5               	clrf	___flmul@sign^(0+128)
 13768  156F  2D83               	goto	l1531
 13769  1570                     l5646:
 13770  1570  0021               	movlb	1	; select bank1
 13771  1571  0830               	movf	___flmul@temp^(0+128),w
 13772  1572  00A0               	movwf	??___flmul^(0+128)
 13773  1573  0820               	movf	??___flmul^(0+128),w
 13774  1574  00AB               	movwf	___flmul@bexp^(0+128)
 13775  1575  30FF               	movlw	255
 13776  1576  05AC               	andwf	___flmul@prod^(0+128),f
 13777  1577  30FF               	movlw	255
 13778  1578  05AD               	andwf	(___flmul@prod+1)^(0+128),f
 13779  1579  307F               	movlw	127
 13780  157A  05AE               	andwf	(___flmul@prod+2)^(0+128),f
 13781  157B  3000               	movlw	0
 13782  157C  05AF               	andwf	(___flmul@prod+3)^(0+128),f
 13783  157D  182B               	btfsc	___flmul@bexp^(0+128),0
 13784  157E  17AE               	bsf	(___flmul@prod^(0+128)+2),7
 13785  157F  362B               	lsrf	___flmul@bexp^(0+128),w
 13786  1580  00A0               	movwf	??___flmul^(0+128)
 13787  1581  0820               	movf	??___flmul^(0+128),w
 13788  1582  00AF               	movwf	(___flmul@prod^(0+128)+3)
 13789  1583                     l1531:
 13790  1583  0825               	movf	___flmul@sign^(0+128),w
 13791  1584  00A0               	movwf	??___flmul^(0+128)
 13792  1585  0820               	movf	??___flmul^(0+128),w
 13793  1586  04AF               	iorwf	(___flmul@prod^(0+128)+3),f
 13794  1587  082F               	movf	(___flmul@prod+3)^(0+128),w
 13795  1588  0020               	movlb	0	; select bank0
 13796  1589  00EB               	movwf	?___flmul+3
 13797  158A  0021               	movlb	1	; select bank1
 13798  158B  082E               	movf	(___flmul@prod+2)^(0+128),w
 13799  158C  0020               	movlb	0	; select bank0
 13800  158D  00EA               	movwf	?___flmul+2
 13801  158E  0021               	movlb	1	; select bank1
 13802  158F  082D               	movf	(___flmul@prod+1)^(0+128),w
 13803  1590  0020               	movlb	0	; select bank0
 13804  1591  00E9               	movwf	?___flmul+1
 13805  1592  0021               	movlb	1	; select bank1
 13806  1593  082C               	movf	___flmul@prod^(0+128),w
 13807  1594  0020               	movlb	0	; select bank0
 13808  1595  00E8               	movwf	?___flmul
 13809  1596  0008               	return
 13810  1597                     __end_of___flmul:
 13811                           
 13812                           	psect	text33
 13813  0801                     __ptext33:	
 13814 ;; *************** function __Umul8_16 *****************
 13815 ;; Defined at:
 13816 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8_16.c"
 13817 ;; Parameters:    Size  Location     Type
 13818 ;;  multiplier      1    wreg     unsigned char 
 13819 ;;  multiplicand    1    3[COMMON] unsigned char 
 13820 ;; Auto vars:     Size  Location     Type
 13821 ;;  multiplier      1    4[BANK0 ] unsigned char 
 13822 ;;  word_mpld       2    2[BANK0 ] unsigned int 
 13823 ;;  product         2    0[BANK0 ] unsigned int 
 13824 ;; Return value:  Size  Location     Type
 13825 ;;                  2    3[COMMON] unsigned int 
 13826 ;; Registers used:
 13827 ;;		wreg, status,2, status,0
 13828 ;; Tracked objects:
 13829 ;;		On entry : 1F/0
 13830 ;;		On exit  : 1F/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;Total ram usage:        9 bytes
 13838 ;; Hardware stack levels used: 1
 13839 ;; Hardware stack levels required when called: 2
 13840 ;; This function calls:
 13841 ;;		Nothing
 13842 ;; This function is called by:
 13843 ;;		___flmul
 13844 ;; This function uses a non-reentrant model
 13845 ;;
 13846                           
 13847  0801                     __Umul8_16:	
 13848                           ;psect for function __Umul8_16
 13849                           
 13850                           
 13851                           ;incstack = 0
 13852                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 13853                           ;__Umul8_16@multiplier stored from wreg
 13854  0801  00A4               	movwf	__Umul8_16@multiplier
 13855  0802  01A0               	clrf	__Umul8_16@product
 13856  0803  01A1               	clrf	__Umul8_16@product+1
 13857  0804  0873               	movf	__Umul8_16@multiplicand,w
 13858  0805  00F5               	movwf	??__Umul8_16
 13859  0806  01F6               	clrf	??__Umul8_16+1
 13860  0807  0875               	movf	??__Umul8_16,w
 13861  0808  00A2               	movwf	__Umul8_16@word_mpld
 13862  0809  0876               	movf	??__Umul8_16+1,w
 13863  080A  00A3               	movwf	__Umul8_16@word_mpld+1
 13864  080B                     l4732:
 13865  080B  1C24               	btfss	__Umul8_16@multiplier,0
 13866  080C  2811               	goto	l1538
 13867  080D  0822               	movf	__Umul8_16@word_mpld,w
 13868  080E  07A0               	addwf	__Umul8_16@product,f
 13869  080F  0823               	movf	__Umul8_16@word_mpld+1,w
 13870  0810  3DA1               	addwfc	__Umul8_16@product+1,f
 13871  0811                     l1538:
 13872  0811  3001               	movlw	1
 13873  0812                     u5805:
 13874  0812  35A2               	lslf	__Umul8_16@word_mpld,f
 13875  0813  0DA3               	rlf	__Umul8_16@word_mpld+1,f
 13876  0814  0B89               	decfsz	9,f
 13877  0815  2812               	goto	u5805
 13878  0816  1003               	clrc
 13879  0817  0CA4               	rrf	__Umul8_16@multiplier,f
 13880  0818  0824               	movf	__Umul8_16@multiplier,w
 13881  0819  1D03               	btfss	3,2
 13882  081A  280B               	goto	l4732
 13883  081B  0821               	movf	__Umul8_16@product+1,w
 13884  081C  00F4               	movwf	?__Umul8_16+1
 13885  081D  0820               	movf	__Umul8_16@product,w
 13886  081E  00F3               	movwf	?__Umul8_16
 13887  081F  0008               	return
 13888  0820                     __end_of__Umul8_16:
 13889                           
 13890                           	psect	text34
 13891  1E87                     __ptext34:	
 13892 ;; *************** function ___fldiv *****************
 13893 ;; Defined at:
 13894 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcdiv.c"
 13895 ;; Parameters:    Size  Location     Type
 13896 ;;  a               4   26[BANK0 ] unsigned int 
 13897 ;;  b               4   30[BANK0 ] unsigned int 
 13898 ;; Auto vars:     Size  Location     Type
 13899 ;;  grs             4   46[BANK0 ] unsigned long 
 13900 ;;  rem             4   39[BANK0 ] unsigned long 
 13901 ;;  new_exp         2   44[BANK0 ] int 
 13902 ;;  aexp            1   51[BANK0 ] unsigned char 
 13903 ;;  bexp            1   50[BANK0 ] unsigned char 
 13904 ;;  sign            1   43[BANK0 ] unsigned char 
 13905 ;; Return value:  Size  Location     Type
 13906 ;;                  4   26[BANK0 ] unsigned char 
 13907 ;; Registers used:
 13908 ;;		wreg, status,2, status,0
 13909 ;; Tracked objects:
 13910 ;;		On entry : 1F/0
 13911 ;;		On exit  : 1F/0
 13912 ;;		Unchanged: 0/0
 13913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13914 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13917 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13918 ;;Total ram usage:       26 bytes
 13919 ;; Hardware stack levels used: 1
 13920 ;; Hardware stack levels required when called: 2
 13921 ;; This function calls:
 13922 ;;		Nothing
 13923 ;; This function is called by:
 13924 ;;		_get_pwr
 13925 ;;		_show_pwr
 13926 ;; This function uses a non-reentrant model
 13927 ;;
 13928                           
 13929  1E87                     ___fldiv:	
 13930                           ;psect for function ___fldiv
 13931                           
 13932                           
 13933                           ;incstack = 0
 13934                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 13935  1E87  0841               	movf	___fldiv@b+3,w
 13936  1E88  3980               	andlw	128
 13937  1E89  00C2               	movwf	??___fldiv
 13938  1E8A  0842               	movf	??___fldiv,w
 13939  1E8B  00CB               	movwf	___fldiv@sign
 13940  1E8C  3541               	lslf	___fldiv@b+3,w
 13941  1E8D  00C2               	movwf	??___fldiv
 13942  1E8E  0842               	movf	??___fldiv,w
 13943  1E8F  00D2               	movwf	___fldiv@bexp
 13944  1E90  1BC0               	btfsc	___fldiv@b+2,7
 13945  1E91  1452               	bsf	___fldiv@bexp,0
 13946  1E92  0852               	movf	___fldiv@bexp,w
 13947  1E93  1903               	btfsc	3,2
 13948  1E94  2EA3               	goto	l5396
 13949  1E95  0A52               	incf	___fldiv@bexp,w
 13950  1E96  1D03               	btfss	3,2
 13951  1E97  2EA0               	goto	l5392
 13952  1E98  3000               	movlw	0
 13953  1E99  00C1               	movwf	___fldiv@b+3
 13954  1E9A  3000               	movlw	0
 13955  1E9B  00C0               	movwf	___fldiv@b+2
 13956  1E9C  3000               	movlw	0
 13957  1E9D  00BF               	movwf	___fldiv@b+1
 13958  1E9E  3000               	movlw	0
 13959  1E9F  00BE               	movwf	___fldiv@b
 13960  1EA0                     l5392:
 13961  1EA0  17C0               	bsf	___fldiv@b+2,7
 13962  1EA1  01C1               	clrf	___fldiv@b+3
 13963  1EA2  2EAB               	goto	l5398
 13964  1EA3                     l5396:
 13965  1EA3  3000               	movlw	0
 13966  1EA4  00C1               	movwf	___fldiv@b+3
 13967  1EA5  3000               	movlw	0
 13968  1EA6  00C0               	movwf	___fldiv@b+2
 13969  1EA7  3000               	movlw	0
 13970  1EA8  00BF               	movwf	___fldiv@b+1
 13971  1EA9  3000               	movlw	0
 13972  1EAA  00BE               	movwf	___fldiv@b
 13973  1EAB                     l5398:
 13974  1EAB  083D               	movf	___fldiv@a+3,w
 13975  1EAC  3980               	andlw	128
 13976  1EAD  00C2               	movwf	??___fldiv
 13977  1EAE  0842               	movf	??___fldiv,w
 13978  1EAF  06CB               	xorwf	___fldiv@sign,f
 13979  1EB0  353D               	lslf	___fldiv@a+3,w
 13980  1EB1  00C2               	movwf	??___fldiv
 13981  1EB2  0842               	movf	??___fldiv,w
 13982  1EB3  00D3               	movwf	___fldiv@aexp
 13983  1EB4  1BBC               	btfsc	___fldiv@a+2,7
 13984  1EB5  1453               	bsf	___fldiv@aexp,0
 13985  1EB6  0853               	movf	___fldiv@aexp,w
 13986  1EB7  1903               	btfsc	3,2
 13987  1EB8  2EC7               	goto	l5416
 13988  1EB9  0A53               	incf	___fldiv@aexp,w
 13989  1EBA  1D03               	btfss	3,2
 13990  1EBB  2EC4               	goto	l5412
 13991  1EBC  3000               	movlw	0
 13992  1EBD  00BD               	movwf	___fldiv@a+3
 13993  1EBE  3000               	movlw	0
 13994  1EBF  00BC               	movwf	___fldiv@a+2
 13995  1EC0  3000               	movlw	0
 13996  1EC1  00BB               	movwf	___fldiv@a+1
 13997  1EC2  3000               	movlw	0
 13998  1EC3  00BA               	movwf	___fldiv@a
 13999  1EC4                     l5412:
 14000  1EC4  17BC               	bsf	___fldiv@a+2,7
 14001  1EC5  01BD               	clrf	___fldiv@a+3
 14002  1EC6  2ECF               	goto	l1479
 14003  1EC7                     l5416:
 14004  1EC7  3000               	movlw	0
 14005  1EC8  00BD               	movwf	___fldiv@a+3
 14006  1EC9  3000               	movlw	0
 14007  1ECA  00BC               	movwf	___fldiv@a+2
 14008  1ECB  3000               	movlw	0
 14009  1ECC  00BB               	movwf	___fldiv@a+1
 14010  1ECD  3000               	movlw	0
 14011  1ECE  00BA               	movwf	___fldiv@a
 14012  1ECF                     l1479:
 14013  1ECF  083D               	movf	___fldiv@a+3,w
 14014  1ED0  043C               	iorwf	___fldiv@a+2,w
 14015  1ED1  043B               	iorwf	___fldiv@a+1,w
 14016  1ED2  043A               	iorwf	___fldiv@a,w
 14017  1ED3  1D03               	skipz
 14018  1ED4  2EEE               	goto	l5426
 14019  1ED5  3000               	movlw	0
 14020  1ED6  00C1               	movwf	___fldiv@b+3
 14021  1ED7  3000               	movlw	0
 14022  1ED8  00C0               	movwf	___fldiv@b+2
 14023  1ED9  3000               	movlw	0
 14024  1EDA  00BF               	movwf	___fldiv@b+1
 14025  1EDB  3000               	movlw	0
 14026  1EDC  00BE               	movwf	___fldiv@b
 14027  1EDD  3080               	movlw	128
 14028  1EDE  04C0               	iorwf	___fldiv@b+2,f
 14029  1EDF  307F               	movlw	127
 14030  1EE0  04C1               	iorwf	___fldiv@b+3,f
 14031  1EE1                     L35:
 14032  1EE1  084B               	movf	___fldiv@sign,w
 14033  1EE2  00C2               	movwf	??___fldiv
 14034  1EE3  0842               	movf	??___fldiv,w
 14035  1EE4  04C1               	iorwf	___fldiv@b+3,f
 14036  1EE5  0841               	movf	___fldiv@b+3,w
 14037  1EE6  00BD               	movwf	?___fldiv+3
 14038  1EE7  0840               	movf	___fldiv@b+2,w
 14039  1EE8  00BC               	movwf	?___fldiv+2
 14040  1EE9  083F               	movf	___fldiv@b+1,w
 14041  1EEA  00BB               	movwf	?___fldiv+1
 14042  1EEB  083E               	movf	___fldiv@b,w
 14043  1EEC  00BA               	movwf	?___fldiv
 14044  1EED  0008               	return
 14045  1EEE                     l5426:
 14046  1EEE  0852               	movf	___fldiv@bexp,w
 14047  1EEF  1D03               	btfss	3,2
 14048  1EF0  2EFA               	goto	l5432
 14049  1EF1  3000               	movlw	0
 14050  1EF2  00BD               	movwf	?___fldiv+3
 14051  1EF3  3000               	movlw	0
 14052  1EF4  00BC               	movwf	?___fldiv+2
 14053  1EF5  3000               	movlw	0
 14054  1EF6  00BB               	movwf	?___fldiv+1
 14055  1EF7  3000               	movlw	0
 14056  1EF8  00BA               	movwf	?___fldiv
 14057  1EF9  0008               	return
 14058  1EFA                     l5432:
 14059  1EFA  0852               	movf	___fldiv@bexp,w
 14060  1EFB  00C2               	movwf	??___fldiv
 14061  1EFC  01C3               	clrf	??___fldiv+1
 14062  1EFD  0843               	movf	??___fldiv+1,w
 14063  1EFE  00C5               	movwf	??___fldiv+3
 14064  1EFF  0853               	movf	___fldiv@aexp,w
 14065  1F00  0242               	subwf	??___fldiv,w
 14066  1F01  00C4               	movwf	??___fldiv+2
 14067  1F02  1C03               	skipc
 14068  1F03  03C5               	decf	??___fldiv+3,f
 14069  1F04  0844               	movf	??___fldiv+2,w
 14070  1F05  3E7F               	addlw	127
 14071  1F06  00CC               	movwf	___fldiv@new_exp
 14072  1F07  3000               	movlw	0
 14073  1F08  3D45               	addwfc	??___fldiv+3,w
 14074  1F09  00CD               	movwf	___fldiv@new_exp+1
 14075  1F0A  0841               	movf	___fldiv@b+3,w
 14076  1F0B  00CA               	movwf	___fldiv@rem+3
 14077  1F0C  0840               	movf	___fldiv@b+2,w
 14078  1F0D  00C9               	movwf	___fldiv@rem+2
 14079  1F0E  083F               	movf	___fldiv@b+1,w
 14080  1F0F  00C8               	movwf	___fldiv@rem+1
 14081  1F10  083E               	movf	___fldiv@b,w
 14082  1F11  00C7               	movwf	___fldiv@rem
 14083  1F12  3000               	movlw	0
 14084  1F13  00C1               	movwf	___fldiv@b+3
 14085  1F14  3000               	movlw	0
 14086  1F15  00C0               	movwf	___fldiv@b+2
 14087  1F16  3000               	movlw	0
 14088  1F17  00BF               	movwf	___fldiv@b+1
 14089  1F18  3000               	movlw	0
 14090  1F19  00BE               	movwf	___fldiv@b
 14091  1F1A  3000               	movlw	0
 14092  1F1B  00D1               	movwf	___fldiv@grs+3
 14093  1F1C  3000               	movlw	0
 14094  1F1D  00D0               	movwf	___fldiv@grs+2
 14095  1F1E  3000               	movlw	0
 14096  1F1F  00CF               	movwf	___fldiv@grs+1
 14097  1F20  3000               	movlw	0
 14098  1F21  00CE               	movwf	___fldiv@grs
 14099  1F22  01D3               	clrf	___fldiv@aexp
 14100  1F23                     l5460:
 14101  1F23  301A               	movlw	26
 14102  1F24  0253               	subwf	___fldiv@aexp,w
 14103  1F25  1803               	btfsc	3,0
 14104  1F26  2F5F               	goto	l5462
 14105  1F27  0853               	movf	___fldiv@aexp,w
 14106  1F28  1903               	btfsc	3,2
 14107  1F29  2F41               	goto	l5452
 14108  1F2A  3001               	movlw	1
 14109  1F2B                     u7255:
 14110  1F2B  35C7               	lslf	___fldiv@rem,f
 14111  1F2C  0DC8               	rlf	___fldiv@rem+1,f
 14112  1F2D  0DC9               	rlf	___fldiv@rem+2,f
 14113  1F2E  0DCA               	rlf	___fldiv@rem+3,f
 14114  1F2F  0B89               	decfsz	9,f
 14115  1F30  2F2B               	goto	u7255
 14116  1F31  3001               	movlw	1
 14117  1F32                     u7265:
 14118  1F32  35BE               	lslf	___fldiv@b,f
 14119  1F33  0DBF               	rlf	___fldiv@b+1,f
 14120  1F34  0DC0               	rlf	___fldiv@b+2,f
 14121  1F35  0DC1               	rlf	___fldiv@b+3,f
 14122  1F36  0B89               	decfsz	9,f
 14123  1F37  2F32               	goto	u7265
 14124  1F38  1BD1               	btfsc	___fldiv@grs+3,7
 14125  1F39  143E               	bsf	___fldiv@b,0
 14126  1F3A  3001               	movlw	1
 14127  1F3B                     u7285:
 14128  1F3B  35CE               	lslf	___fldiv@grs,f
 14129  1F3C  0DCF               	rlf	___fldiv@grs+1,f
 14130  1F3D  0DD0               	rlf	___fldiv@grs+2,f
 14131  1F3E  0DD1               	rlf	___fldiv@grs+3,f
 14132  1F3F  0B89               	decfsz	9,f
 14133  1F40  2F3B               	goto	u7285
 14134  1F41                     l5452:
 14135  1F41  083D               	movf	___fldiv@a+3,w
 14136  1F42  024A               	subwf	___fldiv@rem+3,w
 14137  1F43  1D03               	skipz
 14138  1F44  2F4F               	goto	u7295
 14139  1F45  083C               	movf	___fldiv@a+2,w
 14140  1F46  0249               	subwf	___fldiv@rem+2,w
 14141  1F47  1D03               	skipz
 14142  1F48  2F4F               	goto	u7295
 14143  1F49  083B               	movf	___fldiv@a+1,w
 14144  1F4A  0248               	subwf	___fldiv@rem+1,w
 14145  1F4B  1D03               	skipz
 14146  1F4C  2F4F               	goto	u7295
 14147  1F4D  083A               	movf	___fldiv@a,w
 14148  1F4E  0247               	subwf	___fldiv@rem,w
 14149  1F4F                     u7295:
 14150  1F4F  1C03               	skipc
 14151  1F50  2F5A               	goto	l5458
 14152  1F51  1751               	bsf	___fldiv@grs+3,6
 14153  1F52  083A               	movf	___fldiv@a,w
 14154  1F53  02C7               	subwf	___fldiv@rem,f
 14155  1F54  083B               	movf	___fldiv@a+1,w
 14156  1F55  3BC8               	subwfb	___fldiv@rem+1,f
 14157  1F56  083C               	movf	___fldiv@a+2,w
 14158  1F57  3BC9               	subwfb	___fldiv@rem+2,f
 14159  1F58  083D               	movf	___fldiv@a+3,w
 14160  1F59  3BCA               	subwfb	___fldiv@rem+3,f
 14161  1F5A                     l5458:
 14162  1F5A  3001               	movlw	1
 14163  1F5B  00C2               	movwf	??___fldiv
 14164  1F5C  0842               	movf	??___fldiv,w
 14165  1F5D  07D3               	addwf	___fldiv@aexp,f
 14166  1F5E  2F23               	goto	l5460
 14167  1F5F                     l5462:
 14168  1F5F  084A               	movf	___fldiv@rem+3,w
 14169  1F60  0449               	iorwf	___fldiv@rem+2,w
 14170  1F61  0448               	iorwf	___fldiv@rem+1,w
 14171  1F62  0447               	iorwf	___fldiv@rem,w
 14172  1F63  1D03               	btfss	3,2
 14173  1F64  144E               	bsf	___fldiv@grs,0
 14174  1F65                     l5476:
 14175  1F65  1BC0               	btfsc	___fldiv@b+2,7
 14176  1F66  2F7C               	goto	l5478
 14177  1F67  3001               	movlw	1
 14178  1F68                     u7325:
 14179  1F68  35BE               	lslf	___fldiv@b,f
 14180  1F69  0DBF               	rlf	___fldiv@b+1,f
 14181  1F6A  0DC0               	rlf	___fldiv@b+2,f
 14182  1F6B  0DC1               	rlf	___fldiv@b+3,f
 14183  1F6C  0B89               	decfsz	9,f
 14184  1F6D  2F68               	goto	u7325
 14185  1F6E  1BD1               	btfsc	___fldiv@grs+3,7
 14186  1F6F  143E               	bsf	___fldiv@b,0
 14187  1F70  3001               	movlw	1
 14188  1F71                     u7345:
 14189  1F71  35CE               	lslf	___fldiv@grs,f
 14190  1F72  0DCF               	rlf	___fldiv@grs+1,f
 14191  1F73  0DD0               	rlf	___fldiv@grs+2,f
 14192  1F74  0DD1               	rlf	___fldiv@grs+3,f
 14193  1F75  0B89               	decfsz	9,f
 14194  1F76  2F71               	goto	u7345
 14195  1F77  30FF               	movlw	255
 14196  1F78  07CC               	addwf	___fldiv@new_exp,f
 14197  1F79  30FF               	movlw	255
 14198  1F7A  3DCD               	addwfc	___fldiv@new_exp+1,f
 14199  1F7B  2F65               	goto	l5476
 14200  1F7C                     l5478:
 14201  1F7C  01D3               	clrf	___fldiv@aexp
 14202  1F7D  1FD1               	btfss	___fldiv@grs+3,7
 14203  1F7E  2F95               	goto	l5488
 14204  1F7F  30FF               	movlw	255
 14205  1F80  054E               	andwf	___fldiv@grs,w
 14206  1F81  00C2               	movwf	??___fldiv
 14207  1F82  30FF               	movlw	255
 14208  1F83  054F               	andwf	___fldiv@grs+1,w
 14209  1F84  00C3               	movwf	??___fldiv+1
 14210  1F85  30FF               	movlw	255
 14211  1F86  0550               	andwf	___fldiv@grs+2,w
 14212  1F87  00C4               	movwf	??___fldiv+2
 14213  1F88  307F               	movlw	127
 14214  1F89  0551               	andwf	___fldiv@grs+3,w
 14215  1F8A  00C5               	movwf	??___fldiv+3
 14216  1F8B  0845               	movf	??___fldiv+3,w
 14217  1F8C  0444               	iorwf	??___fldiv+2,w
 14218  1F8D  0443               	iorwf	??___fldiv+1,w
 14219  1F8E  0442               	iorwf	??___fldiv,w
 14220  1F8F  1903               	skipnz
 14221  1F90  183E               	btfsc	___fldiv@b,0
 14222  1F91  2F93               	goto	l5484
 14223  1F92  2F95               	goto	l5488
 14224  1F93                     l5484:
 14225  1F93  01D3               	clrf	___fldiv@aexp
 14226  1F94  0AD3               	incf	___fldiv@aexp,f
 14227  1F95                     l5488:
 14228  1F95  0853               	movf	___fldiv@aexp,w
 14229  1F96  1903               	btfsc	3,2
 14230  1F97  2FBE               	goto	l5498
 14231  1F98  3001               	movlw	1
 14232  1F99  07BE               	addwf	___fldiv@b,f
 14233  1F9A  3000               	movlw	0
 14234  1F9B  3DBF               	addwfc	___fldiv@b+1,f
 14235  1F9C  3000               	movlw	0
 14236  1F9D  3DC0               	addwfc	___fldiv@b+2,f
 14237  1F9E  3000               	movlw	0
 14238  1F9F  3DC1               	addwfc	___fldiv@b+3,f
 14239  1FA0  1C41               	btfss	___fldiv@b+3,0
 14240  1FA1  2FBE               	goto	l5498
 14241  1FA2  083E               	movf	___fldiv@b,w
 14242  1FA3  00C2               	movwf	??___fldiv
 14243  1FA4  083F               	movf	___fldiv@b+1,w
 14244  1FA5  00C3               	movwf	??___fldiv+1
 14245  1FA6  0840               	movf	___fldiv@b+2,w
 14246  1FA7  00C4               	movwf	??___fldiv+2
 14247  1FA8  0841               	movf	___fldiv@b+3,w
 14248  1FA9  00C5               	movwf	??___fldiv+3
 14249  1FAA  3001               	movlw	1
 14250  1FAB  00C6               	movwf	??___fldiv+4
 14251  1FAC                     u7415:
 14252  1FAC  37C5               	asrf	??___fldiv+3,f
 14253  1FAD  0CC4               	rrf	??___fldiv+2,f
 14254  1FAE  0CC3               	rrf	??___fldiv+1,f
 14255  1FAF  0CC2               	rrf	??___fldiv,f
 14256  1FB0  0BC6               	decfsz	??___fldiv+4,f
 14257  1FB1  2FAC               	goto	u7415
 14258  1FB2  0845               	movf	??___fldiv+3,w
 14259  1FB3  00C1               	movwf	___fldiv@b+3
 14260  1FB4  0844               	movf	??___fldiv+2,w
 14261  1FB5  00C0               	movwf	___fldiv@b+2
 14262  1FB6  0843               	movf	??___fldiv+1,w
 14263  1FB7  00BF               	movwf	___fldiv@b+1
 14264  1FB8  0842               	movf	??___fldiv,w
 14265  1FB9  00BE               	movwf	___fldiv@b
 14266  1FBA  3001               	movlw	1
 14267  1FBB  07CC               	addwf	___fldiv@new_exp,f
 14268  1FBC  3000               	movlw	0
 14269  1FBD  3DCD               	addwfc	___fldiv@new_exp+1,f
 14270  1FBE                     l5498:
 14271  1FBE  084D               	movf	___fldiv@new_exp+1,w
 14272  1FBF  3A80               	xorlw	128
 14273  1FC0  00C2               	movwf	??___fldiv
 14274  1FC1  3080               	movlw	128
 14275  1FC2  0242               	subwf	??___fldiv,w
 14276  1FC3  1D03               	skipz
 14277  1FC4  2FC7               	goto	u7425
 14278  1FC5  30FF               	movlw	255
 14279  1FC6  024C               	subwf	___fldiv@new_exp,w
 14280  1FC7                     u7425:
 14281  1FC7  1C03               	skipc
 14282  1FC8  2FD6               	goto	l1500
 14283  1FC9  30FF               	movlw	255
 14284  1FCA  0020               	movlb	0	; select bank0
 14285  1FCB  00CC               	movwf	___fldiv@new_exp
 14286  1FCC  3000               	movlw	0
 14287  1FCD  00CD               	movwf	___fldiv@new_exp+1
 14288  1FCE  3000               	movlw	0
 14289  1FCF  00C1               	movwf	___fldiv@b+3
 14290  1FD0  3000               	movlw	0
 14291  1FD1  00C0               	movwf	___fldiv@b+2
 14292  1FD2  3000               	movlw	0
 14293  1FD3  00BF               	movwf	___fldiv@b+1
 14294  1FD4  3000               	movlw	0
 14295  1FD5  00BE               	movwf	___fldiv@b
 14296  1FD6                     l1500:
 14297  1FD6  0020               	movlb	0	; select bank0
 14298  1FD7  084D               	movf	___fldiv@new_exp+1,w
 14299  1FD8  3A80               	xorlw	128
 14300  1FD9  00C2               	movwf	??___fldiv
 14301  1FDA  3080               	movlw	128
 14302  1FDB  0242               	subwf	??___fldiv,w
 14303  1FDC  1D03               	skipz
 14304  1FDD  2FE0               	goto	u7435
 14305  1FDE  3001               	movlw	1
 14306  1FDF  024C               	subwf	___fldiv@new_exp,w
 14307  1FE0                     u7435:
 14308  1FE0  1803               	skipnc
 14309  1FE1  2FEE               	goto	l1501
 14310  1FE2  0020               	movlb	0	; select bank0
 14311  1FE3  01CC               	clrf	___fldiv@new_exp
 14312  1FE4  01CD               	clrf	___fldiv@new_exp+1
 14313  1FE5  3000               	movlw	0
 14314  1FE6  00C1               	movwf	___fldiv@b+3
 14315  1FE7  3000               	movlw	0
 14316  1FE8  00C0               	movwf	___fldiv@b+2
 14317  1FE9  3000               	movlw	0
 14318  1FEA  00BF               	movwf	___fldiv@b+1
 14319  1FEB  3000               	movlw	0
 14320  1FEC  00BE               	movwf	___fldiv@b
 14321  1FED  01CB               	clrf	___fldiv@sign
 14322  1FEE                     l1501:
 14323  1FEE  0020               	movlb	0	; select bank0
 14324  1FEF  084C               	movf	___fldiv@new_exp,w
 14325  1FF0  00C2               	movwf	??___fldiv
 14326  1FF1  0842               	movf	??___fldiv,w
 14327  1FF2  00D2               	movwf	___fldiv@bexp
 14328  1FF3  1C52               	btfss	___fldiv@bexp,0
 14329  1FF4  2FF7               	goto	l5512
 14330  1FF5  17C0               	bsf	___fldiv@b+2,7
 14331  1FF6  2FFB               	goto	l1503
 14332  1FF7                     l5512:
 14333  1FF7  307F               	movlw	127
 14334  1FF8  00C2               	movwf	??___fldiv
 14335  1FF9  0842               	movf	??___fldiv,w
 14336  1FFA  05C0               	andwf	___fldiv@b+2,f
 14337  1FFB                     l1503:
 14338  1FFB  3652               	lsrf	___fldiv@bexp,w
 14339  1FFC  00C2               	movwf	??___fldiv
 14340  1FFD  0842               	movf	??___fldiv,w
 14341  1FFE  00C1               	movwf	___fldiv@b+3
 14342  1FFF  2EE1               	goto	L35
 14343  2000                     __end_of___fldiv:
 14344                           
 14345                           	psect	text35
 14346  115D                     __ptext35:	
 14347 ;; *************** function ___fladd *****************
 14348 ;; Defined at:
 14349 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
 14350 ;; Parameters:    Size  Location     Type
 14351 ;;  b               4   52[BANK0 ] unsigned char 
 14352 ;;  a               4   56[BANK0 ] unsigned char 
 14353 ;; Auto vars:     Size  Location     Type
 14354 ;;  grs             1   71[BANK0 ] unsigned char 
 14355 ;;  bexp            1   70[BANK0 ] unsigned char 
 14356 ;;  aexp            1   69[BANK0 ] unsigned char 
 14357 ;;  signs           1   68[BANK0 ] unsigned char 
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  4   52[BANK0 ] unsigned char 
 14360 ;; Registers used:
 14361 ;;		wreg, status,2, status,0
 14362 ;; Tracked objects:
 14363 ;;		On entry : 1F/0
 14364 ;;		On exit  : 1F/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:       20 bytes
 14372 ;; Hardware stack levels used: 1
 14373 ;; Hardware stack levels required when called: 2
 14374 ;; This function calls:
 14375 ;;		Nothing
 14376 ;; This function is called by:
 14377 ;;		_get_pwr
 14378 ;;		_show_pwr
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382  115D                     ___fladd:	
 14383                           ;psect for function ___fladd
 14384                           
 14385                           
 14386                           ;incstack = 0
 14387                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 14388  115D  0857               	movf	___fladd@b+3,w
 14389  115E  3980               	andlw	128
 14390  115F  00DC               	movwf	??___fladd
 14391  1160  085C               	movf	??___fladd,w
 14392  1161  00E4               	movwf	___fladd@signs
 14393  1162  3557               	lslf	___fladd@b+3,w
 14394  1163  00DC               	movwf	??___fladd
 14395  1164  085C               	movf	??___fladd,w
 14396  1165  00E6               	movwf	___fladd@bexp
 14397  1166  1BD6               	btfsc	___fladd@b+2,7
 14398  1167  1466               	bsf	___fladd@bexp,0
 14399  1168  0866               	movf	___fladd@bexp,w
 14400  1169  1903               	btfsc	3,2
 14401  116A  2979               	goto	l5202
 14402  116B  0A66               	incf	___fladd@bexp,w
 14403  116C  1D03               	btfss	3,2
 14404  116D  2976               	goto	l5198
 14405  116E  3000               	movlw	0
 14406  116F  00D7               	movwf	___fladd@b+3
 14407  1170  3000               	movlw	0
 14408  1171  00D6               	movwf	___fladd@b+2
 14409  1172  3000               	movlw	0
 14410  1173  00D5               	movwf	___fladd@b+1
 14411  1174  3000               	movlw	0
 14412  1175  00D4               	movwf	___fladd@b
 14413  1176                     l5198:
 14414  1176  17D6               	bsf	___fladd@b+2,7
 14415  1177  01D7               	clrf	___fladd@b+3
 14416  1178  2981               	goto	l5204
 14417  1179                     l5202:
 14418  1179  3000               	movlw	0
 14419  117A  00D7               	movwf	___fladd@b+3
 14420  117B  3000               	movlw	0
 14421  117C  00D6               	movwf	___fladd@b+2
 14422  117D  3000               	movlw	0
 14423  117E  00D5               	movwf	___fladd@b+1
 14424  117F  3000               	movlw	0
 14425  1180  00D4               	movwf	___fladd@b
 14426  1181                     l5204:
 14427  1181  085B               	movf	___fladd@a+3,w
 14428  1182  3980               	andlw	128
 14429  1183  00DC               	movwf	??___fladd
 14430  1184  085C               	movf	??___fladd,w
 14431  1185  00E5               	movwf	___fladd@aexp
 14432  1186  0865               	movf	___fladd@aexp,w
 14433  1187  0664               	xorwf	___fladd@signs,w
 14434  1188  1D03               	btfss	3,2
 14435  1189  1764               	bsf	___fladd@signs,6
 14436  118A  355B               	lslf	___fladd@a+3,w
 14437  118B  00DC               	movwf	??___fladd
 14438  118C  085C               	movf	??___fladd,w
 14439  118D  00E5               	movwf	___fladd@aexp
 14440  118E  1BDA               	btfsc	___fladd@a+2,7
 14441  118F  1465               	bsf	___fladd@aexp,0
 14442  1190  0865               	movf	___fladd@aexp,w
 14443  1191  1903               	btfsc	3,2
 14444  1192  29A1               	goto	l5226
 14445  1193  0A65               	incf	___fladd@aexp,w
 14446  1194  1D03               	btfss	3,2
 14447  1195  299E               	goto	l5222
 14448  1196  3000               	movlw	0
 14449  1197  00DB               	movwf	___fladd@a+3
 14450  1198  3000               	movlw	0
 14451  1199  00DA               	movwf	___fladd@a+2
 14452  119A  3000               	movlw	0
 14453  119B  00D9               	movwf	___fladd@a+1
 14454  119C  3000               	movlw	0
 14455  119D  00D8               	movwf	___fladd@a
 14456  119E                     l5222:
 14457  119E  17DA               	bsf	___fladd@a+2,7
 14458  119F  01DB               	clrf	___fladd@a+3
 14459  11A0  29A9               	goto	l1423
 14460  11A1                     l5226:
 14461  11A1  3000               	movlw	0
 14462  11A2  00DB               	movwf	___fladd@a+3
 14463  11A3  3000               	movlw	0
 14464  11A4  00DA               	movwf	___fladd@a+2
 14465  11A5  3000               	movlw	0
 14466  11A6  00D9               	movwf	___fladd@a+1
 14467  11A7  3000               	movlw	0
 14468  11A8  00D8               	movwf	___fladd@a
 14469  11A9                     l1423:
 14470  11A9  0866               	movf	___fladd@bexp,w
 14471  11AA  0265               	subwf	___fladd@aexp,w
 14472  11AB  1803               	skipnc
 14473  11AC  29EF               	goto	l5262
 14474  11AD  1F64               	btfss	___fladd@signs,6
 14475  11AE  29B3               	goto	l5232
 14476  11AF  3080               	movlw	128
 14477  11B0  00DC               	movwf	??___fladd
 14478  11B1  085C               	movf	??___fladd,w
 14479  11B2  06E4               	xorwf	___fladd@signs,f
 14480  11B3                     l5232:
 14481  11B3  0866               	movf	___fladd@bexp,w
 14482  11B4  00DC               	movwf	??___fladd
 14483  11B5  085C               	movf	??___fladd,w
 14484  11B6  00E7               	movwf	___fladd@grs
 14485  11B7  0865               	movf	___fladd@aexp,w
 14486  11B8  00DC               	movwf	??___fladd
 14487  11B9  085C               	movf	??___fladd,w
 14488  11BA  00E6               	movwf	___fladd@bexp
 14489  11BB  0867               	movf	___fladd@grs,w
 14490  11BC  00DC               	movwf	??___fladd
 14491  11BD  085C               	movf	??___fladd,w
 14492  11BE  00E5               	movwf	___fladd@aexp
 14493  11BF  0854               	movf	___fladd@b,w
 14494  11C0  00DC               	movwf	??___fladd
 14495  11C1  085C               	movf	??___fladd,w
 14496  11C2  00E7               	movwf	___fladd@grs
 14497  11C3  0858               	movf	___fladd@a,w
 14498  11C4  00DC               	movwf	??___fladd
 14499  11C5  085C               	movf	??___fladd,w
 14500  11C6  00D4               	movwf	___fladd@b
 14501  11C7  0867               	movf	___fladd@grs,w
 14502  11C8  00DC               	movwf	??___fladd
 14503  11C9  085C               	movf	??___fladd,w
 14504  11CA  00D8               	movwf	___fladd@a
 14505  11CB  0855               	movf	___fladd@b+1,w
 14506  11CC  00DC               	movwf	??___fladd
 14507  11CD  085C               	movf	??___fladd,w
 14508  11CE  00E7               	movwf	___fladd@grs
 14509  11CF  0859               	movf	___fladd@a+1,w
 14510  11D0  00DC               	movwf	??___fladd
 14511  11D1  085C               	movf	??___fladd,w
 14512  11D2  00D5               	movwf	___fladd@b+1
 14513  11D3  0867               	movf	___fladd@grs,w
 14514  11D4  00DC               	movwf	??___fladd
 14515  11D5  085C               	movf	??___fladd,w
 14516  11D6  00D9               	movwf	___fladd@a+1
 14517  11D7  0856               	movf	___fladd@b+2,w
 14518  11D8  00DC               	movwf	??___fladd
 14519  11D9  085C               	movf	??___fladd,w
 14520  11DA  00E7               	movwf	___fladd@grs
 14521  11DB  085A               	movf	___fladd@a+2,w
 14522  11DC  00DC               	movwf	??___fladd
 14523  11DD  085C               	movf	??___fladd,w
 14524  11DE  00D6               	movwf	___fladd@b+2
 14525  11DF  0867               	movf	___fladd@grs,w
 14526  11E0  00DC               	movwf	??___fladd
 14527  11E1  085C               	movf	??___fladd,w
 14528  11E2  00DA               	movwf	___fladd@a+2
 14529  11E3  0857               	movf	___fladd@b+3,w
 14530  11E4  00DC               	movwf	??___fladd
 14531  11E5  085C               	movf	??___fladd,w
 14532  11E6  00E7               	movwf	___fladd@grs
 14533  11E7  085B               	movf	___fladd@a+3,w
 14534  11E8  00DC               	movwf	??___fladd
 14535  11E9  085C               	movf	??___fladd,w
 14536  11EA  00D7               	movwf	___fladd@b+3
 14537  11EB  0867               	movf	___fladd@grs,w
 14538  11EC  00DC               	movwf	??___fladd
 14539  11ED  085C               	movf	??___fladd,w
 14540  11EE  00DB               	movwf	___fladd@a+3
 14541  11EF                     l5262:
 14542  11EF  01E7               	clrf	___fladd@grs
 14543  11F0  0865               	movf	___fladd@aexp,w
 14544  11F1  00DC               	movwf	??___fladd
 14545  11F2  01DD               	clrf	??___fladd+1
 14546  11F3  085D               	movf	??___fladd+1,w
 14547  11F4  00DF               	movwf	??___fladd+3
 14548  11F5  0866               	movf	___fladd@bexp,w
 14549  11F6  025C               	subwf	??___fladd,w
 14550  11F7  00DE               	movwf	??___fladd+2
 14551  11F8  1C03               	skipc
 14552  11F9  03DF               	decf	??___fladd+3,f
 14553  11FA  085F               	movf	??___fladd+3,w
 14554  11FB  3A80               	xorlw	128
 14555  11FC  00E0               	movwf	??___fladd+4
 14556  11FD  3080               	movlw	128
 14557  11FE  0260               	subwf	??___fladd+4,w
 14558  11FF  1D03               	skipz
 14559  1200  2A03               	goto	u6825
 14560  1201  301A               	movlw	26
 14561  1202  025E               	subwf	??___fladd+2,w
 14562  1203                     u6825:
 14563  1203  1C03               	skipc
 14564  1204  2A37               	goto	l5280
 14565  1205  0020               	movlb	0	; select bank0
 14566  1206  0857               	movf	___fladd@b+3,w
 14567  1207  0456               	iorwf	___fladd@b+2,w
 14568  1208  0455               	iorwf	___fladd@b+1,w
 14569  1209  0454               	iorwf	___fladd@b,w
 14570  120A  1903               	btfsc	3,2
 14571  120B  2A0E               	goto	u6830
 14572  120C  3001               	movlw	1
 14573  120D  2A0F               	goto	u6840
 14574  120E                     u6830:
 14575  120E  3000               	movlw	0
 14576  120F                     u6840:
 14577  120F  00DC               	movwf	??___fladd
 14578  1210  085C               	movf	??___fladd,w
 14579  1211  00E7               	movwf	___fladd@grs
 14580  1212  3000               	movlw	0
 14581  1213  00D7               	movwf	___fladd@b+3
 14582  1214  3000               	movlw	0
 14583  1215  00D6               	movwf	___fladd@b+2
 14584  1216  3000               	movlw	0
 14585  1217  00D5               	movwf	___fladd@b+1
 14586  1218  3000               	movlw	0
 14587  1219  00D4               	movwf	___fladd@b
 14588  121A  0865               	movf	___fladd@aexp,w
 14589  121B  00DC               	movwf	??___fladd
 14590  121C  085C               	movf	??___fladd,w
 14591  121D  00E6               	movwf	___fladd@bexp
 14592  121E  2A3C               	goto	l1427
 14593  121F                     l1429:
 14594  121F  1C67               	btfss	___fladd@grs,0
 14595  1220  2A27               	goto	l5270
 14596  1221  3667               	lsrf	___fladd@grs,w
 14597  1222  3801               	iorlw	1
 14598  1223  00DC               	movwf	??___fladd
 14599  1224  085C               	movf	??___fladd,w
 14600  1225  00E7               	movwf	___fladd@grs
 14601  1226  2A29               	goto	l5272
 14602  1227                     l5270:
 14603  1227  1003               	clrc
 14604  1228  0CE7               	rrf	___fladd@grs,f
 14605  1229                     l5272:
 14606  1229  1854               	btfsc	___fladd@b,0
 14607  122A  17E7               	bsf	___fladd@grs,7
 14608  122B  3001               	movlw	1
 14609  122C  00DC               	movwf	??___fladd
 14610  122D                     u6875:
 14611  122D  37D7               	asrf	___fladd@b+3,f
 14612  122E  0CD6               	rrf	___fladd@b+2,f
 14613  122F  0CD5               	rrf	___fladd@b+1,f
 14614  1230  0CD4               	rrf	___fladd@b,f
 14615  1231  0BDC               	decfsz	??___fladd& (0+127),f
 14616  1232  2A2D               	goto	u6875
 14617  1233  3001               	movlw	1
 14618  1234  00DC               	movwf	??___fladd
 14619  1235  085C               	movf	??___fladd,w
 14620  1236  07E6               	addwf	___fladd@bexp,f
 14621  1237                     l5280:
 14622  1237  0020               	movlb	0	; select bank0
 14623  1238  0865               	movf	___fladd@aexp,w
 14624  1239  0266               	subwf	___fladd@bexp,w
 14625  123A  1C03               	skipc
 14626  123B  2A1F               	goto	l1429
 14627  123C                     l1427:
 14628  123C  1B64               	btfsc	___fladd@signs,6
 14629  123D  2A6D               	goto	l5306
 14630  123E  0866               	movf	___fladd@bexp,w
 14631  123F  1D03               	btfss	3,2
 14632  1240  2A4A               	goto	l5288
 14633  1241  3000               	movlw	0
 14634  1242  00D7               	movwf	?___fladd+3
 14635  1243  3000               	movlw	0
 14636  1244  00D6               	movwf	?___fladd+2
 14637  1245  3000               	movlw	0
 14638  1246  00D5               	movwf	?___fladd+1
 14639  1247  3000               	movlw	0
 14640  1248  00D4               	movwf	?___fladd
 14641  1249  0008               	return
 14642  124A                     l5288:
 14643  124A  0858               	movf	___fladd@a,w
 14644  124B  07D4               	addwf	___fladd@b,f
 14645  124C  0859               	movf	___fladd@a+1,w
 14646  124D  3DD5               	addwfc	___fladd@b+1,f
 14647  124E  085A               	movf	___fladd@a+2,w
 14648  124F  3DD6               	addwfc	___fladd@b+2,f
 14649  1250  085B               	movf	___fladd@a+3,w
 14650  1251  3DD7               	addwfc	___fladd@b+3,f
 14651  1252  1C57               	btfss	___fladd@b+3,0
 14652  1253  2AE7               	goto	l5340
 14653  1254  1C67               	btfss	___fladd@grs,0
 14654  1255  2A5C               	goto	l5296
 14655  1256  3667               	lsrf	___fladd@grs,w
 14656  1257  3801               	iorlw	1
 14657  1258  00DC               	movwf	??___fladd
 14658  1259  085C               	movf	??___fladd,w
 14659  125A  00E7               	movwf	___fladd@grs
 14660  125B  2A5E               	goto	l5298
 14661  125C                     l5296:
 14662  125C  1003               	clrc
 14663  125D  0CE7               	rrf	___fladd@grs,f
 14664  125E                     l5298:
 14665  125E  1854               	btfsc	___fladd@b,0
 14666  125F  17E7               	bsf	___fladd@grs,7
 14667  1260  3001               	movlw	1
 14668  1261  00DC               	movwf	??___fladd
 14669  1262                     u6945:
 14670  1262  37D7               	asrf	___fladd@b+3,f
 14671  1263  0CD6               	rrf	___fladd@b+2,f
 14672  1264  0CD5               	rrf	___fladd@b+1,f
 14673  1265  0CD4               	rrf	___fladd@b,f
 14674  1266  0BDC               	decfsz	??___fladd& (0+127),f
 14675  1267  2A62               	goto	u6945
 14676  1268  3001               	movlw	1
 14677  1269  00DC               	movwf	??___fladd
 14678  126A  085C               	movf	??___fladd,w
 14679  126B  07E6               	addwf	___fladd@bexp,f
 14680  126C  2AE7               	goto	l5340
 14681  126D                     l5306:
 14682  126D  0857               	movf	___fladd@b+3,w
 14683  126E  3A80               	xorlw	128
 14684  126F  00DC               	movwf	??___fladd
 14685  1270  085B               	movf	___fladd@a+3,w
 14686  1271  3A80               	xorlw	128
 14687  1272  025C               	subwf	??___fladd,w
 14688  1273  1D03               	skipz
 14689  1274  2A7F               	goto	u6953
 14690  1275  085A               	movf	___fladd@a+2,w
 14691  1276  0256               	subwf	___fladd@b+2,w
 14692  1277  1D03               	skipz
 14693  1278  2A7F               	goto	u6953
 14694  1279  0859               	movf	___fladd@a+1,w
 14695  127A  0255               	subwf	___fladd@b+1,w
 14696  127B  1D03               	skipz
 14697  127C  2A7F               	goto	u6953
 14698  127D  0858               	movf	___fladd@a,w
 14699  127E  0254               	subwf	___fladd@b,w
 14700  127F                     u6953:
 14701  127F  1803               	skipnc
 14702  1280  2AB7               	goto	l5316
 14703  1281  30FF               	movlw	255
 14704  1282  00DC               	movwf	??___fladd
 14705  1283  30FF               	movlw	255
 14706  1284  00DD               	movwf	??___fladd+1
 14707  1285  30FF               	movlw	255
 14708  1286  00DE               	movwf	??___fladd+2
 14709  1287  30FF               	movlw	255
 14710  1288  00DF               	movwf	??___fladd+3
 14711  1289  0854               	movf	___fladd@b,w
 14712  128A  0258               	subwf	___fladd@a,w
 14713  128B  00E0               	movwf	??___fladd+4
 14714  128C  0855               	movf	___fladd@b+1,w
 14715  128D  3B59               	subwfb	___fladd@a+1,w
 14716  128E  00E1               	movwf	??___fladd+5
 14717  128F  0856               	movf	___fladd@b+2,w
 14718  1290  3B5A               	subwfb	___fladd@a+2,w
 14719  1291  00E2               	movwf	??___fladd+6
 14720  1292  0857               	movf	___fladd@b+3,w
 14721  1293  3B5B               	subwfb	___fladd@a+3,w
 14722  1294  00E3               	movwf	??___fladd+7
 14723  1295  0860               	movf	??___fladd+4,w
 14724  1296  07DC               	addwf	??___fladd,f
 14725  1297  0861               	movf	??___fladd+5,w
 14726  1298  3DDD               	addwfc	??___fladd+1,f
 14727  1299  0862               	movf	??___fladd+6,w
 14728  129A  3DDE               	addwfc	??___fladd+2,f
 14729  129B  0863               	movf	??___fladd+7,w
 14730  129C  3DDF               	addwfc	??___fladd+3,f
 14731  129D  085F               	movf	??___fladd+3,w
 14732  129E  00D7               	movwf	___fladd@b+3
 14733  129F  085E               	movf	??___fladd+2,w
 14734  12A0  00D6               	movwf	___fladd@b+2
 14735  12A1  085D               	movf	??___fladd+1,w
 14736  12A2  00D5               	movwf	___fladd@b+1
 14737  12A3  085C               	movf	??___fladd,w
 14738  12A4  00D4               	movwf	___fladd@b
 14739  12A5  3080               	movlw	128
 14740  12A6  00DC               	movwf	??___fladd
 14741  12A7  085C               	movf	??___fladd,w
 14742  12A8  06E4               	xorwf	___fladd@signs,f
 14743  12A9  09E7               	comf	___fladd@grs,f
 14744  12AA  0AE7               	incf	___fladd@grs,f
 14745  12AB  0867               	movf	___fladd@grs,w
 14746  12AC  1D03               	btfss	3,2
 14747  12AD  2ABF               	goto	l1444
 14748  12AE  3001               	movlw	1
 14749  12AF  07D4               	addwf	___fladd@b,f
 14750  12B0  3000               	movlw	0
 14751  12B1  3DD5               	addwfc	___fladd@b+1,f
 14752  12B2  3000               	movlw	0
 14753  12B3  3DD6               	addwfc	___fladd@b+2,f
 14754  12B4  3000               	movlw	0
 14755  12B5  3DD7               	addwfc	___fladd@b+3,f
 14756  12B6  2ABF               	goto	l1444
 14757  12B7                     l5316:
 14758  12B7  0858               	movf	___fladd@a,w
 14759  12B8  02D4               	subwf	___fladd@b,f
 14760  12B9  0859               	movf	___fladd@a+1,w
 14761  12BA  3BD5               	subwfb	___fladd@b+1,f
 14762  12BB  085A               	movf	___fladd@a+2,w
 14763  12BC  3BD6               	subwfb	___fladd@b+2,f
 14764  12BD  085B               	movf	___fladd@a+3,w
 14765  12BE  3BD7               	subwfb	___fladd@b+3,f
 14766  12BF                     l1444:
 14767  12BF  0857               	movf	___fladd@b+3,w
 14768  12C0  0456               	iorwf	___fladd@b+2,w
 14769  12C1  0455               	iorwf	___fladd@b+1,w
 14770  12C2  0454               	iorwf	___fladd@b,w
 14771  12C3  1D03               	skipz
 14772  12C4  2AE5               	goto	l5338
 14773  12C5  0867               	movf	___fladd@grs,w
 14774  12C6  1D03               	btfss	3,2
 14775  12C7  2AE5               	goto	l5338
 14776  12C8  3000               	movlw	0
 14777  12C9  00D7               	movwf	?___fladd+3
 14778  12CA  3000               	movlw	0
 14779  12CB  00D6               	movwf	?___fladd+2
 14780  12CC  3000               	movlw	0
 14781  12CD  00D5               	movwf	?___fladd+1
 14782  12CE  3000               	movlw	0
 14783  12CF  00D4               	movwf	?___fladd
 14784  12D0  0008               	return
 14785  12D1                     l5324:
 14786  12D1  3001               	movlw	1
 14787  12D2                     u6995:
 14788  12D2  35D4               	lslf	___fladd@b,f
 14789  12D3  0DD5               	rlf	___fladd@b+1,f
 14790  12D4  0DD6               	rlf	___fladd@b+2,f
 14791  12D5  0DD7               	rlf	___fladd@b+3,f
 14792  12D6  0B89               	decfsz	9,f
 14793  12D7  2AD2               	goto	u6995
 14794  12D8  1BE7               	btfsc	___fladd@grs,7
 14795  12D9  1454               	bsf	___fladd@b,0
 14796  12DA  1C67               	btfss	___fladd@grs,0
 14797  12DB  2ADE               	goto	l5332
 14798  12DC  1403               	setc
 14799  12DD  2ADF               	goto	L36
 14800  12DE                     l5332:
 14801  12DE  1003               	clrc
 14802  12DF                     L36:
 14803  12DF  0DE7               	rlf	___fladd@grs,f
 14804  12E0  0866               	movf	___fladd@bexp,w
 14805  12E1  1903               	btfsc	3,2
 14806  12E2  2AE5               	goto	l5338
 14807  12E3  3001               	movlw	1
 14808  12E4  02E6               	subwf	___fladd@bexp,f
 14809  12E5                     l5338:
 14810  12E5  1FD6               	btfss	___fladd@b+2,7
 14811  12E6  2AD1               	goto	l5324
 14812  12E7                     l5340:
 14813  12E7  01E5               	clrf	___fladd@aexp
 14814  12E8  1FE7               	btfss	___fladd@grs,7
 14815  12E9  2AF2               	goto	l5350
 14816  12EA  0867               	movf	___fladd@grs,w
 14817  12EB  397F               	andlw	127
 14818  12EC  1903               	btfsc	3,2
 14819  12ED  1854               	btfsc	___fladd@b,0
 14820  12EE  2AF0               	goto	l5346
 14821  12EF  2AF2               	goto	l5350
 14822  12F0                     l5346:
 14823  12F0  01E5               	clrf	___fladd@aexp
 14824  12F1  0AE5               	incf	___fladd@aexp,f
 14825  12F2                     l5350:
 14826  12F2  0865               	movf	___fladd@aexp,w
 14827  12F3  1903               	btfsc	3,2
 14828  12F4  2B1E               	goto	l1457
 14829  12F5  3001               	movlw	1
 14830  12F6  07D4               	addwf	___fladd@b,f
 14831  12F7  3000               	movlw	0
 14832  12F8  3DD5               	addwfc	___fladd@b+1,f
 14833  12F9  3000               	movlw	0
 14834  12FA  3DD6               	addwfc	___fladd@b+2,f
 14835  12FB  3000               	movlw	0
 14836  12FC  3DD7               	addwfc	___fladd@b+3,f
 14837  12FD  1C57               	btfss	___fladd@b+3,0
 14838  12FE  2B1E               	goto	l1457
 14839  12FF  0854               	movf	___fladd@b,w
 14840  1300  00DC               	movwf	??___fladd
 14841  1301  0855               	movf	___fladd@b+1,w
 14842  1302  00DD               	movwf	??___fladd+1
 14843  1303  0856               	movf	___fladd@b+2,w
 14844  1304  00DE               	movwf	??___fladd+2
 14845  1305  0857               	movf	___fladd@b+3,w
 14846  1306  00DF               	movwf	??___fladd+3
 14847  1307  3001               	movlw	1
 14848  1308  00E0               	movwf	??___fladd+4
 14849  1309                     u7095:
 14850  1309  37DF               	asrf	??___fladd+3,f
 14851  130A  0CDE               	rrf	??___fladd+2,f
 14852  130B  0CDD               	rrf	??___fladd+1,f
 14853  130C  0CDC               	rrf	??___fladd,f
 14854  130D  0BE0               	decfsz	??___fladd+4,f
 14855  130E  2B09               	goto	u7095
 14856  130F  085F               	movf	??___fladd+3,w
 14857  1310  00D7               	movwf	___fladd@b+3
 14858  1311  085E               	movf	??___fladd+2,w
 14859  1312  00D6               	movwf	___fladd@b+2
 14860  1313  085D               	movf	??___fladd+1,w
 14861  1314  00D5               	movwf	___fladd@b+1
 14862  1315  085C               	movf	??___fladd,w
 14863  1316  00D4               	movwf	___fladd@b
 14864  1317  0A66               	incf	___fladd@bexp,w
 14865  1318  1903               	btfsc	3,2
 14866  1319  2B1E               	goto	l1457
 14867  131A  3001               	movlw	1
 14868  131B  00DC               	movwf	??___fladd
 14869  131C  085C               	movf	??___fladd,w
 14870  131D  07E6               	addwf	___fladd@bexp,f
 14871  131E                     l1457:
 14872  131E  0A66               	incf	___fladd@bexp,w
 14873  131F  1D03               	btfss	3,2
 14874  1320  0866               	movf	___fladd@bexp,w
 14875  1321  1D03               	btfss	3,2
 14876  1322  2B2E               	goto	l5368
 14877  1323  3000               	movlw	0
 14878  1324  00D7               	movwf	___fladd@b+3
 14879  1325  3000               	movlw	0
 14880  1326  00D6               	movwf	___fladd@b+2
 14881  1327  3000               	movlw	0
 14882  1328  00D5               	movwf	___fladd@b+1
 14883  1329  3000               	movlw	0
 14884  132A  00D4               	movwf	___fladd@b
 14885  132B  0866               	movf	___fladd@bexp,w
 14886  132C  1903               	btfsc	3,2
 14887  132D  01E4               	clrf	___fladd@signs
 14888  132E                     l5368:
 14889  132E  1C66               	btfss	___fladd@bexp,0
 14890  132F  2B32               	goto	l5372
 14891  1330  17D6               	bsf	___fladd@b+2,7
 14892  1331  2B36               	goto	l1465
 14893  1332                     l5372:
 14894  1332  307F               	movlw	127
 14895  1333  00DC               	movwf	??___fladd
 14896  1334  085C               	movf	??___fladd,w
 14897  1335  05D6               	andwf	___fladd@b+2,f
 14898  1336                     l1465:
 14899  1336  3666               	lsrf	___fladd@bexp,w
 14900  1337  00DC               	movwf	??___fladd
 14901  1338  085C               	movf	??___fladd,w
 14902  1339  00D7               	movwf	___fladd@b+3
 14903  133A  1FE4               	btfss	___fladd@signs,7
 14904  133B  0008               	return
 14905  133C  17D7               	bsf	___fladd@b+3,7
 14906  133D  0008               	return
 14907  133E                     __end_of___fladd:
 14908                           
 14909                           	psect	text36
 14910  2239                     __ptext36:	
 14911 ;; *************** function ___aldiv *****************
 14912 ;; Defined at:
 14913 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aldiv.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;  divisor         4    8[BANK0 ] long 
 14916 ;;  dividend        4   12[BANK0 ] long 
 14917 ;; Auto vars:     Size  Location     Type
 14918 ;;  quotient        4   18[BANK0 ] long 
 14919 ;;  sign            1   17[BANK0 ] unsigned char 
 14920 ;;  counter         1   16[BANK0 ] unsigned char 
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  4    8[BANK0 ] long 
 14923 ;; Registers used:
 14924 ;;		wreg, status,2, status,0
 14925 ;; Tracked objects:
 14926 ;;		On entry : 1F/0
 14927 ;;		On exit  : 1F/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14930 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;Total ram usage:       15 bytes
 14935 ;; Hardware stack levels used: 1
 14936 ;; Hardware stack levels required when called: 2
 14937 ;; This function calls:
 14938 ;;		Nothing
 14939 ;; This function is called by:
 14940 ;;		_get_pwr
 14941 ;; This function uses a non-reentrant model
 14942 ;;
 14943                           
 14944  2239                     ___aldiv:	
 14945                           ;psect for function ___aldiv
 14946                           
 14947                           
 14948                           ;incstack = 0
 14949                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 14950  2239  01B1               	clrf	___aldiv@sign
 14951  223A  1FAB               	btfss	___aldiv@divisor+3,7
 14952  223B  2A49               	goto	l1187
 14953  223C  09A8               	comf	___aldiv@divisor,f
 14954  223D  09A9               	comf	___aldiv@divisor+1,f
 14955  223E  09AA               	comf	___aldiv@divisor+2,f
 14956  223F  09AB               	comf	___aldiv@divisor+3,f
 14957  2240  0AA8               	incf	___aldiv@divisor,f
 14958  2241  1903               	skipnz
 14959  2242  0AA9               	incf	___aldiv@divisor+1,f
 14960  2243  1903               	skipnz
 14961  2244  0AAA               	incf	___aldiv@divisor+2,f
 14962  2245  1903               	skipnz
 14963  2246  0AAB               	incf	___aldiv@divisor+3,f
 14964  2247  01B1               	clrf	___aldiv@sign
 14965  2248  0AB1               	incf	___aldiv@sign,f
 14966  2249                     l1187:
 14967  2249  1FAF               	btfss	___aldiv@dividend+3,7
 14968  224A  2A5A               	goto	l7924
 14969  224B  09AC               	comf	___aldiv@dividend,f
 14970  224C  09AD               	comf	___aldiv@dividend+1,f
 14971  224D  09AE               	comf	___aldiv@dividend+2,f
 14972  224E  09AF               	comf	___aldiv@dividend+3,f
 14973  224F  0AAC               	incf	___aldiv@dividend,f
 14974  2250  1903               	skipnz
 14975  2251  0AAD               	incf	___aldiv@dividend+1,f
 14976  2252  1903               	skipnz
 14977  2253  0AAE               	incf	___aldiv@dividend+2,f
 14978  2254  1903               	skipnz
 14979  2255  0AAF               	incf	___aldiv@dividend+3,f
 14980  2256  3001               	movlw	1
 14981  2257  00F7               	movwf	??___aldiv
 14982  2258  0877               	movf	??___aldiv,w
 14983  2259  06B1               	xorwf	___aldiv@sign,f
 14984  225A                     l7924:
 14985  225A  3000               	movlw	0
 14986  225B  00B5               	movwf	___aldiv@quotient+3
 14987  225C  3000               	movlw	0
 14988  225D  00B4               	movwf	___aldiv@quotient+2
 14989  225E  3000               	movlw	0
 14990  225F  00B3               	movwf	___aldiv@quotient+1
 14991  2260  3000               	movlw	0
 14992  2261  00B2               	movwf	___aldiv@quotient
 14993  2262  082B               	movf	___aldiv@divisor+3,w
 14994  2263  042A               	iorwf	___aldiv@divisor+2,w
 14995  2264  0429               	iorwf	___aldiv@divisor+1,w
 14996  2265  0428               	iorwf	___aldiv@divisor,w
 14997  2266  1903               	skipnz
 14998  2267  2AA3               	goto	l7946
 14999  2268  01B0               	clrf	___aldiv@counter
 15000  2269  0AB0               	incf	___aldiv@counter,f
 15001  226A                     l7932:
 15002  226A  1BAB               	btfsc	___aldiv@divisor+3,7
 15003  226B  2A78               	goto	l7934
 15004  226C  3001               	movlw	1
 15005  226D                     u11705:
 15006  226D  35A8               	lslf	___aldiv@divisor,f
 15007  226E  0DA9               	rlf	___aldiv@divisor+1,f
 15008  226F  0DAA               	rlf	___aldiv@divisor+2,f
 15009  2270  0DAB               	rlf	___aldiv@divisor+3,f
 15010  2271  0B89               	decfsz	9,f
 15011  2272  2A6D               	goto	u11705
 15012  2273  3001               	movlw	1
 15013  2274  00F7               	movwf	??___aldiv
 15014  2275  0877               	movf	??___aldiv,w
 15015  2276  07B0               	addwf	___aldiv@counter,f
 15016  2277  2A6A               	goto	l7932
 15017  2278                     l7934:
 15018  2278  3001               	movlw	1
 15019  2279                     u11725:
 15020  2279  35B2               	lslf	___aldiv@quotient,f
 15021  227A  0DB3               	rlf	___aldiv@quotient+1,f
 15022  227B  0DB4               	rlf	___aldiv@quotient+2,f
 15023  227C  0DB5               	rlf	___aldiv@quotient+3,f
 15024  227D  0B89               	decfsz	9,f
 15025  227E  2A79               	goto	u11725
 15026  227F  082B               	movf	___aldiv@divisor+3,w
 15027  2280  022F               	subwf	___aldiv@dividend+3,w
 15028  2281  1D03               	skipz
 15029  2282  2A8D               	goto	u11735
 15030  2283  082A               	movf	___aldiv@divisor+2,w
 15031  2284  022E               	subwf	___aldiv@dividend+2,w
 15032  2285  1D03               	skipz
 15033  2286  2A8D               	goto	u11735
 15034  2287  0829               	movf	___aldiv@divisor+1,w
 15035  2288  022D               	subwf	___aldiv@dividend+1,w
 15036  2289  1D03               	skipz
 15037  228A  2A8D               	goto	u11735
 15038  228B  0828               	movf	___aldiv@divisor,w
 15039  228C  022C               	subwf	___aldiv@dividend,w
 15040  228D                     u11735:
 15041  228D  1C03               	skipc
 15042  228E  2A98               	goto	l7942
 15043  228F  0828               	movf	___aldiv@divisor,w
 15044  2290  02AC               	subwf	___aldiv@dividend,f
 15045  2291  0829               	movf	___aldiv@divisor+1,w
 15046  2292  3BAD               	subwfb	___aldiv@dividend+1,f
 15047  2293  082A               	movf	___aldiv@divisor+2,w
 15048  2294  3BAE               	subwfb	___aldiv@dividend+2,f
 15049  2295  082B               	movf	___aldiv@divisor+3,w
 15050  2296  3BAF               	subwfb	___aldiv@dividend+3,f
 15051  2297  1432               	bsf	___aldiv@quotient,0
 15052  2298                     l7942:
 15053  2298  3001               	movlw	1
 15054  2299                     u11745:
 15055  2299  36AB               	lsrf	___aldiv@divisor+3,f
 15056  229A  0CAA               	rrf	___aldiv@divisor+2,f
 15057  229B  0CA9               	rrf	___aldiv@divisor+1,f
 15058  229C  0CA8               	rrf	___aldiv@divisor,f
 15059  229D  0B89               	decfsz	9,f
 15060  229E  2A99               	goto	u11745
 15061  229F  3001               	movlw	1
 15062  22A0  02B0               	subwf	___aldiv@counter,f
 15063  22A1  1D03               	btfss	3,2
 15064  22A2  2A78               	goto	l7934
 15065  22A3                     l7946:
 15066  22A3  0831               	movf	___aldiv@sign,w
 15067  22A4  1903               	btfsc	3,2
 15068  22A5  2AB1               	goto	l7950
 15069  22A6  09B2               	comf	___aldiv@quotient,f
 15070  22A7  09B3               	comf	___aldiv@quotient+1,f
 15071  22A8  09B4               	comf	___aldiv@quotient+2,f
 15072  22A9  09B5               	comf	___aldiv@quotient+3,f
 15073  22AA  0AB2               	incf	___aldiv@quotient,f
 15074  22AB  1903               	skipnz
 15075  22AC  0AB3               	incf	___aldiv@quotient+1,f
 15076  22AD  1903               	skipnz
 15077  22AE  0AB4               	incf	___aldiv@quotient+2,f
 15078  22AF  1903               	skipnz
 15079  22B0  0AB5               	incf	___aldiv@quotient+3,f
 15080  22B1                     l7950:
 15081  22B1  0835               	movf	___aldiv@quotient+3,w
 15082  22B2  00AB               	movwf	?___aldiv+3
 15083  22B3  0834               	movf	___aldiv@quotient+2,w
 15084  22B4  00AA               	movwf	?___aldiv+2
 15085  22B5  0833               	movf	___aldiv@quotient+1,w
 15086  22B6  00A9               	movwf	?___aldiv+1
 15087  22B7  0832               	movf	___aldiv@quotient,w
 15088  22B8  00A8               	movwf	?___aldiv
 15089  22B9  0008               	return
 15090  22BA                     __end_of___aldiv:
 15091                           
 15092                           	psect	text37
 15093  1005                     __ptext37:	
 15094 ;; *************** function _Button *****************
 15095 ;; Defined at:
 15096 ;;		line 90 in file "cross_compiler.c"
 15097 ;; Parameters:    Size  Location     Type
 15098 ;;  port            2    0[BANK0 ] PTR volatile unsigned ch
 15099 ;;		 -> PORTB(1), 
 15100 ;;  pin             1    2[BANK0 ] unsigned char 
 15101 ;;  time            1    3[BANK0 ] unsigned char 
 15102 ;;  active_state    1    4[BANK0 ] unsigned char 
 15103 ;; Auto vars:     Size  Location     Type
 15104 ;;  value           1    8[BANK0 ] unsigned char 
 15105 ;;  loop            1    7[BANK0 ] unsigned char 
 15106 ;; Return value:  Size  Location     Type
 15107 ;;                  1    wreg      unsigned char 
 15108 ;; Registers used:
 15109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15110 ;; Tracked objects:
 15111 ;;		On entry : 1F/0
 15112 ;;		On exit  : 1F/0
 15113 ;;		Unchanged: 0/0
 15114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15115 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15116 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15117 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15118 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15119 ;;Total ram usage:        9 bytes
 15120 ;; Hardware stack levels used: 1
 15121 ;; Hardware stack levels required when called: 3
 15122 ;; This function calls:
 15123 ;;		_Delay_ms
 15124 ;; This function is called by:
 15125 ;;		_get_swr
 15126 ;;		_button_proc_test
 15127 ;; This function uses a non-reentrant model
 15128 ;;
 15129                           
 15130  1005                     _Button:	
 15131                           ;psect for function _Button
 15132                           
 15133                           
 15134                           ;cross_compiler.c: 90: char Button(volatile unsigned char *port, char pin, char time, ch
      +                          ar active_state);cross_compiler.c: 91: {;cross_compiler.c: 92:   char loop = time;
 15135                           
 15136                           ;incstack = 0
 15137                           ; Regs used in _Button: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15138  1005  0823               	movf	Button@time,w
 15139  1006  00A5               	movwf	??_Button
 15140  1007  0825               	movf	??_Button,w
 15141  1008  00A7               	movwf	Button@loop
 15142                           
 15143                           ;cross_compiler.c: 93:   char value;;cross_compiler.c: 94:   while (loop > 0)
 15144  1009  2839               	goto	l8536
 15145  100A                     l8516:
 15146                           
 15147                           ;cross_compiler.c: 99:       value = PORTBbits.RB0;
 15148  100A  3000               	movlw	0
 15149  100B  180D               	btfsc	13,0	;volatile
 15150  100C  3001               	movlw	1
 15151  100D  00A8               	movwf	Button@value
 15152                           
 15153                           ;cross_compiler.c: 100:       break;
 15154  100E  2829               	goto	l8526
 15155  100F                     l8518:
 15156                           
 15157                           ;cross_compiler.c: 102:       value = PORTBbits.RB1;
 15158  100F  3000               	movlw	0
 15159  1010  188D               	btfsc	13,1	;volatile
 15160  1011  3001               	movlw	1
 15161  1012  00A8               	movwf	Button@value
 15162                           
 15163                           ;cross_compiler.c: 103:       break;
 15164  1013  2829               	goto	l8526
 15165  1014                     l8520:
 15166                           
 15167                           ;cross_compiler.c: 105:       value = PORTBbits.RB2;
 15168  1014  3000               	movlw	0
 15169  1015  190D               	btfsc	13,2	;volatile
 15170  1016  3001               	movlw	1
 15171  1017  00A8               	movwf	Button@value
 15172                           
 15173                           ;cross_compiler.c: 106:       break;
 15174  1018  2829               	goto	l8526
 15175  1019                     l8524:
 15176  1019  0822               	movf	Button@pin,w
 15177  101A  00A5               	movwf	??_Button
 15178  101B  01A6               	clrf	??_Button+1
 15179                           
 15180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15181                           ; Switch size 1, requested type "simple"
 15182                           ; Number of cases is 1, Range of values is 0 to 0
 15183                           ; switch strategies available:
 15184                           ; Name         Instructions Cycles
 15185                           ; simple_byte            4     3 (average)
 15186                           ; direct_byte            8     6 (fixed)
 15187                           ; jumptable            260     6 (fixed)
 15188                           ;	Chosen strategy is simple_byte
 15189  101C  0826               	movf	??_Button+1,w
 15190  101D  3A00               	xorlw	0	; case 0
 15191  101E  1903               	skipnz
 15192  101F  2821               	goto	l9646
 15193  1020  2814               	goto	l8520
 15194  1021                     l9646:
 15195                           
 15196                           ; Switch size 1, requested type "simple"
 15197                           ; Number of cases is 2, Range of values is 0 to 1
 15198                           ; switch strategies available:
 15199                           ; Name         Instructions Cycles
 15200                           ; simple_byte            7     4 (average)
 15201                           ; direct_byte           10     6 (fixed)
 15202                           ; jumptable            260     6 (fixed)
 15203                           ;	Chosen strategy is simple_byte
 15204  1021  0825               	movf	??_Button,w
 15205  1022  3A00               	xorlw	0	; case 0
 15206  1023  1903               	skipnz
 15207  1024  280A               	goto	l8516
 15208  1025  3A01               	xorlw	1	; case 1
 15209  1026  1903               	skipnz
 15210  1027  280F               	goto	l8518
 15211  1028  2814               	goto	l8520
 15212  1029                     l8526:
 15213                           
 15214                           ;cross_compiler.c: 108:     if (value != active_state)
 15215  1029  0828               	movf	Button@value,w
 15216  102A  0624               	xorwf	Button@active_state,w
 15217  102B  1903               	skipnz
 15218  102C  282F               	goto	l8532
 15219                           
 15220                           ;cross_compiler.c: 109:     {;cross_compiler.c: 110:       return 0;
 15221  102D  3000               	movlw	0
 15222  102E  0008               	return
 15223  102F                     l8532:
 15224                           
 15225                           ;cross_compiler.c: 112:     Delay_ms(1);
 15226  102F  3001               	movlw	1
 15227  1030  00F3               	movwf	Delay_ms@time_in_ms
 15228  1031  3000               	movlw	0
 15229  1032  00F4               	movwf	Delay_ms@time_in_ms+1
 15230  1033  31AC  24FE  3190   	fcall	_Delay_ms
 15231                           
 15232                           ;cross_compiler.c: 113:     loop--;
 15233  1036  3001               	movlw	1
 15234  1037  0020               	movlb	0	; select bank0
 15235  1038  02A7               	subwf	Button@loop,f
 15236  1039                     l8536:
 15237                           
 15238                           ;cross_compiler.c: 94:   while (loop > 0)
 15239  1039  0827               	movf	Button@loop,w
 15240  103A  1D03               	btfss	3,2
 15241  103B  2819               	goto	l8524
 15242                           
 15243                           ;cross_compiler.c: 115:   return 255;
 15244  103C  30FF               	movlw	255
 15245  103D  0008               	return
 15246  103E                     __end_of_Button:
 15247                           
 15248                           	psect	text38
 15249  2C9D                     __ptext38:	
 15250 ;; *************** function ___bmul *****************
 15251 ;; Defined at:
 15252 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  multiplier      1    wreg     unsigned char 
 15255 ;;  multiplicand    1    3[COMMON] unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  multiplier      1    6[COMMON] unsigned char 
 15258 ;;  product         1    5[COMMON] unsigned char 
 15259 ;; Return value:  Size  Location     Type
 15260 ;;                  1    wreg      unsigned char 
 15261 ;; Registers used:
 15262 ;;		wreg, status,2, status,0
 15263 ;; Tracked objects:
 15264 ;;		On entry : 1D/0
 15265 ;;		On exit  : 1D/0
 15266 ;;		Unchanged: 1D/0
 15267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15268 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;Total ram usage:        4 bytes
 15273 ;; Hardware stack levels used: 1
 15274 ;; Hardware stack levels required when called: 2
 15275 ;; This function calls:
 15276 ;;		Nothing
 15277 ;; This function is called by:
 15278 ;;		_coarse_cap
 15279 ;;		_coarse_tune
 15280 ;;		_sharp_cap
 15281 ;;		_sharp_ind
 15282 ;;		_Bcd2Dec
 15283 ;; This function uses a non-reentrant model
 15284 ;;
 15285                           
 15286  2C9D                     ___bmul:	
 15287                           ;psect for function ___bmul
 15288                           
 15289                           
 15290                           ;incstack = 0
 15291                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15292                           ;___bmul@multiplier stored from wreg
 15293  2C9D  00F6               	movwf	___bmul@multiplier
 15294  2C9E  01F5               	clrf	___bmul@product
 15295  2C9F                     l6332:
 15296  2C9F  1C76               	btfss	___bmul@multiplier,0
 15297  2CA0  2CA5               	goto	l6336
 15298  2CA1  0873               	movf	___bmul@multiplicand,w
 15299  2CA2  00F4               	movwf	??___bmul
 15300  2CA3  0874               	movf	??___bmul,w
 15301  2CA4  07F5               	addwf	___bmul@product,f
 15302  2CA5                     l6336:
 15303  2CA5  1003               	clrc
 15304  2CA6  0DF3               	rlf	___bmul@multiplicand,f
 15305  2CA7  1003               	clrc
 15306  2CA8  0CF6               	rrf	___bmul@multiplier,f
 15307  2CA9  0876               	movf	___bmul@multiplier,w
 15308  2CAA  1D03               	btfss	3,2
 15309  2CAB  2C9F               	goto	l6332
 15310  2CAC  0875               	movf	___bmul@product,w
 15311  2CAD  0008               	return
 15312  2CAE                     __end_of___bmul:
 15313                           
 15314                           	psect	text39
 15315  2528                     __ptext39:	
 15316 ;; *************** function _Test_init *****************
 15317 ;; Defined at:
 15318 ;;		line 887 in file "main.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;		None
 15321 ;; Auto vars:     Size  Location     Type
 15322 ;;		None
 15323 ;; Return value:  Size  Location     Type
 15324 ;;                  1    wreg      void 
 15325 ;; Registers used:
 15326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15327 ;; Tracked objects:
 15328 ;;		On entry : 0/0
 15329 ;;		On exit  : 0/0
 15330 ;;		Unchanged: 0/0
 15331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;Total ram usage:        2 bytes
 15337 ;; Hardware stack levels used: 1
 15338 ;; Hardware stack levels required when called: 6
 15339 ;; This function calls:
 15340 ;;		_Delay_ms
 15341 ;;		_atu_reset
 15342 ;;		_eeprom_write
 15343 ;;		_lcd_prep
 15344 ;;		_set_sw
 15345 ;;		_uart_wr_str
 15346 ;; This function is called by:
 15347 ;;		_main
 15348 ;; This function uses a non-reentrant model
 15349 ;;
 15350                           
 15351  2528                     _Test_init:	
 15352                           ;psect for function _Test_init
 15353                           
 15354                           
 15355                           ;main.c: 888:     if (e_c_ledtype == 4 | e_c_ledtype == 5)
 15356                           
 15357                           ;incstack = 0
 15358                           ; Regs used in _Test_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15359  2528  3004               	movlw	4
 15360  2529  0022               	movlb	2	; select bank2
 15361  252A  062F               	xorwf	_e_c_ledtype^(0+256),w
 15362  252B  1903               	btfsc	3,2
 15363  252C  2D31               	goto	l9230
 15364  252D  3005               	movlw	5
 15365  252E  062F               	xorwf	_e_c_ledtype^(0+256),w
 15366  252F  1D03               	btfss	3,2
 15367  2530  2D33               	goto	l9232
 15368  2531                     l9230:
 15369                           
 15370                           ;main.c: 889:         uart_wr_str(0, 10, "TEST MODE", 9);
 15371  2531  300A               	movlw	10
 15372  2532  2D37               	goto	L37
 15373  2533                     l9232:
 15374  2533  082F               	movf	_e_c_ledtype^(0+256),w
 15375  2534  1903               	btfsc	3,2
 15376  2535  2D47               	goto	l737
 15377                           
 15378                           ;main.c: 891:         uart_wr_str(0, 3, "TEST MODE", 9);
 15379  2536  3003               	movlw	3
 15380  2537                     L37:
 15381  2537  0020               	movlb	0	; select bank0
 15382  2538  00B3               	movwf	??_Test_init
 15383  2539  0833               	movf	??_Test_init,w
 15384  253A  00F3               	movwf	uart_wr_str@col
 15385  253B  3016               	movlw	low (STR_84| (0+32768))
 15386  253C  00F4               	movwf	uart_wr_str@str
 15387  253D  30B0               	movlw	high (STR_84| (0+32768))
 15388  253E  00F5               	movwf	uart_wr_str@str+1
 15389  253F  3009               	movlw	9
 15390  2540  00B4               	movwf	??_Test_init+1
 15391  2541  0834               	movf	??_Test_init+1,w
 15392  2542  00F6               	movwf	uart_wr_str@len
 15393  2543  3000               	movlw	0
 15394  2544  31AF  2710  31A5   	fcall	_uart_wr_str
 15395  2547                     l737:
 15396  2547  0064               	clrwdt	;# 
 15397                           
 15398                           ;main.c: 893:     Delay_ms(500);
 15399  2548  30F4               	movlw	244
 15400  2549  00F3               	movwf	Delay_ms@time_in_ms
 15401  254A  3001               	movlw	1
 15402  254B  00F4               	movwf	Delay_ms@time_in_ms+1
 15403  254C  31AC  24FE  31A5   	fcall	_Delay_ms
 15404  254F  0064               	clrwdt	;# 
 15405                           
 15406                           ;main.c: 895:     Delay_ms(500);
 15407  2550  30F4               	movlw	244
 15408  2551  00F3               	movwf	Delay_ms@time_in_ms
 15409  2552  3001               	movlw	1
 15410  2553  00F4               	movwf	Delay_ms@time_in_ms+1
 15411  2554  31AC  24FE  31A5   	fcall	_Delay_ms
 15412  2557  0064               	clrwdt	;# 
 15413                           
 15414                           ;main.c: 897:     Delay_ms(500);
 15415  2558  30F4               	movlw	244
 15416  2559  00F3               	movwf	Delay_ms@time_in_ms
 15417  255A  3001               	movlw	1
 15418  255B  00F4               	movwf	Delay_ms@time_in_ms+1
 15419  255C  31AC  24FE  31A5   	fcall	_Delay_ms
 15420  255F  0064               	clrwdt	;# 
 15421                           
 15422                           ;main.c: 899:     Delay_ms(500);
 15423  2560  30F4               	movlw	244
 15424  2561  00F3               	movwf	Delay_ms@time_in_ms
 15425  2562  3001               	movlw	1
 15426  2563  00F4               	movwf	Delay_ms@time_in_ms+1
 15427  2564  31AC  24FE  31A5   	fcall	_Delay_ms
 15428  2567  0064               	clrwdt	;# 
 15429                           
 15430                           ;main.c: 901:     if (e_c_ledtype == 4 | e_c_ledtype == 5)
 15431  2568  3004               	movlw	4
 15432  2569  0022               	movlb	2	; select bank2
 15433  256A  062F               	xorwf	_e_c_ledtype^(0+256),w
 15434  256B  1903               	btfsc	3,2
 15435  256C  2D71               	goto	l9248
 15436  256D  3005               	movlw	5
 15437  256E  062F               	xorwf	_e_c_ledtype^(0+256),w
 15438  256F  1D03               	btfss	3,2
 15439  2570  2D73               	goto	l9250
 15440  2571                     l9248:
 15441                           
 15442                           ;main.c: 902:         uart_wr_str(0, 10, "         ", 9);
 15443  2571  300A               	movlw	10
 15444  2572  2D77               	goto	L38
 15445  2573                     l9250:
 15446  2573  082F               	movf	_e_c_ledtype^(0+256),w
 15447  2574  1903               	btfsc	3,2
 15448  2575  2D87               	goto	l9254
 15449                           
 15450                           ;main.c: 904:         uart_wr_str(0, 3, "         ", 9);
 15451  2576  3003               	movlw	3
 15452  2577                     L38:
 15453  2577  0020               	movlb	0	; select bank0
 15454  2578  00B3               	movwf	??_Test_init
 15455  2579  0833               	movf	??_Test_init,w
 15456  257A  00F3               	movwf	uart_wr_str@col
 15457  257B  3001               	movlw	low ((STR_28+1)| (0+32768))
 15458  257C  00F4               	movwf	uart_wr_str@str
 15459  257D  30B0               	movlw	high ((STR_28+1)| (0+32768))
 15460  257E  00F5               	movwf	uart_wr_str@str+1
 15461  257F  3009               	movlw	9
 15462  2580  00B4               	movwf	??_Test_init+1
 15463  2581  0834               	movf	??_Test_init+1,w
 15464  2582  00F6               	movwf	uart_wr_str@len
 15465  2583  3000               	movlw	0
 15466  2584  31AF  2710  31A5   	fcall	_uart_wr_str
 15467  2587                     l9254:
 15468                           
 15469                           ;main.c: 905:     atu_reset();
 15470  2587  31AC  24E8  31A5   	fcall	_atu_reset
 15471                           
 15472                           ;main.c: 906:     g_c_SW = 1;
 15473  258A  0022               	movlb	2	; select bank2
 15474  258B  01BB               	clrf	_g_c_SW^(0+256)
 15475  258C  0ABB               	incf	_g_c_SW^(0+256),f
 15476                           
 15477                           ;main.c: 907:     set_sw(g_c_SW);
 15478  258D  083B               	movf	_g_c_SW^(0+256),w
 15479  258E  31AC  24AE  31A5   	fcall	_set_sw
 15480                           
 15481                           ;main.c: 908:     eeprom_write(255, g_c_cap);
 15482  2591  087A               	movf	_g_c_cap,w
 15483  2592  0020               	movlb	0	; select bank0
 15484  2593  00B3               	movwf	??_Test_init
 15485  2594  0833               	movf	??_Test_init,w
 15486  2595  00A4               	movwf	eeprom_write@value
 15487  2596  30FF               	movlw	255
 15488  2597  3198  2004  31A5   	fcall	_eeprom_write
 15489                           
 15490                           ;main.c: 909:     eeprom_write(254, g_c_ind);
 15491  259A  0022               	movlb	2	; select bank2
 15492  259B  083C               	movf	_g_c_ind^(0+256),w
 15493  259C  0020               	movlb	0	; select bank0
 15494  259D  00B3               	movwf	??_Test_init
 15495  259E  0833               	movf	??_Test_init,w
 15496  259F  00A4               	movwf	eeprom_write@value
 15497  25A0  30FE               	movlw	254
 15498  25A1  3198  2004  31A5   	fcall	_eeprom_write
 15499                           
 15500                           ;main.c: 910:     eeprom_write(253, g_c_SW);
 15501  25A4  0022               	movlb	2	; select bank2
 15502  25A5  083B               	movf	_g_c_SW^(0+256),w
 15503  25A6  0020               	movlb	0	; select bank0
 15504  25A7  00B3               	movwf	??_Test_init
 15505  25A8  0833               	movf	??_Test_init,w
 15506  25A9  00A4               	movwf	eeprom_write@value
 15507  25AA  30FD               	movlw	253
 15508  25AB  3198  2004  31A5   	fcall	_eeprom_write
 15509                           
 15510                           ;main.c: 912:     if (e_c_ledtype == 4 | e_c_ledtype == 5)
 15511  25AE  3004               	movlw	4
 15512  25AF  0022               	movlb	2	; select bank2
 15513  25B0  062F               	xorwf	_e_c_ledtype^(0+256),w
 15514  25B1  1903               	btfsc	3,2
 15515  25B2  2DB7               	goto	l9270
 15516  25B3  3005               	movlw	5
 15517  25B4  062F               	xorwf	_e_c_ledtype^(0+256),w
 15518  25B5  1D03               	btfss	3,2
 15519  25B6  2DB9               	goto	l9272
 15520  25B7                     l9270:
 15521                           
 15522                           ;main.c: 913:         uart_wr_str(0, 16 + 12 * 8, "l", 1);
 15523  25B7  3070               	movlw	112
 15524  25B8  2DBD               	goto	L39
 15525  25B9                     l9272:
 15526  25B9  082F               	movf	_e_c_ledtype^(0+256),w
 15527  25BA  1903               	btfsc	3,2
 15528  25BB  2DCB               	goto	l9276
 15529                           
 15530                           ;main.c: 915:         uart_wr_str(0, 8, "l", 1);
 15531  25BC  3008               	movlw	8
 15532  25BD                     L39:
 15533  25BD  0020               	movlb	0	; select bank0
 15534  25BE  00B3               	movwf	??_Test_init
 15535  25BF  0833               	movf	??_Test_init,w
 15536  25C0  00F3               	movwf	uart_wr_str@col
 15537  25C1  30C4               	movlw	low (STR_1| (0+32768))
 15538  25C2  00F4               	movwf	uart_wr_str@str
 15539  25C3  30B0               	movlw	high (STR_1| (0+32768))
 15540  25C4  00F5               	movwf	uart_wr_str@str+1
 15541  25C5  01F6               	clrf	uart_wr_str@len
 15542  25C6  0AF6               	incf	uart_wr_str@len,f
 15543  25C7  3000               	movlw	0
 15544  25C8  31AF  2710  31A5   	fcall	_uart_wr_str
 15545  25CB                     l9276:
 15546                           
 15547                           ;main.c: 917:     g_b_lcd_prep_short = 1;
 15548  25CB  0022               	movlb	2	; select bank2
 15549  25CC  01AC               	clrf	_g_b_lcd_prep_short^(0+256)
 15550  25CD  0AAC               	incf	_g_b_lcd_prep_short^(0+256),f
 15551                           
 15552                           ;main.c: 918:     lcd_prep();
 15553  25CE  3186  2647         	fcall	_lcd_prep
 15554  25D0  0008               	return
 15555  25D1                     __end_of_Test_init:
 15556                           
 15557                           	psect	text40
 15558  2CAE                     __ptext40:	
 15559 ;; *************** function _set_sw *****************
 15560 ;; Defined at:
 15561 ;;		line 285 in file "./main.h"
 15562 ;; Parameters:    Size  Location     Type
 15563 ;;  g_c_SW          1    wreg     unsigned char 
 15564 ;; Auto vars:     Size  Location     Type
 15565 ;;  g_c_SW          1    2[BANK0 ] unsigned char 
 15566 ;; Return value:  Size  Location     Type
 15567 ;;                  1    wreg      void 
 15568 ;; Registers used:
 15569 ;;		wreg, status,2, status,0, pclath, cstack
 15570 ;; Tracked objects:
 15571 ;;		On entry : 1F/2
 15572 ;;		On exit  : 0/0
 15573 ;;		Unchanged: 0/0
 15574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15578 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;Total ram usage:        1 bytes
 15580 ;; Hardware stack levels used: 1
 15581 ;; Hardware stack levels required when called: 4
 15582 ;; This function calls:
 15583 ;;		_Vdelay_ms
 15584 ;; This function is called by:
 15585 ;;		_sub_tune
 15586 ;;		_main
 15587 ;;		_button_proc_test
 15588 ;;		_button_proc
 15589 ;;		_show_reset
 15590 ;;		_Test_init
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594  2CAE                     _set_sw:	
 15595                           ;psect for function _set_sw
 15596                           
 15597                           
 15598                           ;incstack = 0
 15599                           ; Regs used in _set_sw: [wreg+status,2+status,0+pclath+cstack]
 15600                           ;set_sw@g_c_SW stored from wreg
 15601  2CAE  0020               	movlb	0	; select bank0
 15602  2CAF  00A2               	movwf	set_sw@g_c_SW
 15603                           
 15604                           ;./main.h: 286:     LATCbits.LATC0 = g_c_SW;
 15605  2CB0  0C22               	rrf	set_sw@g_c_SW,w
 15606  2CB1  0022               	movlb	2	; select bank2
 15607  2CB2  1C03               	skipc
 15608  2CB3  100E               	bcf	14,0	;volatile
 15609  2CB4  1803               	skipnc
 15610  2CB5  140E               	bsf	14,0	;volatile
 15611                           
 15612                           ;./main.h: 287:     Vdelay_ms(e_i_ms_Rel_Del);
 15613  2CB6  0823               	movf	(_e_i_ms_Rel_Del+1)^(0+256),w
 15614  2CB7  0020               	movlb	0	; select bank0
 15615  2CB8  00A1               	movwf	Vdelay_ms@time_in_ms+1
 15616  2CB9  0022               	movlb	2	; select bank2
 15617  2CBA  0822               	movf	_e_i_ms_Rel_Del^(0+256),w
 15618  2CBB  0020               	movlb	0	; select bank0
 15619  2CBC  00A0               	movwf	Vdelay_ms@time_in_ms
 15620  2CBD  31AC  2485         	fcall	_Vdelay_ms
 15621  2CBF  0008               	return
 15622  2CC0                     __end_of_set_sw:
 15623                           
 15624                           	psect	text41
 15625  0647                     __ptext41:	
 15626 ;; *************** function _lcd_prep *****************
 15627 ;; Defined at:
 15628 ;;		line 417 in file "main.c"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;		None
 15631 ;; Auto vars:     Size  Location     Type
 15632 ;;		None
 15633 ;; Return value:  Size  Location     Type
 15634 ;;                  1    wreg      void 
 15635 ;; Registers used:
 15636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15637 ;; Tracked objects:
 15638 ;;		On entry : 1E/3
 15639 ;;		On exit  : 0/0
 15640 ;;		Unchanged: 0/0
 15641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15646 ;;Total ram usage:        2 bytes
 15647 ;; Hardware stack levels used: 1
 15648 ;; Hardware stack levels required when called: 5
 15649 ;; This function calls:
 15650 ;;		_Delay_ms
 15651 ;;		_lcd_ind
 15652 ;;		_uart_wr_str
 15653 ;; This function is called by:
 15654 ;;		_main
 15655 ;;		_Test_init
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659  0647                     _lcd_prep:	
 15660                           ;psect for function _lcd_prep
 15661                           
 15662                           
 15663                           ;incstack = 0
 15664                           ; Regs used in _lcd_prep: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15665  0647  0064               	clrwdt	;# 
 15666                           
 15667                           ;main.c: 419:     if (e_c_ledtype == 4 | e_c_ledtype == 5) {
 15668  0648  3004               	movlw	4
 15669  0649  0022               	movlb	2	; select bank2
 15670  064A  062F               	xorwf	_e_c_ledtype^(0+256),w
 15671  064B  1903               	btfsc	3,2
 15672  064C  2E51               	goto	l9110
 15673  064D  3005               	movlw	5
 15674  064E  062F               	xorwf	_e_c_ledtype^(0+256),w
 15675  064F  1D03               	btfss	3,2
 15676  0650  2F29               	goto	l9130
 15677  0651                     l9110:
 15678                           
 15679                           ;main.c: 420:         if (g_b_lcd_prep_short == 0) {
 15680  0651  082C               	movf	_g_b_lcd_prep_short^(0+256),w
 15681  0652  1D03               	btfss	3,2
 15682  0653  2EED               	goto	l9118
 15683                           
 15684                           ;main.c: 421:             uart_wr_str(0, 22, "ATU-100", 7);
 15685  0654  3016               	movlw	22
 15686  0655  0020               	movlb	0	; select bank0
 15687  0656  00B1               	movwf	??_lcd_prep
 15688  0657  0831               	movf	??_lcd_prep,w
 15689  0658  00F3               	movwf	uart_wr_str@col
 15690  0659  3095               	movlw	low (STR_23| (0+32768))
 15691  065A  00F4               	movwf	uart_wr_str@str
 15692  065B  30B0               	movlw	high (STR_23| (0+32768))
 15693  065C  00F5               	movwf	uart_wr_str@str+1
 15694  065D  3007               	movlw	7
 15695  065E  00B2               	movwf	??_lcd_prep+1
 15696  065F  0832               	movf	??_lcd_prep+1,w
 15697  0660  00F6               	movwf	uart_wr_str@len
 15698  0661  3000               	movlw	0
 15699  0662  31AF  2710  3186   	fcall	_uart_wr_str
 15700                           
 15701                           ;main.c: 422:             uart_wr_str(2, 6, "EXT board", 9);
 15702  0665  3006               	movlw	6
 15703  0666  0020               	movlb	0	; select bank0
 15704  0667  00B1               	movwf	??_lcd_prep
 15705  0668  0831               	movf	??_lcd_prep,w
 15706  0669  00F3               	movwf	uart_wr_str@col
 15707  066A  3020               	movlw	low (STR_24| (0+32768))
 15708  066B  00F4               	movwf	uart_wr_str@str
 15709  066C  30B0               	movlw	high (STR_24| (0+32768))
 15710  066D  00F5               	movwf	uart_wr_str@str+1
 15711  066E  3009               	movlw	9
 15712  066F  00B2               	movwf	??_lcd_prep+1
 15713  0670  0832               	movf	??_lcd_prep+1,w
 15714  0671  00F6               	movwf	uart_wr_str@len
 15715  0672  3002               	movlw	2
 15716  0673  31AF  2710  3186   	fcall	_uart_wr_str
 15717                           
 15718                           ;main.c: 423:             uart_wr_str(4, 16, "by N7DDC", 8);
 15719  0676  3010               	movlw	16
 15720  0677  0020               	movlb	0	; select bank0
 15721  0678  00B1               	movwf	??_lcd_prep
 15722  0679  0831               	movf	??_lcd_prep,w
 15723  067A  00F3               	movwf	uart_wr_str@col
 15724  067B  3057               	movlw	low (STR_25| (0+32768))
 15725  067C  00F4               	movwf	uart_wr_str@str
 15726  067D  30B0               	movlw	high (STR_25| (0+32768))
 15727  067E  00F5               	movwf	uart_wr_str@str+1
 15728  067F  3008               	movlw	8
 15729  0680  00B2               	movwf	??_lcd_prep+1
 15730  0681  0832               	movf	??_lcd_prep+1,w
 15731  0682  00F6               	movwf	uart_wr_str@len
 15732  0683  3004               	movlw	4
 15733  0684  31AF  2710  3186   	fcall	_uart_wr_str
 15734                           
 15735                           ;main.c: 424:             uart_wr_str(6, 4, "FW ver 3.2", 10);
 15736  0687  3004               	movlw	4
 15737  0688  0020               	movlb	0	; select bank0
 15738  0689  00B1               	movwf	??_lcd_prep
 15739  068A  0831               	movf	??_lcd_prep,w
 15740  068B  00F3               	movwf	uart_wr_str@col
 15741  068C  300B               	movlw	low (STR_26| (0+32768))
 15742  068D  00F4               	movwf	uart_wr_str@str
 15743  068E  30B0               	movlw	high (STR_26| (0+32768))
 15744  068F  00F5               	movwf	uart_wr_str@str+1
 15745  0690  300A               	movlw	10
 15746  0691  00B2               	movwf	??_lcd_prep+1
 15747  0692  0832               	movf	??_lcd_prep+1,w
 15748  0693  00F6               	movwf	uart_wr_str@len
 15749  0694  3006               	movlw	6
 15750  0695  31AF  2710  3186   	fcall	_uart_wr_str
 15751  0698  0064               	clrwdt	;# 
 15752                           
 15753                           ;main.c: 426:             Delay_ms(600);
 15754  0699  3058               	movlw	88
 15755  069A  00F3               	movwf	Delay_ms@time_in_ms
 15756  069B  3002               	movlw	2
 15757  069C  00F4               	movwf	Delay_ms@time_in_ms+1
 15758  069D  31AC  24FE  3186   	fcall	_Delay_ms
 15759  06A0  0064               	clrwdt	;# 
 15760                           
 15761                           ;main.c: 428:             Delay_ms(500);
 15762  06A1  30F4               	movlw	244
 15763  06A2  00F3               	movwf	Delay_ms@time_in_ms
 15764  06A3  3001               	movlw	1
 15765  06A4  00F4               	movwf	Delay_ms@time_in_ms+1
 15766  06A5  31AC  24FE  3186   	fcall	_Delay_ms
 15767  06A8  0064               	clrwdt	;# 
 15768                           
 15769                           ;main.c: 430:             uart_wr_str(0, 16, "        ", 8);
 15770  06A9  3010               	movlw	16
 15771  06AA  0020               	movlb	0	; select bank0
 15772  06AB  00B1               	movwf	??_lcd_prep
 15773  06AC  0831               	movf	??_lcd_prep,w
 15774  06AD  00F3               	movwf	uart_wr_str@col
 15775  06AE  3002               	movlw	low ((STR_28+2)| (0+32768))
 15776  06AF  00F4               	movwf	uart_wr_str@str
 15777  06B0  30B0               	movlw	high ((STR_28+2)| (0+32768))
 15778  06B1  00F5               	movwf	uart_wr_str@str+1
 15779  06B2  3008               	movlw	8
 15780  06B3  00B2               	movwf	??_lcd_prep+1
 15781  06B4  0832               	movf	??_lcd_prep+1,w
 15782  06B5  00F6               	movwf	uart_wr_str@len
 15783  06B6  3000               	movlw	0
 15784  06B7  31AF  2710  3186   	fcall	_uart_wr_str
 15785                           
 15786                           ;main.c: 431:             uart_wr_str(2, 4, "          ", 10);
 15787  06BA  3004               	movlw	4
 15788  06BB  0020               	movlb	0	; select bank0
 15789  06BC  00B1               	movwf	??_lcd_prep
 15790  06BD  0831               	movf	??_lcd_prep,w
 15791  06BE  00F3               	movwf	uart_wr_str@col
 15792  06BF  3000               	movlw	low (STR_28| (0+32768))
 15793  06C0  00F4               	movwf	uart_wr_str@str
 15794  06C1  30B0               	movlw	high (STR_28| (0+32768))
 15795  06C2  00F5               	movwf	uart_wr_str@str+1
 15796  06C3  300A               	movlw	10
 15797  06C4  00B2               	movwf	??_lcd_prep+1
 15798  06C5  0832               	movf	??_lcd_prep+1,w
 15799  06C6  00F6               	movwf	uart_wr_str@len
 15800  06C7  3002               	movlw	2
 15801  06C8  31AF  2710  3186   	fcall	_uart_wr_str
 15802                           
 15803                           ;main.c: 432:             uart_wr_str(4, 16, "        ", 8);
 15804  06CB  3010               	movlw	16
 15805  06CC  0020               	movlb	0	; select bank0
 15806  06CD  00B1               	movwf	??_lcd_prep
 15807  06CE  0831               	movf	??_lcd_prep,w
 15808  06CF  00F3               	movwf	uart_wr_str@col
 15809  06D0  3002               	movlw	low ((STR_28+2)| (0+32768))
 15810  06D1  00F4               	movwf	uart_wr_str@str
 15811  06D2  30B0               	movlw	high ((STR_28+2)| (0+32768))
 15812  06D3  00F5               	movwf	uart_wr_str@str+1
 15813  06D4  3008               	movlw	8
 15814  06D5  00B2               	movwf	??_lcd_prep+1
 15815  06D6  0832               	movf	??_lcd_prep+1,w
 15816  06D7  00F6               	movwf	uart_wr_str@len
 15817  06D8  3004               	movlw	4
 15818  06D9  31AF  2710  3186   	fcall	_uart_wr_str
 15819                           
 15820                           ;main.c: 433:             uart_wr_str(6, 4, "          ", 10);
 15821  06DC  3004               	movlw	4
 15822  06DD  0020               	movlb	0	; select bank0
 15823  06DE  00B1               	movwf	??_lcd_prep
 15824  06DF  0831               	movf	??_lcd_prep,w
 15825  06E0  00F3               	movwf	uart_wr_str@col
 15826  06E1  3000               	movlw	low (STR_28| (0+32768))
 15827  06E2  00F4               	movwf	uart_wr_str@str
 15828  06E3  30B0               	movlw	high (STR_28| (0+32768))
 15829  06E4  00F5               	movwf	uart_wr_str@str+1
 15830  06E5  300A               	movlw	10
 15831  06E6  00B2               	movwf	??_lcd_prep+1
 15832  06E7  0832               	movf	??_lcd_prep+1,w
 15833  06E8  00F6               	movwf	uart_wr_str@len
 15834  06E9  3006               	movlw	6
 15835  06EA  31AF  2710  3186   	fcall	_uart_wr_str
 15836  06ED                     l9118:
 15837                           
 15838                           ;main.c: 435:         Delay_ms(150);
 15839  06ED  3096               	movlw	150
 15840  06EE  00F3               	movwf	Delay_ms@time_in_ms
 15841  06EF  3000               	movlw	0
 15842  06F0  00F4               	movwf	Delay_ms@time_in_ms+1
 15843  06F1  31AC  24FE  3186   	fcall	_Delay_ms
 15844                           
 15845                           ;main.c: 436:         if (e_c_b_P_High == 1)
 15846  06F4  0022               	movlb	2	; select bank2
 15847  06F5  0331               	decf	_e_c_b_P_High^(0+256),w
 15848  06F6  1D03               	btfss	3,2
 15849  06F7  2F01               	goto	l9124
 15850                           
 15851                           ;main.c: 437:             uart_wr_str(0, 16, "PWR=  0W", 8);
 15852  06F8  3010               	movlw	16
 15853  06F9  0020               	movlb	0	; select bank0
 15854  06FA  00B1               	movwf	??_lcd_prep
 15855  06FB  0831               	movf	??_lcd_prep,w
 15856  06FC  00F3               	movwf	uart_wr_str@col
 15857  06FD  3069               	movlw	low (STR_31| (0+32768))
 15858  06FE  00F4               	movwf	uart_wr_str@str
 15859  06FF  30B0               	movlw	high (STR_31| (0+32768))
 15860  0700  2F09               	goto	L40
 15861  0701                     l9124:
 15862                           
 15863                           ;main.c: 439:             uart_wr_str(0, 16, "PWR=0.0W", 8);
 15864  0701  3010               	movlw	16
 15865  0702  0020               	movlb	0	; select bank0
 15866  0703  00B1               	movwf	??_lcd_prep
 15867  0704  0831               	movf	??_lcd_prep,w
 15868  0705  00F3               	movwf	uart_wr_str@col
 15869  0706  307B               	movlw	low (STR_32| (0+32768))
 15870  0707  00F4               	movwf	uart_wr_str@str
 15871  0708  30B0               	movlw	high (STR_32| (0+32768))
 15872  0709                     L40:
 15873  0709  00F5               	movwf	uart_wr_str@str+1
 15874  070A  3008               	movlw	8
 15875  070B  00B2               	movwf	??_lcd_prep+1
 15876  070C  0832               	movf	??_lcd_prep+1,w
 15877  070D  00F6               	movwf	uart_wr_str@len
 15878  070E  3000               	movlw	0
 15879  070F  31AF  2710  3186   	fcall	_uart_wr_str
 15880                           
 15881                           ;main.c: 440:         uart_wr_str(2, 16, "SWR=0.00", 8);
 15882  0712  3010               	movlw	16
 15883  0713  0020               	movlb	0	; select bank0
 15884  0714  00B1               	movwf	??_lcd_prep
 15885  0715  0831               	movf	??_lcd_prep,w
 15886  0716  00F3               	movwf	uart_wr_str@col
 15887  0717  304E               	movlw	low (STR_18| (0+32768))
 15888  0718  00F4               	movwf	uart_wr_str@str
 15889  0719  30B0               	movlw	high (STR_18| (0+32768))
 15890  071A  00F5               	movwf	uart_wr_str@str+1
 15891  071B  3008               	movlw	8
 15892  071C  00B2               	movwf	??_lcd_prep+1
 15893  071D  0832               	movf	??_lcd_prep+1,w
 15894  071E  00F6               	movwf	uart_wr_str@len
 15895  071F  3002               	movlw	2
 15896  0720  31AF  2710  3186   	fcall	_uart_wr_str
 15897                           
 15898                           ;main.c: 441:         if (g_b_Auto_mode)
 15899  0723  0022               	movlb	2	; select bank2
 15900  0724  082E               	movf	_g_b_Auto_mode^(0+256),w
 15901  0725  1903               	btfsc	3,2
 15902  0726  2FF6               	goto	l557
 15903                           
 15904                           ;main.c: 442:             uart_wr_str(0, 16 + 8 * 12, ".", 1);
 15905  0727  3070               	movlw	112
 15906  0728  2FE8               	goto	L41
 15907  0729                     l9130:
 15908  0729  082F               	movf	_e_c_ledtype^(0+256),w
 15909  072A  1903               	btfsc	3,2
 15910  072B  2FF6               	goto	l557
 15911                           
 15912                           ;main.c: 444:         if (g_b_lcd_prep_short == 0) {
 15913  072C  082C               	movf	_g_b_lcd_prep_short^(0+256),w
 15914  072D  1D03               	btfss	3,2
 15915  072E  2FB7               	goto	l9144
 15916                           
 15917                           ;main.c: 445:             uart_wr_str(0, 4, "ATU-100", 7);
 15918  072F  3004               	movlw	4
 15919  0730  0020               	movlb	0	; select bank0
 15920  0731  00B1               	movwf	??_lcd_prep
 15921  0732  0831               	movf	??_lcd_prep,w
 15922  0733  00F3               	movwf	uart_wr_str@col
 15923  0734  3095               	movlw	low (STR_23| (0+32768))
 15924  0735  00F4               	movwf	uart_wr_str@str
 15925  0736  30B0               	movlw	high (STR_23| (0+32768))
 15926  0737  00F5               	movwf	uart_wr_str@str+1
 15927  0738  3007               	movlw	7
 15928  0739  00B2               	movwf	??_lcd_prep+1
 15929  073A  0832               	movf	??_lcd_prep+1,w
 15930  073B  00F6               	movwf	uart_wr_str@len
 15931  073C  3000               	movlw	0
 15932  073D  31AF  2710  3186   	fcall	_uart_wr_str
 15933                           
 15934                           ;main.c: 446:             uart_wr_str(1, 3, "EXT board", 9);
 15935  0740  3003               	movlw	3
 15936  0741  0020               	movlb	0	; select bank0
 15937  0742  00B1               	movwf	??_lcd_prep
 15938  0743  0831               	movf	??_lcd_prep,w
 15939  0744  00F3               	movwf	uart_wr_str@col
 15940  0745  3020               	movlw	low (STR_24| (0+32768))
 15941  0746  00F4               	movwf	uart_wr_str@str
 15942  0747  30B0               	movlw	high (STR_24| (0+32768))
 15943  0748  00F5               	movwf	uart_wr_str@str+1
 15944  0749  3009               	movlw	9
 15945  074A  00B2               	movwf	??_lcd_prep+1
 15946  074B  0832               	movf	??_lcd_prep+1,w
 15947  074C  00F6               	movwf	uart_wr_str@len
 15948  074D  3001               	movlw	1
 15949  074E  31AF  2710  3186   	fcall	_uart_wr_str
 15950  0751  0064               	clrwdt	;# 
 15951                           
 15952                           ;main.c: 448:             Delay_ms(700);
 15953  0752  30BC               	movlw	188
 15954  0753  00F3               	movwf	Delay_ms@time_in_ms
 15955  0754  3002               	movlw	2
 15956  0755  00F4               	movwf	Delay_ms@time_in_ms+1
 15957  0756  31AC  24FE  3186   	fcall	_Delay_ms
 15958  0759  0064               	clrwdt	;# 
 15959                           
 15960                           ;main.c: 450:             Delay_ms(500);
 15961  075A  30F4               	movlw	244
 15962  075B  00F3               	movwf	Delay_ms@time_in_ms
 15963  075C  3001               	movlw	1
 15964  075D  00F4               	movwf	Delay_ms@time_in_ms+1
 15965  075E  31AC  24FE  3186   	fcall	_Delay_ms
 15966  0761  0064               	clrwdt	;# 
 15967                           
 15968                           ;main.c: 452:             uart_wr_str(0, 4, "by N7DDC", 8);
 15969  0762  3004               	movlw	4
 15970  0763  0020               	movlb	0	; select bank0
 15971  0764  00B1               	movwf	??_lcd_prep
 15972  0765  0831               	movf	??_lcd_prep,w
 15973  0766  00F3               	movwf	uart_wr_str@col
 15974  0767  3057               	movlw	low (STR_25| (0+32768))
 15975  0768  00F4               	movwf	uart_wr_str@str
 15976  0769  30B0               	movlw	high (STR_25| (0+32768))
 15977  076A  00F5               	movwf	uart_wr_str@str+1
 15978  076B  3008               	movlw	8
 15979  076C  00B2               	movwf	??_lcd_prep+1
 15980  076D  0832               	movf	??_lcd_prep+1,w
 15981  076E  00F6               	movwf	uart_wr_str@len
 15982  076F  3000               	movlw	0
 15983  0770  31AF  2710  3186   	fcall	_uart_wr_str
 15984                           
 15985                           ;main.c: 453:             uart_wr_str(1, 3, "FW ver 3.2", 10);
 15986  0773  3003               	movlw	3
 15987  0774  0020               	movlb	0	; select bank0
 15988  0775  00B1               	movwf	??_lcd_prep
 15989  0776  0831               	movf	??_lcd_prep,w
 15990  0777  00F3               	movwf	uart_wr_str@col
 15991  0778  300B               	movlw	low (STR_26| (0+32768))
 15992  0779  00F4               	movwf	uart_wr_str@str
 15993  077A  30B0               	movlw	high (STR_26| (0+32768))
 15994  077B  00F5               	movwf	uart_wr_str@str+1
 15995  077C  300A               	movlw	10
 15996  077D  00B2               	movwf	??_lcd_prep+1
 15997  077E  0832               	movf	??_lcd_prep+1,w
 15998  077F  00F6               	movwf	uart_wr_str@len
 15999  0780  3001               	movlw	1
 16000  0781  31AF  2710  3186   	fcall	_uart_wr_str
 16001  0784  0064               	clrwdt	;# 
 16002                           
 16003                           ;main.c: 455:             Delay_ms(600);
 16004  0785  3058               	movlw	88
 16005  0786  00F3               	movwf	Delay_ms@time_in_ms
 16006  0787  3002               	movlw	2
 16007  0788  00F4               	movwf	Delay_ms@time_in_ms+1
 16008  0789  31AC  24FE  3186   	fcall	_Delay_ms
 16009  078C  0064               	clrwdt	;# 
 16010                           
 16011                           ;main.c: 457:             Delay_ms(500);
 16012  078D  30F4               	movlw	244
 16013  078E  00F3               	movwf	Delay_ms@time_in_ms
 16014  078F  3001               	movlw	1
 16015  0790  00F4               	movwf	Delay_ms@time_in_ms+1
 16016  0791  31AC  24FE  3186   	fcall	_Delay_ms
 16017  0794  0064               	clrwdt	;# 
 16018                           
 16019                           ;main.c: 459:             uart_wr_str(0, 4, "        ", 8);
 16020  0795  3004               	movlw	4
 16021  0796  0020               	movlb	0	; select bank0
 16022  0797  00B1               	movwf	??_lcd_prep
 16023  0798  0831               	movf	??_lcd_prep,w
 16024  0799  00F3               	movwf	uart_wr_str@col
 16025  079A  3002               	movlw	low ((STR_28+2)| (0+32768))
 16026  079B  00F4               	movwf	uart_wr_str@str
 16027  079C  30B0               	movlw	high ((STR_28+2)| (0+32768))
 16028  079D  00F5               	movwf	uart_wr_str@str+1
 16029  079E  3008               	movlw	8
 16030  079F  00B2               	movwf	??_lcd_prep+1
 16031  07A0  0832               	movf	??_lcd_prep+1,w
 16032  07A1  00F6               	movwf	uart_wr_str@len
 16033  07A2  3000               	movlw	0
 16034  07A3  31AF  2710  3186   	fcall	_uart_wr_str
 16035                           
 16036                           ;main.c: 460:             uart_wr_str(1, 3, "          ", 10);
 16037  07A6  3003               	movlw	3
 16038  07A7  0020               	movlb	0	; select bank0
 16039  07A8  00B1               	movwf	??_lcd_prep
 16040  07A9  0831               	movf	??_lcd_prep,w
 16041  07AA  00F3               	movwf	uart_wr_str@col
 16042  07AB  3000               	movlw	low (STR_28| (0+32768))
 16043  07AC  00F4               	movwf	uart_wr_str@str
 16044  07AD  30B0               	movlw	high (STR_28| (0+32768))
 16045  07AE  00F5               	movwf	uart_wr_str@str+1
 16046  07AF  300A               	movlw	10
 16047  07B0  00B2               	movwf	??_lcd_prep+1
 16048  07B1  0832               	movf	??_lcd_prep+1,w
 16049  07B2  00F6               	movwf	uart_wr_str@len
 16050  07B3  3001               	movlw	1
 16051  07B4  31AF  2710  3186   	fcall	_uart_wr_str
 16052  07B7                     l9144:
 16053                           
 16054                           ;main.c: 462:         Delay_ms(150);
 16055  07B7  3096               	movlw	150
 16056  07B8  00F3               	movwf	Delay_ms@time_in_ms
 16057  07B9  3000               	movlw	0
 16058  07BA  00F4               	movwf	Delay_ms@time_in_ms+1
 16059  07BB  31AC  24FE  3186   	fcall	_Delay_ms
 16060                           
 16061                           ;main.c: 463:         if (e_c_b_P_High == 1)
 16062  07BE  0022               	movlb	2	; select bank2
 16063  07BF  0331               	decf	_e_c_b_P_High^(0+256),w
 16064  07C0  1D03               	btfss	3,2
 16065  07C1  2FC7               	goto	l9150
 16066                           
 16067                           ;main.c: 464:             uart_wr_str(0, 0, "PWR=  0W", 8);
 16068  07C2  01F3               	clrf	uart_wr_str@col
 16069  07C3  3069               	movlw	low (STR_31| (0+32768))
 16070  07C4  00F4               	movwf	uart_wr_str@str
 16071  07C5  30B0               	movlw	high (STR_31| (0+32768))
 16072  07C6  2FCB               	goto	L42
 16073  07C7                     l9150:
 16074                           
 16075                           ;main.c: 466:             uart_wr_str(0, 0, "PWR=0.0W", 8);
 16076  07C7  01F3               	clrf	uart_wr_str@col
 16077  07C8  307B               	movlw	low (STR_32| (0+32768))
 16078  07C9  00F4               	movwf	uart_wr_str@str
 16079  07CA  30B0               	movlw	high (STR_32| (0+32768))
 16080  07CB                     L42:
 16081  07CB  00F5               	movwf	uart_wr_str@str+1
 16082  07CC  3008               	movlw	8
 16083  07CD  0020               	movlb	0	; select bank0
 16084  07CE  00B1               	movwf	??_lcd_prep
 16085  07CF  0831               	movf	??_lcd_prep,w
 16086  07D0  00F6               	movwf	uart_wr_str@len
 16087  07D1  3000               	movlw	0
 16088  07D2  31AF  2710  3186   	fcall	_uart_wr_str
 16089                           
 16090                           ;main.c: 467:         uart_wr_str(1, 0, "SWR=0.00", 8);
 16091  07D5  01F3               	clrf	uart_wr_str@col
 16092  07D6  304E               	movlw	low (STR_18| (0+32768))
 16093  07D7  00F4               	movwf	uart_wr_str@str
 16094  07D8  30B0               	movlw	high (STR_18| (0+32768))
 16095  07D9  00F5               	movwf	uart_wr_str@str+1
 16096  07DA  3008               	movlw	8
 16097  07DB  0020               	movlb	0	; select bank0
 16098  07DC  00B1               	movwf	??_lcd_prep
 16099  07DD  0831               	movf	??_lcd_prep,w
 16100  07DE  00F6               	movwf	uart_wr_str@len
 16101  07DF  3001               	movlw	1
 16102  07E0  31AF  2710  3186   	fcall	_uart_wr_str
 16103                           
 16104                           ;main.c: 468:         if (g_b_Auto_mode)
 16105  07E3  0022               	movlb	2	; select bank2
 16106  07E4  082E               	movf	_g_b_Auto_mode^(0+256),w
 16107  07E5  1903               	btfsc	3,2
 16108  07E6  2FF6               	goto	l557
 16109                           
 16110                           ;main.c: 469:             uart_wr_str(0, 8, ".", 1);
 16111  07E7  3008               	movlw	8
 16112  07E8                     L41:
 16113  07E8  0020               	movlb	0	; select bank0
 16114  07E9  00B1               	movwf	??_lcd_prep
 16115  07EA  0831               	movf	??_lcd_prep,w
 16116  07EB  00F3               	movwf	uart_wr_str@col
 16117  07EC  30BE               	movlw	low (STR_5| (0+32768))
 16118  07ED  00F4               	movwf	uart_wr_str@str
 16119  07EE  30B0               	movlw	high (STR_5| (0+32768))
 16120  07EF  00F5               	movwf	uart_wr_str@str+1
 16121  07F0  01F6               	clrf	uart_wr_str@len
 16122  07F1  0AF6               	incf	uart_wr_str@len,f
 16123  07F2  3000               	movlw	0
 16124  07F3  31AF  2710  3186   	fcall	_uart_wr_str
 16125  07F6                     l557:
 16126  07F6  0064               	clrwdt	;# 
 16127                           
 16128                           ;main.c: 472:     lcd_ind();
 16129  07F7  3195  2597         	fcall	_lcd_ind
 16130  07F9  0008               	return
 16131  07FA                     __end_of_lcd_prep:
 16132                           
 16133                           	psect	text42
 16134  1597                     __ptext42:	
 16135 ;; *************** function _lcd_ind *****************
 16136 ;; Defined at:
 16137 ;;		line 759 in file "main.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;		None
 16140 ;; Auto vars:     Size  Location     Type
 16141 ;;  l_work_int      2   14[BANK0 ] int 
 16142 ;;  l_line          1   16[BANK0 ] unsigned char 
 16143 ;;  capbits         1   13[BANK0 ] struct .
 16144 ;;  indbits         1   12[BANK0 ] struct .
 16145 ;; Return value:  Size  Location     Type
 16146 ;;                  1    wreg      void 
 16147 ;; Registers used:
 16148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16149 ;; Tracked objects:
 16150 ;;		On entry : 0/3
 16151 ;;		On exit  : 0/0
 16152 ;;		Unchanged: 0/0
 16153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;Total ram usage:        7 bytes
 16159 ;; Hardware stack levels used: 1
 16160 ;; Hardware stack levels required when called: 4
 16161 ;; This function calls:
 16162 ;;		_IntToStr
 16163 ;;		_uart_wr_str
 16164 ;; This function is called by:
 16165 ;;		_tune
 16166 ;;		_main
 16167 ;;		_button_proc_test
 16168 ;;		_button_proc
 16169 ;;		_show_reset
 16170 ;;		_tune_btn_push
 16171 ;;		_lcd_prep
 16172 ;;		_show_pwr
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176  1597                     _lcd_ind:	
 16177                           ;psect for function _lcd_ind
 16178                           
 16179                           
 16180                           ;incstack = 0
 16181                           ; Regs used in _lcd_ind: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16182  1597  0064               	clrwdt	;# 
 16183                           
 16184                           ;main.c: 765:     charbits indbits;;main.c: 766:     indbits.bytes = g_c_ind;
 16185  1598  0022               	movlb	2	; select bank2
 16186  1599  083C               	movf	_g_c_ind^(0+256),w
 16187  159A  0020               	movlb	0	; select bank0
 16188  159B  00AA               	movwf	??_lcd_ind
 16189  159C  082A               	movf	??_lcd_ind,w
 16190  159D  00AC               	movwf	lcd_ind@indbits
 16191                           
 16192                           ;main.c: 767:     l_work_int = 0;
 16193  159E  01AE               	clrf	lcd_ind@l_work_int
 16194  159F  01AF               	clrf	lcd_ind@l_work_int+1
 16195                           
 16196                           ;main.c: 768:     if (indbits.bits.B0)
 16197  15A0  1C2C               	btfss	lcd_ind@indbits,0
 16198  15A1  2DAA               	goto	l7720
 16199                           
 16200                           ;main.c: 769:         l_work_int += e_i_Ind1;
 16201  15A2  0023               	movlb	3	; select bank3
 16202  15A3  0836               	movf	_e_i_Ind1^(0+384),w
 16203  15A4  0020               	movlb	0	; select bank0
 16204  15A5  07AE               	addwf	lcd_ind@l_work_int,f
 16205  15A6  0023               	movlb	3	; select bank3
 16206  15A7  0837               	movf	(_e_i_Ind1+1)^(0+384),w
 16207  15A8  0020               	movlb	0	; select bank0
 16208  15A9  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16209  15AA                     l7720:
 16210                           
 16211                           ;main.c: 770:     if (indbits.bits.B1)
 16212  15AA  1CAC               	btfss	lcd_ind@indbits,1
 16213  15AB  2DB4               	goto	l7724
 16214                           
 16215                           ;main.c: 771:         l_work_int += e_i_Ind2;
 16216  15AC  0023               	movlb	3	; select bank3
 16217  15AD  0834               	movf	_e_i_Ind2^(0+384),w
 16218  15AE  0020               	movlb	0	; select bank0
 16219  15AF  07AE               	addwf	lcd_ind@l_work_int,f
 16220  15B0  0023               	movlb	3	; select bank3
 16221  15B1  0835               	movf	(_e_i_Ind2+1)^(0+384),w
 16222  15B2  0020               	movlb	0	; select bank0
 16223  15B3  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16224  15B4                     l7724:
 16225                           
 16226                           ;main.c: 772:     if (indbits.bits.B2)
 16227  15B4  1D2C               	btfss	lcd_ind@indbits,2
 16228  15B5  2DBE               	goto	l7728
 16229                           
 16230                           ;main.c: 773:         l_work_int += e_i_Ind3;
 16231  15B6  0023               	movlb	3	; select bank3
 16232  15B7  0832               	movf	_e_i_Ind3^(0+384),w
 16233  15B8  0020               	movlb	0	; select bank0
 16234  15B9  07AE               	addwf	lcd_ind@l_work_int,f
 16235  15BA  0023               	movlb	3	; select bank3
 16236  15BB  0833               	movf	(_e_i_Ind3+1)^(0+384),w
 16237  15BC  0020               	movlb	0	; select bank0
 16238  15BD  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16239  15BE                     l7728:
 16240                           
 16241                           ;main.c: 774:     if (indbits.bits.B3)
 16242  15BE  1DAC               	btfss	lcd_ind@indbits,3
 16243  15BF  2DC8               	goto	l7732
 16244                           
 16245                           ;main.c: 775:         l_work_int += e_i_Ind4;
 16246  15C0  0023               	movlb	3	; select bank3
 16247  15C1  0830               	movf	_e_i_Ind4^(0+384),w
 16248  15C2  0020               	movlb	0	; select bank0
 16249  15C3  07AE               	addwf	lcd_ind@l_work_int,f
 16250  15C4  0023               	movlb	3	; select bank3
 16251  15C5  0831               	movf	(_e_i_Ind4+1)^(0+384),w
 16252  15C6  0020               	movlb	0	; select bank0
 16253  15C7  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16254  15C8                     l7732:
 16255                           
 16256                           ;main.c: 776:     if (indbits.bits.B4)
 16257  15C8  1E2C               	btfss	lcd_ind@indbits,4
 16258  15C9  2DD2               	goto	l7736
 16259                           
 16260                           ;main.c: 777:         l_work_int += e_i_Ind5;
 16261  15CA  0023               	movlb	3	; select bank3
 16262  15CB  082E               	movf	_e_i_Ind5^(0+384),w
 16263  15CC  0020               	movlb	0	; select bank0
 16264  15CD  07AE               	addwf	lcd_ind@l_work_int,f
 16265  15CE  0023               	movlb	3	; select bank3
 16266  15CF  082F               	movf	(_e_i_Ind5+1)^(0+384),w
 16267  15D0  0020               	movlb	0	; select bank0
 16268  15D1  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16269  15D2                     l7736:
 16270                           
 16271                           ;main.c: 778:     if (indbits.bits.B5)
 16272  15D2  1EAC               	btfss	lcd_ind@indbits,5
 16273  15D3  2DDC               	goto	l7740
 16274                           
 16275                           ;main.c: 779:         l_work_int += e_i_Ind6;
 16276  15D4  0023               	movlb	3	; select bank3
 16277  15D5  082C               	movf	_e_i_Ind6^(0+384),w
 16278  15D6  0020               	movlb	0	; select bank0
 16279  15D7  07AE               	addwf	lcd_ind@l_work_int,f
 16280  15D8  0023               	movlb	3	; select bank3
 16281  15D9  082D               	movf	(_e_i_Ind6+1)^(0+384),w
 16282  15DA  0020               	movlb	0	; select bank0
 16283  15DB  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16284  15DC                     l7740:
 16285                           
 16286                           ;main.c: 780:     if (indbits.bits.B6)
 16287  15DC  1F2C               	btfss	lcd_ind@indbits,6
 16288  15DD  2DE6               	goto	l685
 16289                           
 16290                           ;main.c: 781:         l_work_int += e_i_Ind7;
 16291  15DE  0023               	movlb	3	; select bank3
 16292  15DF  082A               	movf	_e_i_Ind7^(0+384),w
 16293  15E0  0020               	movlb	0	; select bank0
 16294  15E1  07AE               	addwf	lcd_ind@l_work_int,f
 16295  15E2  0023               	movlb	3	; select bank3
 16296  15E3  082B               	movf	(_e_i_Ind7+1)^(0+384),w
 16297  15E4  0020               	movlb	0	; select bank0
 16298  15E5  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16299  15E6                     l685:
 16300                           
 16301                           ;main.c: 782:     if (l_work_int > 9999) {
 16302  15E6  082F               	movf	lcd_ind@l_work_int+1,w
 16303  15E7  3A80               	xorlw	128
 16304  15E8  00AA               	movwf	??_lcd_ind
 16305  15E9  30A7               	movlw	167
 16306  15EA  022A               	subwf	??_lcd_ind,w
 16307  15EB  1D03               	skipz
 16308  15EC  2DEF               	goto	u11365
 16309  15ED  3010               	movlw	16
 16310  15EE  022E               	subwf	lcd_ind@l_work_int,w
 16311  15EF                     u11365:
 16312  15EF  1C03               	skipc
 16313  15F0  2E16               	goto	l7756
 16314                           
 16315                           ;main.c: 783:         l_work_int += 50;
 16316  15F1  3032               	movlw	50
 16317  15F2  0020               	movlb	0	; select bank0
 16318  15F3  07AE               	addwf	lcd_ind@l_work_int,f
 16319  15F4  3000               	movlw	0
 16320  15F5  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16321                           
 16322                           ;main.c: 784:         IntToStr(l_work_int, g_work_str);
 16323  15F6  082F               	movf	lcd_ind@l_work_int+1,w
 16324  15F7  00A5               	movwf	IntToStr@number+1
 16325  15F8  082E               	movf	lcd_ind@l_work_int,w
 16326  15F9  00A4               	movwf	IntToStr@number
 16327  15FA  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 16328  15FB  00AA               	movwf	??_lcd_ind
 16329  15FC  082A               	movf	??_lcd_ind,w
 16330  15FD  00A6               	movwf	IntToStr@output
 16331  15FE  31A1  21B9  3195   	fcall	_IntToStr
 16332                           
 16333                           ;main.c: 785:         g_work_str_2[0] = g_work_str[1];
 16334  1601  0022               	movlb	2	; select bank2
 16335  1602  0845               	movf	(_g_work_str^(0+256)+1),w
 16336  1603  0020               	movlb	0	; select bank0
 16337  1604  00AA               	movwf	??_lcd_ind
 16338  1605  082A               	movf	??_lcd_ind,w
 16339  1606  0022               	movlb	2	; select bank2
 16340  1607  00BD               	movwf	_g_work_str_2^(0+256)
 16341                           
 16342                           ;main.c: 786:         g_work_str_2[1] = g_work_str[2];
 16343  1608  0846               	movf	(_g_work_str^(0+256)+2),w
 16344  1609  0020               	movlb	0	; select bank0
 16345  160A  00AA               	movwf	??_lcd_ind
 16346  160B  082A               	movf	??_lcd_ind,w
 16347  160C  0022               	movlb	2	; select bank2
 16348  160D  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 16349                           
 16350                           ;main.c: 787:         g_work_str_2[2] = '.';
 16351  160E  302E               	movlw	46
 16352  160F  0020               	movlb	0	; select bank0
 16353  1610  00AA               	movwf	??_lcd_ind
 16354  1611  082A               	movf	??_lcd_ind,w
 16355  1612  0022               	movlb	2	; select bank2
 16356  1613  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 16357                           
 16358                           ;main.c: 788:         g_work_str_2[3] = g_work_str[3];
 16359  1614  0847               	movf	(_g_work_str^(0+256)+3),w
 16360  1615  2E48               	goto	L43
 16361  1616                     l7756:	
 16362                           ;main.c: 789:     } else {
 16363                           
 16364                           
 16365                           ;main.c: 790:         IntToStr(l_work_int, g_work_str);
 16366  1616  0020               	movlb	0	; select bank0
 16367  1617  082F               	movf	lcd_ind@l_work_int+1,w
 16368  1618  00A5               	movwf	IntToStr@number+1
 16369  1619  082E               	movf	lcd_ind@l_work_int,w
 16370  161A  00A4               	movwf	IntToStr@number
 16371  161B  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 16372  161C  00AA               	movwf	??_lcd_ind
 16373  161D  082A               	movf	??_lcd_ind,w
 16374  161E  00A6               	movwf	IntToStr@output
 16375  161F  31A1  21B9  3195   	fcall	_IntToStr
 16376                           
 16377                           ;main.c: 791:         if (g_work_str[2] != ' ')
 16378  1622  3020               	movlw	32
 16379  1623  0022               	movlb	2	; select bank2
 16380  1624  0646               	xorwf	(_g_work_str^(0+256)+2),w
 16381  1625  1903               	btfsc	3,2
 16382  1626  2E29               	goto	l7762
 16383                           
 16384                           ;main.c: 792:             g_work_str_2[0] = g_work_str[2];
 16385  1627  0846               	movf	(_g_work_str^(0+256)+2),w
 16386  1628  2E2A               	goto	L44
 16387  1629                     l7762:
 16388                           
 16389                           ;main.c: 794:             g_work_str_2[0] = '0';
 16390  1629  3030               	movlw	48
 16391  162A                     L44:
 16392  162A  0020               	movlb	0	; select bank0
 16393  162B  00AA               	movwf	??_lcd_ind
 16394  162C  082A               	movf	??_lcd_ind,w
 16395  162D  0022               	movlb	2	; select bank2
 16396  162E  00BD               	movwf	_g_work_str_2^(0+256)
 16397                           
 16398                           ;main.c: 795:         g_work_str_2[1] = '.';
 16399  162F  302E               	movlw	46
 16400  1630  0020               	movlb	0	; select bank0
 16401  1631  00AA               	movwf	??_lcd_ind
 16402  1632  082A               	movf	??_lcd_ind,w
 16403  1633  0022               	movlb	2	; select bank2
 16404  1634  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 16405                           
 16406                           ;main.c: 796:         if (g_work_str[3] != ' ')
 16407  1635  3020               	movlw	32
 16408  1636  0647               	xorwf	(_g_work_str^(0+256)+3),w
 16409  1637  1903               	btfsc	3,2
 16410  1638  2E3B               	goto	l7768
 16411                           
 16412                           ;main.c: 797:             g_work_str_2[2] = g_work_str[3];
 16413  1639  0847               	movf	(_g_work_str^(0+256)+3),w
 16414  163A  2E3C               	goto	L45
 16415  163B                     l7768:
 16416                           
 16417                           ;main.c: 799:             g_work_str_2[2] = '0';
 16418  163B  3030               	movlw	48
 16419  163C                     L45:
 16420  163C  0020               	movlb	0	; select bank0
 16421  163D  00AA               	movwf	??_lcd_ind
 16422  163E  082A               	movf	??_lcd_ind,w
 16423  163F  0022               	movlb	2	; select bank2
 16424  1640  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 16425                           
 16426                           ;main.c: 800:         if (g_work_str[4] != ' ')
 16427  1641  3020               	movlw	32
 16428  1642  0648               	xorwf	(_g_work_str^(0+256)+4),w
 16429  1643  1903               	btfsc	3,2
 16430  1644  2E47               	goto	l7774
 16431                           
 16432                           ;main.c: 801:             g_work_str_2[3] = g_work_str[4];
 16433  1645  0848               	movf	(_g_work_str^(0+256)+4),w
 16434  1646  2E48               	goto	L43
 16435  1647                     l7774:
 16436                           
 16437                           ;main.c: 803:             g_work_str_2[3] = '0';
 16438  1647  3030               	movlw	48
 16439  1648                     L43:
 16440  1648  0020               	movlb	0	; select bank0
 16441  1649  00AA               	movwf	??_lcd_ind
 16442  164A  082A               	movf	??_lcd_ind,w
 16443  164B  0022               	movlb	2	; select bank2
 16444  164C  00C0               	movwf	(_g_work_str_2^(0+256)+3)
 16445                           
 16446                           ;main.c: 805:     if (e_c_ledtype == 4 | e_c_ledtype == 5) {
 16447  164D  3004               	movlw	4
 16448  164E  062F               	xorwf	_e_c_ledtype^(0+256),w
 16449  164F  1903               	btfsc	3,2
 16450  1650  2E55               	goto	l7780
 16451  1651  3005               	movlw	5
 16452  1652  062F               	xorwf	_e_c_ledtype^(0+256),w
 16453  1653  1D03               	btfss	3,2
 16454  1654  2E82               	goto	l7792
 16455  1655                     l7780:
 16456                           
 16457                           ;main.c: 806:         if (g_c_SW == 1)
 16458  1655  033B               	decf	_g_c_SW^(0+256),w
 16459  1656  1D03               	btfss	3,2
 16460  1657  2E5A               	goto	l7784
 16461                           
 16462                           ;main.c: 807:             l_line = 4;
 16463  1658  3004               	movlw	4
 16464  1659  2E5B               	goto	L46
 16465  165A                     l7784:
 16466                           
 16467                           ;main.c: 809:             l_line = 6;
 16468  165A  3006               	movlw	6
 16469  165B                     L46:
 16470  165B  0020               	movlb	0	; select bank0
 16471  165C  00AA               	movwf	??_lcd_ind
 16472  165D  082A               	movf	??_lcd_ind,w
 16473  165E  00B0               	movwf	lcd_ind@l_line
 16474                           
 16475                           ;main.c: 810:         uart_wr_str(l_line, 16, "L=", 2);
 16476  165F  3010               	movlw	16
 16477  1660  00AA               	movwf	??_lcd_ind
 16478  1661  082A               	movf	??_lcd_ind,w
 16479  1662  00F3               	movwf	uart_wr_str@col
 16480  1663  30B5               	movlw	low (STR_72| (0+32768))
 16481  1664  00F4               	movwf	uart_wr_str@str
 16482  1665  30B0               	movlw	high (STR_72| (0+32768))
 16483  1666  00F5               	movwf	uart_wr_str@str+1
 16484  1667  3002               	movlw	2
 16485  1668  00AB               	movwf	??_lcd_ind+1
 16486  1669  082B               	movf	??_lcd_ind+1,w
 16487  166A  00F6               	movwf	uart_wr_str@len
 16488  166B  0830               	movf	lcd_ind@l_line,w
 16489  166C  31AF  2710  3195   	fcall	_uart_wr_str
 16490                           
 16491                           ;main.c: 811:         uart_wr_str(l_line, 16 + 6 * 12, "uH", 2);
 16492  166F  3058               	movlw	88
 16493  1670  0020               	movlb	0	; select bank0
 16494  1671  00AA               	movwf	??_lcd_ind
 16495  1672  082A               	movf	??_lcd_ind,w
 16496  1673  00F3               	movwf	uart_wr_str@col
 16497  1674  30BB               	movlw	low (STR_73| (0+32768))
 16498  1675  00F4               	movwf	uart_wr_str@str
 16499  1676  30B0               	movlw	high (STR_73| (0+32768))
 16500  1677  00F5               	movwf	uart_wr_str@str+1
 16501  1678  3002               	movlw	2
 16502  1679  00AB               	movwf	??_lcd_ind+1
 16503  167A  082B               	movf	??_lcd_ind+1,w
 16504  167B  00F6               	movwf	uart_wr_str@len
 16505  167C  0830               	movf	lcd_ind@l_line,w
 16506  167D  31AF  2710  3195   	fcall	_uart_wr_str
 16507                           
 16508                           ;main.c: 812:         uart_wr_str(l_line, 16 + 2 * 12, g_work_str_2, 4);
 16509  1680  3028               	movlw	40
 16510  1681  2EDD               	goto	L47
 16511  1682                     l7792:	
 16512                           ;main.c: 813:     } else if (e_c_ledtype == 2 | e_c_ledtype == 3) {
 16513                           
 16514  1682  3002               	movlw	2
 16515  1683  062F               	xorwf	_e_c_ledtype^(0+256),w
 16516  1684  1903               	btfsc	3,2
 16517  1685  2E8A               	goto	l7796
 16518  1686  3003               	movlw	3
 16519  1687  062F               	xorwf	_e_c_ledtype^(0+256),w
 16520  1688  1D03               	btfss	3,2
 16521  1689  2EB1               	goto	l7802
 16522  168A                     l7796:
 16523                           
 16524                           ;main.c: 814:         if (g_c_SW == 1)
 16525  168A  033B               	decf	_g_c_SW^(0+256),w
 16526  168B  1D03               	btfss	3,2
 16527  168C  2E90               	goto	l703
 16528                           
 16529                           ;main.c: 815:             l_line = 0;
 16530  168D  0020               	movlb	0	; select bank0
 16531  168E  01B0               	clrf	lcd_ind@l_line
 16532  168F  2E93               	goto	l7800
 16533  1690                     l703:	
 16534                           ;main.c: 816:         else
 16535                           
 16536                           
 16537                           ;main.c: 817:             l_line = 1;
 16538  1690  0020               	movlb	0	; select bank0
 16539  1691  01B0               	clrf	lcd_ind@l_line
 16540  1692  0AB0               	incf	lcd_ind@l_line,f
 16541  1693                     l7800:
 16542                           
 16543                           ;main.c: 818:         uart_wr_str(l_line, 9, "L=", 2);
 16544  1693  3009               	movlw	9
 16545  1694  00AA               	movwf	??_lcd_ind
 16546  1695  082A               	movf	??_lcd_ind,w
 16547  1696  00F3               	movwf	uart_wr_str@col
 16548  1697  30B5               	movlw	low (STR_72| (0+32768))
 16549  1698  00F4               	movwf	uart_wr_str@str
 16550  1699  30B0               	movlw	high (STR_72| (0+32768))
 16551  169A  00F5               	movwf	uart_wr_str@str+1
 16552  169B  3002               	movlw	2
 16553  169C  00AB               	movwf	??_lcd_ind+1
 16554  169D  082B               	movf	??_lcd_ind+1,w
 16555  169E  00F6               	movwf	uart_wr_str@len
 16556  169F  0830               	movf	lcd_ind@l_line,w
 16557  16A0  31AF  2710  3195   	fcall	_uart_wr_str
 16558                           
 16559                           ;main.c: 819:         uart_wr_str(l_line, 15, "uH", 2);
 16560  16A3  300F               	movlw	15
 16561  16A4  0020               	movlb	0	; select bank0
 16562  16A5  00AA               	movwf	??_lcd_ind
 16563  16A6  082A               	movf	??_lcd_ind,w
 16564  16A7  00F3               	movwf	uart_wr_str@col
 16565  16A8  30BB               	movlw	low (STR_73| (0+32768))
 16566  16A9  00F4               	movwf	uart_wr_str@str
 16567  16AA  30B0               	movlw	high (STR_73| (0+32768))
 16568  16AB  00F5               	movwf	uart_wr_str@str+1
 16569  16AC  3002               	movlw	2
 16570  16AD  00AB               	movwf	??_lcd_ind+1
 16571  16AE  082B               	movf	??_lcd_ind+1,w
 16572  16AF  00F6               	movwf	uart_wr_str@len
 16573  16B0  2ED8               	goto	L50
 16574  16B1                     l7802:	
 16575                           ;main.c: 821:     } else if (e_c_ledtype == 1) {
 16576                           
 16577                           ;main.c: 820:         uart_wr_str(l_line, 11, g_work_str_2, 4);
 16578                           
 16579  16B1  032F               	decf	_e_c_ledtype^(0+256),w
 16580  16B2  1D03               	btfss	3,2
 16581  16B3  2EED               	goto	l699
 16582                           
 16583                           ;main.c: 822:         if (g_c_SW == 1)
 16584  16B4  033B               	decf	_g_c_SW^(0+256),w
 16585  16B5  1D03               	btfss	3,2
 16586  16B6  2EBA               	goto	l707
 16587                           
 16588                           ;main.c: 823:             l_line = 0;
 16589  16B7  0020               	movlb	0	; select bank0
 16590  16B8  01B0               	clrf	lcd_ind@l_line
 16591  16B9  2EBD               	goto	l7808
 16592  16BA                     l707:	
 16593                           ;main.c: 824:         else
 16594                           
 16595                           
 16596                           ;main.c: 825:             l_line = 1;
 16597  16BA  0020               	movlb	0	; select bank0
 16598  16BB  01B0               	clrf	lcd_ind@l_line
 16599  16BC  0AB0               	incf	lcd_ind@l_line,f
 16600  16BD                     l7808:
 16601                           
 16602                           ;main.c: 826:         uart_wr_str(l_line, 9, "L=", 2);
 16603  16BD  3009               	movlw	9
 16604  16BE  00AA               	movwf	??_lcd_ind
 16605  16BF  082A               	movf	??_lcd_ind,w
 16606  16C0  00F3               	movwf	uart_wr_str@col
 16607  16C1  30B5               	movlw	low (STR_72| (0+32768))
 16608  16C2  00F4               	movwf	uart_wr_str@str
 16609  16C3  30B0               	movlw	high (STR_72| (0+32768))
 16610  16C4  00F5               	movwf	uart_wr_str@str+1
 16611  16C5  3002               	movlw	2
 16612  16C6  00AB               	movwf	??_lcd_ind+1
 16613  16C7  082B               	movf	??_lcd_ind+1,w
 16614  16C8  00F6               	movwf	uart_wr_str@len
 16615  16C9  0830               	movf	lcd_ind@l_line,w
 16616  16CA  31AF  2710  3195   	fcall	_uart_wr_str
 16617                           
 16618                           ;main.c: 827:         uart_wr_str(l_line, 15, "u", 1);
 16619  16CD  300F               	movlw	15
 16620  16CE  0020               	movlb	0	; select bank0
 16621  16CF  00AA               	movwf	??_lcd_ind
 16622  16D0  082A               	movf	??_lcd_ind,w
 16623  16D1  00F3               	movwf	uart_wr_str@col
 16624  16D2  30C8               	movlw	low (STR_77| (0+32768))
 16625  16D3  00F4               	movwf	uart_wr_str@str
 16626  16D4  30B0               	movlw	high (STR_77| (0+32768))
 16627  16D5  00F5               	movwf	uart_wr_str@str+1
 16628  16D6  01F6               	clrf	uart_wr_str@len
 16629  16D7  0AF6               	incf	uart_wr_str@len,f
 16630  16D8                     L50:
 16631  16D8  0830               	movf	lcd_ind@l_line,w
 16632  16D9  31AF  2710  3195   	fcall	_uart_wr_str
 16633                           
 16634                           ;main.c: 828:         uart_wr_str(l_line, 11, g_work_str_2, 4);
 16635  16DC  300B               	movlw	11
 16636  16DD                     L47:
 16637  16DD  0020               	movlb	0	; select bank0
 16638  16DE  00AA               	movwf	??_lcd_ind
 16639  16DF  082A               	movf	??_lcd_ind,w
 16640  16E0  00F3               	movwf	uart_wr_str@col
 16641  16E1  303D               	movlw	low _g_work_str_2
 16642  16E2  00F4               	movwf	uart_wr_str@str
 16643  16E3  3001               	movlw	high _g_work_str_2
 16644  16E4  00F5               	movwf	uart_wr_str@str+1
 16645  16E5  3004               	movlw	4
 16646  16E6  00AB               	movwf	??_lcd_ind+1
 16647  16E7  082B               	movf	??_lcd_ind+1,w
 16648  16E8  00F6               	movwf	uart_wr_str@len
 16649  16E9  0830               	movf	lcd_ind@l_line,w
 16650  16EA  31AF  2710  3195   	fcall	_uart_wr_str
 16651  16ED                     l699:
 16652  16ED  0064               	clrwdt	;# 
 16653                           
 16654                           ;main.c: 834:     l_work_int = 0;
 16655  16EE  0020               	movlb	0	; select bank0
 16656  16EF  01AE               	clrf	lcd_ind@l_work_int
 16657  16F0  01AF               	clrf	lcd_ind@l_work_int+1
 16658                           
 16659                           ;main.c: 835:     charbits capbits;;main.c: 836:     capbits.bytes = g_c_cap;
 16660  16F1  087A               	movf	_g_c_cap,w
 16661  16F2  00AA               	movwf	??_lcd_ind
 16662  16F3  082A               	movf	??_lcd_ind,w
 16663  16F4  00AD               	movwf	lcd_ind@capbits
 16664                           
 16665                           ;main.c: 837:     if (capbits.bits.B0)
 16666  16F5  1C2D               	btfss	lcd_ind@capbits,0
 16667  16F6  2EFF               	goto	l7818
 16668                           
 16669                           ;main.c: 838:         l_work_int += e_i_Cap1;
 16670  16F7  0023               	movlb	3	; select bank3
 16671  16F8  0844               	movf	_e_i_Cap1^(0+384),w
 16672  16F9  0020               	movlb	0	; select bank0
 16673  16FA  07AE               	addwf	lcd_ind@l_work_int,f
 16674  16FB  0023               	movlb	3	; select bank3
 16675  16FC  0845               	movf	(_e_i_Cap1+1)^(0+384),w
 16676  16FD  0020               	movlb	0	; select bank0
 16677  16FE  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16678  16FF                     l7818:
 16679                           
 16680                           ;main.c: 839:     if (capbits.bits.B1)
 16681  16FF  1CAD               	btfss	lcd_ind@capbits,1
 16682  1700  2F09               	goto	l7822
 16683                           
 16684                           ;main.c: 840:         l_work_int += e_i_Cap2;
 16685  1701  0023               	movlb	3	; select bank3
 16686  1702  0842               	movf	_e_i_Cap2^(0+384),w
 16687  1703  0020               	movlb	0	; select bank0
 16688  1704  07AE               	addwf	lcd_ind@l_work_int,f
 16689  1705  0023               	movlb	3	; select bank3
 16690  1706  0843               	movf	(_e_i_Cap2+1)^(0+384),w
 16691  1707  0020               	movlb	0	; select bank0
 16692  1708  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16693  1709                     l7822:
 16694                           
 16695                           ;main.c: 841:     if (capbits.bits.B2)
 16696  1709  1D2D               	btfss	lcd_ind@capbits,2
 16697  170A  2F13               	goto	l7826
 16698                           
 16699                           ;main.c: 842:         l_work_int += e_i_Cap3;
 16700  170B  0023               	movlb	3	; select bank3
 16701  170C  0840               	movf	_e_i_Cap3^(0+384),w
 16702  170D  0020               	movlb	0	; select bank0
 16703  170E  07AE               	addwf	lcd_ind@l_work_int,f
 16704  170F  0023               	movlb	3	; select bank3
 16705  1710  0841               	movf	(_e_i_Cap3+1)^(0+384),w
 16706  1711  0020               	movlb	0	; select bank0
 16707  1712  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16708  1713                     l7826:
 16709                           
 16710                           ;main.c: 843:     if (capbits.bits.B3)
 16711  1713  1DAD               	btfss	lcd_ind@capbits,3
 16712  1714  2F1D               	goto	l7830
 16713                           
 16714                           ;main.c: 844:         l_work_int += e_i_Cap4;
 16715  1715  0023               	movlb	3	; select bank3
 16716  1716  083E               	movf	_e_i_Cap4^(0+384),w
 16717  1717  0020               	movlb	0	; select bank0
 16718  1718  07AE               	addwf	lcd_ind@l_work_int,f
 16719  1719  0023               	movlb	3	; select bank3
 16720  171A  083F               	movf	(_e_i_Cap4+1)^(0+384),w
 16721  171B  0020               	movlb	0	; select bank0
 16722  171C  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16723  171D                     l7830:
 16724                           
 16725                           ;main.c: 845:     if (capbits.bits.B4)
 16726  171D  1E2D               	btfss	lcd_ind@capbits,4
 16727  171E  2F27               	goto	l7834
 16728                           
 16729                           ;main.c: 846:         l_work_int += e_i_Cap5;
 16730  171F  0023               	movlb	3	; select bank3
 16731  1720  083C               	movf	_e_i_Cap5^(0+384),w
 16732  1721  0020               	movlb	0	; select bank0
 16733  1722  07AE               	addwf	lcd_ind@l_work_int,f
 16734  1723  0023               	movlb	3	; select bank3
 16735  1724  083D               	movf	(_e_i_Cap5+1)^(0+384),w
 16736  1725  0020               	movlb	0	; select bank0
 16737  1726  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16738  1727                     l7834:
 16739                           
 16740                           ;main.c: 847:     if (capbits.bits.B5)
 16741  1727  1EAD               	btfss	lcd_ind@capbits,5
 16742  1728  2F31               	goto	l7838
 16743                           
 16744                           ;main.c: 848:         l_work_int += e_i_Cap6;
 16745  1729  0023               	movlb	3	; select bank3
 16746  172A  083A               	movf	_e_i_Cap6^(0+384),w
 16747  172B  0020               	movlb	0	; select bank0
 16748  172C  07AE               	addwf	lcd_ind@l_work_int,f
 16749  172D  0023               	movlb	3	; select bank3
 16750  172E  083B               	movf	(_e_i_Cap6+1)^(0+384),w
 16751  172F  0020               	movlb	0	; select bank0
 16752  1730  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16753  1731                     l7838:
 16754                           
 16755                           ;main.c: 849:     if (capbits.bits.B6)
 16756  1731  1F2D               	btfss	lcd_ind@capbits,6
 16757  1732  2F3B               	goto	l7842
 16758                           
 16759                           ;main.c: 850:         l_work_int += e_i_Cap7;
 16760  1733  0023               	movlb	3	; select bank3
 16761  1734  0838               	movf	_e_i_Cap7^(0+384),w
 16762  1735  0020               	movlb	0	; select bank0
 16763  1736  07AE               	addwf	lcd_ind@l_work_int,f
 16764  1737  0023               	movlb	3	; select bank3
 16765  1738  0839               	movf	(_e_i_Cap7+1)^(0+384),w
 16766  1739  0020               	movlb	0	; select bank0
 16767  173A  3DAF               	addwfc	lcd_ind@l_work_int+1,f
 16768  173B                     l7842:
 16769                           
 16770                           ;main.c: 851:     IntToStr(l_work_int, g_work_str);
 16771  173B  082F               	movf	lcd_ind@l_work_int+1,w
 16772  173C  00A5               	movwf	IntToStr@number+1
 16773  173D  082E               	movf	lcd_ind@l_work_int,w
 16774  173E  00A4               	movwf	IntToStr@number
 16775  173F  3044               	movlw	(low (_g_work_str| (0+256)))& (0+255)
 16776  1740  00AA               	movwf	??_lcd_ind
 16777  1741  082A               	movf	??_lcd_ind,w
 16778  1742  00A6               	movwf	IntToStr@output
 16779  1743  31A1  21B9  3195   	fcall	_IntToStr
 16780                           
 16781                           ;main.c: 852:     g_work_str_2[0] = g_work_str[2];
 16782  1746  0022               	movlb	2	; select bank2
 16783  1747  0846               	movf	(_g_work_str^(0+256)+2),w
 16784  1748  0020               	movlb	0	; select bank0
 16785  1749  00AA               	movwf	??_lcd_ind
 16786  174A  082A               	movf	??_lcd_ind,w
 16787  174B  0022               	movlb	2	; select bank2
 16788  174C  00BD               	movwf	_g_work_str_2^(0+256)
 16789                           
 16790                           ;main.c: 853:     g_work_str_2[1] = g_work_str[3];
 16791  174D  0847               	movf	(_g_work_str^(0+256)+3),w
 16792  174E  0020               	movlb	0	; select bank0
 16793  174F  00AA               	movwf	??_lcd_ind
 16794  1750  082A               	movf	??_lcd_ind,w
 16795  1751  0022               	movlb	2	; select bank2
 16796  1752  00BE               	movwf	(_g_work_str_2^(0+256)+1)
 16797                           
 16798                           ;main.c: 854:     g_work_str_2[2] = g_work_str[4];
 16799  1753  0848               	movf	(_g_work_str^(0+256)+4),w
 16800  1754  0020               	movlb	0	; select bank0
 16801  1755  00AA               	movwf	??_lcd_ind
 16802  1756  082A               	movf	??_lcd_ind,w
 16803  1757  0022               	movlb	2	; select bank2
 16804  1758  00BF               	movwf	(_g_work_str_2^(0+256)+2)
 16805                           
 16806                           ;main.c: 855:     g_work_str_2[3] = g_work_str[5];
 16807  1759  0849               	movf	(_g_work_str^(0+256)+5),w
 16808  175A  0020               	movlb	0	; select bank0
 16809  175B  00AA               	movwf	??_lcd_ind
 16810  175C  082A               	movf	??_lcd_ind,w
 16811  175D  0022               	movlb	2	; select bank2
 16812  175E  00C0               	movwf	(_g_work_str_2^(0+256)+3)
 16813                           
 16814                           ;main.c: 857:     if (e_c_ledtype == 4 | e_c_ledtype == 5) {
 16815  175F  3004               	movlw	4
 16816  1760  062F               	xorwf	_e_c_ledtype^(0+256),w
 16817  1761  1903               	btfsc	3,2
 16818  1762  2F67               	goto	l7856
 16819  1763  3005               	movlw	5
 16820  1764  062F               	xorwf	_e_c_ledtype^(0+256),w
 16821  1765  1D03               	btfss	3,2
 16822  1766  2F94               	goto	l7868
 16823  1767                     l7856:
 16824                           
 16825                           ;main.c: 858:         if (g_c_SW == 1)
 16826  1767  033B               	decf	_g_c_SW^(0+256),w
 16827  1768  1D03               	btfss	3,2
 16828  1769  2F6C               	goto	l7860
 16829                           
 16830                           ;main.c: 859:             l_line = 6;
 16831  176A  3006               	movlw	6
 16832  176B  2F6D               	goto	L48
 16833  176C                     l7860:
 16834                           
 16835                           ;main.c: 861:             l_line = 4;
 16836  176C  3004               	movlw	4
 16837  176D                     L48:
 16838  176D  0020               	movlb	0	; select bank0
 16839  176E  00AA               	movwf	??_lcd_ind
 16840  176F  082A               	movf	??_lcd_ind,w
 16841  1770  00B0               	movwf	lcd_ind@l_line
 16842                           
 16843                           ;main.c: 862:         uart_wr_str(l_line, 16, "C=", 2);
 16844  1771  3010               	movlw	16
 16845  1772  00AA               	movwf	??_lcd_ind
 16846  1773  082A               	movf	??_lcd_ind,w
 16847  1774  00F3               	movwf	uart_wr_str@col
 16848  1775  30B2               	movlw	low (STR_78| (0+32768))
 16849  1776  00F4               	movwf	uart_wr_str@str
 16850  1777  30B0               	movlw	high (STR_78| (0+32768))
 16851  1778  00F5               	movwf	uart_wr_str@str+1
 16852  1779  3002               	movlw	2
 16853  177A  00AB               	movwf	??_lcd_ind+1
 16854  177B  082B               	movf	??_lcd_ind+1,w
 16855  177C  00F6               	movwf	uart_wr_str@len
 16856  177D  0830               	movf	lcd_ind@l_line,w
 16857  177E  31AF  2710  3195   	fcall	_uart_wr_str
 16858                           
 16859                           ;main.c: 863:         uart_wr_str(l_line, 16 + 6 * 12, "pF", 2);
 16860  1781  3058               	movlw	88
 16861  1782  0020               	movlb	0	; select bank0
 16862  1783  00AA               	movwf	??_lcd_ind
 16863  1784  082A               	movf	??_lcd_ind,w
 16864  1785  00F3               	movwf	uart_wr_str@col
 16865  1786  30B8               	movlw	low (STR_79| (0+32768))
 16866  1787  00F4               	movwf	uart_wr_str@str
 16867  1788  30B0               	movlw	high (STR_79| (0+32768))
 16868  1789  00F5               	movwf	uart_wr_str@str+1
 16869  178A  3002               	movlw	2
 16870  178B  00AB               	movwf	??_lcd_ind+1
 16871  178C  082B               	movf	??_lcd_ind+1,w
 16872  178D  00F6               	movwf	uart_wr_str@len
 16873  178E  0830               	movf	lcd_ind@l_line,w
 16874  178F  31AF  2710  3195   	fcall	_uart_wr_str
 16875                           
 16876                           ;main.c: 864:         uart_wr_str(l_line, 16 + 2 * 12, g_work_str_2, 4);
 16877  1792  3028               	movlw	40
 16878  1793  2FEF               	goto	L49
 16879  1794                     l7868:	
 16880                           ;main.c: 865:     } else if (e_c_ledtype == 2 | e_c_ledtype == 3) {
 16881                           
 16882  1794  3002               	movlw	2
 16883  1795  062F               	xorwf	_e_c_ledtype^(0+256),w
 16884  1796  1903               	btfsc	3,2
 16885  1797  2F9C               	goto	l7872
 16886  1798  3003               	movlw	3
 16887  1799  062F               	xorwf	_e_c_ledtype^(0+256),w
 16888  179A  1D03               	btfss	3,2
 16889  179B  2FC3               	goto	l7884
 16890  179C                     l7872:
 16891                           
 16892                           ;main.c: 866:         if (g_c_SW == 1)
 16893  179C  033B               	decf	_g_c_SW^(0+256),w
 16894  179D  1D03               	btfss	3,2
 16895  179E  2FA3               	goto	l7876
 16896                           
 16897                           ;main.c: 867:             l_line = 1;
 16898  179F  0020               	movlb	0	; select bank0
 16899  17A0  01B0               	clrf	lcd_ind@l_line
 16900  17A1  0AB0               	incf	lcd_ind@l_line,f
 16901  17A2  2FA5               	goto	l7878
 16902  17A3                     l7876:
 16903                           
 16904                           ;main.c: 869:             l_line = 0;
 16905  17A3  0020               	movlb	0	; select bank0
 16906  17A4  01B0               	clrf	lcd_ind@l_line
 16907  17A5                     l7878:
 16908                           
 16909                           ;main.c: 870:         uart_wr_str(l_line, 9, "C=", 2);
 16910  17A5  3009               	movlw	9
 16911  17A6  00AA               	movwf	??_lcd_ind
 16912  17A7  082A               	movf	??_lcd_ind,w
 16913  17A8  00F3               	movwf	uart_wr_str@col
 16914  17A9  30B2               	movlw	low (STR_78| (0+32768))
 16915  17AA  00F4               	movwf	uart_wr_str@str
 16916  17AB  30B0               	movlw	high (STR_78| (0+32768))
 16917  17AC  00F5               	movwf	uart_wr_str@str+1
 16918  17AD  3002               	movlw	2
 16919  17AE  00AB               	movwf	??_lcd_ind+1
 16920  17AF  082B               	movf	??_lcd_ind+1,w
 16921  17B0  00F6               	movwf	uart_wr_str@len
 16922  17B1  0830               	movf	lcd_ind@l_line,w
 16923  17B2  31AF  2710  3195   	fcall	_uart_wr_str
 16924                           
 16925                           ;main.c: 871:         uart_wr_str(l_line, 15, "pF", 2);
 16926  17B5  300F               	movlw	15
 16927  17B6  0020               	movlb	0	; select bank0
 16928  17B7  00AA               	movwf	??_lcd_ind
 16929  17B8  082A               	movf	??_lcd_ind,w
 16930  17B9  00F3               	movwf	uart_wr_str@col
 16931  17BA  30B8               	movlw	low (STR_79| (0+32768))
 16932  17BB  00F4               	movwf	uart_wr_str@str
 16933  17BC  30B0               	movlw	high (STR_79| (0+32768))
 16934  17BD  00F5               	movwf	uart_wr_str@str+1
 16935  17BE  3002               	movlw	2
 16936  17BF  00AB               	movwf	??_lcd_ind+1
 16937  17C0  082B               	movf	??_lcd_ind+1,w
 16938  17C1  00F6               	movwf	uart_wr_str@len
 16939  17C2  2FEA               	goto	L51
 16940  17C3                     l7884:	
 16941                           ;main.c: 873:     } else if (e_c_ledtype == 1) {
 16942                           
 16943                           ;main.c: 872:         uart_wr_str(l_line, 11, g_work_str_2, 4);
 16944                           
 16945  17C3  032F               	decf	_e_c_ledtype^(0+256),w
 16946  17C4  1D03               	btfss	3,2
 16947  17C5  2FFE               	goto	l721
 16948                           
 16949                           ;main.c: 874:         if (g_c_SW == 1)
 16950  17C6  033B               	decf	_g_c_SW^(0+256),w
 16951  17C7  1D03               	btfss	3,2
 16952  17C8  2FCD               	goto	l7890
 16953                           
 16954                           ;main.c: 875:             l_line = 1;
 16955  17C9  0020               	movlb	0	; select bank0
 16956  17CA  01B0               	clrf	lcd_ind@l_line
 16957  17CB  0AB0               	incf	lcd_ind@l_line,f
 16958  17CC  2FCF               	goto	l7892
 16959  17CD                     l7890:
 16960                           
 16961                           ;main.c: 877:             l_line = 0;
 16962  17CD  0020               	movlb	0	; select bank0
 16963  17CE  01B0               	clrf	lcd_ind@l_line
 16964  17CF                     l7892:
 16965                           
 16966                           ;main.c: 878:         uart_wr_str(l_line, 9, "C=", 2);
 16967  17CF  3009               	movlw	9
 16968  17D0  00AA               	movwf	??_lcd_ind
 16969  17D1  082A               	movf	??_lcd_ind,w
 16970  17D2  00F3               	movwf	uart_wr_str@col
 16971  17D3  30B2               	movlw	low (STR_78| (0+32768))
 16972  17D4  00F4               	movwf	uart_wr_str@str
 16973  17D5  30B0               	movlw	high (STR_78| (0+32768))
 16974  17D6  00F5               	movwf	uart_wr_str@str+1
 16975  17D7  3002               	movlw	2
 16976  17D8  00AB               	movwf	??_lcd_ind+1
 16977  17D9  082B               	movf	??_lcd_ind+1,w
 16978  17DA  00F6               	movwf	uart_wr_str@len
 16979  17DB  0830               	movf	lcd_ind@l_line,w
 16980  17DC  31AF  2710  3195   	fcall	_uart_wr_str
 16981                           
 16982                           ;main.c: 879:         uart_wr_str(l_line, 15, "p", 1);
 16983  17DF  300F               	movlw	15
 16984  17E0  0020               	movlb	0	; select bank0
 16985  17E1  00AA               	movwf	??_lcd_ind
 16986  17E2  082A               	movf	??_lcd_ind,w
 16987  17E3  00F3               	movwf	uart_wr_str@col
 16988  17E4  30C6               	movlw	low (STR_83| (0+32768))
 16989  17E5  00F4               	movwf	uart_wr_str@str
 16990  17E6  30B0               	movlw	high (STR_83| (0+32768))
 16991  17E7  00F5               	movwf	uart_wr_str@str+1
 16992  17E8  01F6               	clrf	uart_wr_str@len
 16993  17E9  0AF6               	incf	uart_wr_str@len,f
 16994  17EA                     L51:
 16995  17EA  0830               	movf	lcd_ind@l_line,w
 16996  17EB  31AF  2710  3195   	fcall	_uart_wr_str
 16997                           
 16998                           ;main.c: 880:         uart_wr_str(l_line, 11, g_work_str_2, 4);
 16999  17EE  300B               	movlw	11
 17000  17EF                     L49:
 17001  17EF  0020               	movlb	0	; select bank0
 17002  17F0  00AA               	movwf	??_lcd_ind
 17003  17F1  082A               	movf	??_lcd_ind,w
 17004  17F2  00F3               	movwf	uart_wr_str@col
 17005  17F3  303D               	movlw	low _g_work_str_2
 17006  17F4  00F4               	movwf	uart_wr_str@str
 17007  17F5  3001               	movlw	high _g_work_str_2
 17008  17F6  00F5               	movwf	uart_wr_str@str+1
 17009  17F7  3004               	movlw	4
 17010  17F8  00AB               	movwf	??_lcd_ind+1
 17011  17F9  082B               	movf	??_lcd_ind+1,w
 17012  17FA  00F6               	movwf	uart_wr_str@len
 17013  17FB  0830               	movf	lcd_ind@l_line,w
 17014  17FC  31AF  2710         	fcall	_uart_wr_str
 17015  17FE                     l721:
 17016  17FE  0064               	clrwdt	;# 
 17017  17FF  0008               	return
 17018  1800                     __end_of_lcd_ind:
 17019                           
 17020                           	psect	text43
 17021  2F10                     __ptext43:	
 17022 ;; *************** function _uart_wr_str *****************
 17023 ;; Defined at:
 17024 ;;		line 60 in file "uart.c"
 17025 ;; Parameters:    Size  Location     Type
 17026 ;;  lin             1    wreg     unsigned char 
 17027 ;;  col             1    3[COMMON] unsigned char 
 17028 ;;  str             2    4[COMMON] PTR unsigned char 
 17029 ;;		 -> STR_89(2), STR_88(2), STR_87(10), STR_86(10), 
 17030 ;;		 -> STR_85(10), STR_84(10), STR_83(2), STR_82(3), 
 17031 ;;		 -> STR_81(3), STR_80(3), STR_79(3), STR_78(3), 
 17032 ;;		 -> STR_77(2), STR_76(3), STR_75(3), STR_74(3), 
 17033 ;;		 -> STR_73(3), STR_72(3), STR_71(9), STR_70(9), 
 17034 ;;		 -> STR_69(9), STR_68(9), STR_67(9), STR_66(9), 
 17035 ;;		 -> STR_65(9), STR_64(9), STR_63(9), STR_62(9), 
 17036 ;;		 -> STR_61(9), STR_60(9), STR_59(9), STR_58(9), 
 17037 ;;		 -> STR_57(9), STR_56(9), STR_55(8), STR_54(8), 
 17038 ;;		 -> STR_53(8), STR_52(9), STR_51(9), STR_50(9), 
 17039 ;;		 -> STR_49(9), STR_48(9), STR_47(9), g_work_str_2(7), 
 17040 ;;		 -> STR_46(5), STR_45(5), STR_44(2), STR_43(9), 
 17041 ;;		 -> STR_42(9), STR_41(9), STR_40(11), STR_39(9), 
 17042 ;;		 -> STR_38(11), STR_37(9), STR_36(10), STR_35(8), 
 17043 ;;		 -> STR_34(2), STR_33(9), STR_32(9), STR_31(9), 
 17044 ;;		 -> STR_30(11), STR_29(9), STR_28(11), STR_27(9), 
 17045 ;;		 -> STR_26(11), STR_25(9), STR_24(10), STR_23(8), 
 17046 ;;		 -> STR_22(5), STR_21(5), STR_20(9), STR_19(9), 
 17047 ;;		 -> STR_18(9), STR_17(9), STR_16(2), STR_15(2), 
 17048 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
 17049 ;;		 -> STR_10(2), STR_9(2), STR_8(2), STR_7(2), 
 17050 ;;		 -> STR_6(2), STR_5(2), STR_4(2), STR_3(2), 
 17051 ;;		 -> STR_2(2), STR_1(2), 
 17052 ;;  len             1    6[COMMON] unsigned char 
 17053 ;; Auto vars:     Size  Location     Type
 17054 ;;  lin             1    3[BANK0 ] unsigned char 
 17055 ;;  i               1    4[BANK0 ] unsigned char 
 17056 ;;  pos             1    5[BANK0 ] unsigned char 
 17057 ;; Return value:  Size  Location     Type
 17058 ;;                  1    wreg      void 
 17059 ;; Registers used:
 17060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 17061 ;; Tracked objects:
 17062 ;;		On entry : 1C/2
 17063 ;;		On exit  : 1F/3
 17064 ;;		Unchanged: 0/0
 17065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Totals:         4       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;Total ram usage:       10 bytes
 17071 ;; Hardware stack levels used: 1
 17072 ;; Hardware stack levels required when called: 2
 17073 ;; This function calls:
 17074 ;;		Nothing
 17075 ;; This function is called by:
 17076 ;;		_button_proc_test
 17077 ;;		_button_proc
 17078 ;;		_show_reset
 17079 ;;		_tune_btn_push
 17080 ;;		_lcd_prep
 17081 ;;		_lcd_swr
 17082 ;;		_show_pwr
 17083 ;;		_lcd_pwr
 17084 ;;		_lcd_ind
 17085 ;;		_Test_init
 17086 ;; This function uses a non-reentrant model
 17087 ;;
 17088                           
 17089  2F10                     _uart_wr_str:	
 17090                           ;psect for function _uart_wr_str
 17091                           
 17092                           
 17093                           ;incstack = 0
 17094                           ; Regs used in _uart_wr_str: [wreg-fsr1h+status,2+status,0+pclath]
 17095                           ;uart_wr_str@lin stored from wreg
 17096  2F10  0020               	movlb	0	; select bank0
 17097  2F11  00A3               	movwf	uart_wr_str@lin
 17098                           
 17099                           ;uart.c: 61:     char pos = lin * 16 + col;
 17100  2F12  0823               	movf	uart_wr_str@lin,w
 17101  2F13  00A0               	movwf	??_uart_wr_str
 17102  2F14  3003               	movlw	3
 17103  2F15                     u11105:
 17104  2F15  35A0               	lslf	??_uart_wr_str,f
 17105  2F16  3EFF               	addlw	-1
 17106  2F17  1D03               	skipz
 17107  2F18  2F15               	goto	u11105
 17108  2F19  3520               	lslf	??_uart_wr_str,w
 17109  2F1A  0773               	addwf	uart_wr_str@col,w
 17110  2F1B  00A1               	movwf	??_uart_wr_str+1
 17111  2F1C  0821               	movf	??_uart_wr_str+1,w
 17112  2F1D  00A5               	movwf	uart_wr_str@pos
 17113                           
 17114                           ;uart.c: 63:     if (pos >= 16) pos++;
 17115  2F1E  3010               	movlw	16
 17116  2F1F  0225               	subwf	uart_wr_str@pos,w
 17117  2F20  1C03               	skipc
 17118  2F21  2F26               	goto	l7590
 17119  2F22  3001               	movlw	1
 17120  2F23  00A0               	movwf	??_uart_wr_str
 17121  2F24  0820               	movf	??_uart_wr_str,w
 17122  2F25  07A5               	addwf	uart_wr_str@pos,f
 17123  2F26                     l7590:
 17124                           
 17125                           ;uart.c: 65:     for (uint8_t i = 0; i < len; i++) {
 17126  2F26  01A4               	clrf	uart_wr_str@i
 17127  2F27                     l7604:
 17128  2F27  0876               	movf	uart_wr_str@len,w
 17129  2F28  0224               	subwf	uart_wr_str@i,w
 17130  2F29  1803               	btfsc	3,0
 17131  2F2A  2F59               	goto	l909
 17132                           
 17133                           ;uart.c: 66:         if (pos == 16) {
 17134  2F2B  3010               	movlw	16
 17135  2F2C  0625               	xorwf	uart_wr_str@pos,w
 17136  2F2D  1D03               	btfss	3,2
 17137  2F2E  2F3C               	goto	l7598
 17138                           
 17139                           ;uart.c: 67:             buffer[pos++] = 9;
 17140  2F2F  3009               	movlw	9
 17141  2F30  00A0               	movwf	??_uart_wr_str
 17142  2F31  0825               	movf	uart_wr_str@pos,w
 17143  2F32  3E20               	addlw	(low (_buffer| (0+512)))& (0+255)
 17144  2F33  0086               	movwf	6
 17145  2F34  3002               	movlw	2	; select bank4/5
 17146  2F35  0087               	movwf	7
 17147  2F36  0820               	movf	??_uart_wr_str,w
 17148  2F37  0081               	movwf	1
 17149  2F38  3001               	movlw	1
 17150  2F39  00A0               	movwf	??_uart_wr_str
 17151  2F3A  0820               	movf	??_uart_wr_str,w
 17152  2F3B  07A5               	addwf	uart_wr_str@pos,f
 17153  2F3C                     l7598:
 17154                           
 17155                           ;uart.c: 69:         buffer[pos++] = str[i];
 17156  2F3C  0875               	movf	uart_wr_str@str+1,w
 17157  2F3D  00A1               	movwf	??_uart_wr_str+1
 17158  2F3E  0874               	movf	uart_wr_str@str,w
 17159  2F3F  00A0               	movwf	??_uart_wr_str
 17160  2F40  0824               	movf	uart_wr_str@i,w
 17161  2F41  0720               	addwf	??_uart_wr_str,w
 17162  2F42  0084               	movwf	4
 17163  2F43  0821               	movf	??_uart_wr_str+1,w
 17164  2F44  1803               	skipnc
 17165  2F45  0A21               	incf	??_uart_wr_str+1,w
 17166  2F46  0085               	movwf	5
 17167  2F47  0800               	movf	0,w	;code access
 17168  2F48  00A2               	movwf	??_uart_wr_str+2
 17169  2F49  0825               	movf	uart_wr_str@pos,w
 17170  2F4A  3E20               	addlw	(low (_buffer| (0+512)))& (0+255)
 17171  2F4B  0086               	movwf	6
 17172  2F4C  3002               	movlw	2	; select bank4/5
 17173  2F4D  0087               	movwf	7
 17174  2F4E  0822               	movf	??_uart_wr_str+2,w
 17175  2F4F  0081               	movwf	1
 17176  2F50  3001               	movlw	1
 17177  2F51  00A0               	movwf	??_uart_wr_str
 17178  2F52  0820               	movf	??_uart_wr_str,w
 17179  2F53  07A5               	addwf	uart_wr_str@pos,f
 17180                           
 17181                           ;uart.c: 70:     }
 17182  2F54  3001               	movlw	1
 17183  2F55  00A0               	movwf	??_uart_wr_str
 17184  2F56  0820               	movf	??_uart_wr_str,w
 17185  2F57  07A4               	addwf	uart_wr_str@i,f
 17186  2F58  2F27               	goto	l7604
 17187  2F59                     l909:
 17188                           
 17189                           ;uart.c: 71:     refresh = 1;
 17190  2F59  0023               	movlb	3	; select bank3
 17191  2F5A  01CA               	clrf	_refresh^(0+384)
 17192  2F5B  0ACA               	incf	_refresh^(0+384),f
 17193  2F5C  0008               	return
 17194  2F5D                     __end_of_uart_wr_str:
 17195                           
 17196                           	psect	text44
 17197  21B9                     __ptext44:	
 17198 ;; *************** function _IntToStr *****************
 17199 ;; Defined at:
 17200 ;;		line 138 in file "cross_compiler.c"
 17201 ;; Parameters:    Size  Location     Type
 17202 ;;  number          2    4[BANK0 ] int 
 17203 ;;  output          1    6[BANK0 ] PTR unsigned char 
 17204 ;;		 -> g_work_str(7), 
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;  p               1    9[BANK0 ] PTR unsigned char 
 17207 ;;		 -> g_work_str(7), 
 17208 ;;  loopcounter     1    8[BANK0 ] unsigned char 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;                  1    wreg      void 
 17211 ;; Registers used:
 17212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17213 ;; Tracked objects:
 17214 ;;		On entry : 1F/0
 17215 ;;		On exit  : 1F/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17218 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17222 ;;Total ram usage:        6 bytes
 17223 ;; Hardware stack levels used: 1
 17224 ;; Hardware stack levels required when called: 3
 17225 ;; This function calls:
 17226 ;;		___awdiv
 17227 ;;		___awmod
 17228 ;; This function is called by:
 17229 ;;		_lcd_swr
 17230 ;;		_show_pwr
 17231 ;;		_lcd_ind
 17232 ;; This function uses a non-reentrant model
 17233 ;;
 17234                           
 17235  21B9                     _IntToStr:	
 17236                           ;psect for function _IntToStr
 17237                           
 17238                           
 17239                           ;cross_compiler.c: 138: void IntToStr(int number, char *output);cross_compiler.c: 139: {
      +                          ;cross_compiler.c: 140:   char *p = output;
 17240                           
 17241                           ;incstack = 0
 17242                           ; Regs used in _IntToStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17243  21B9  0826               	movf	IntToStr@output,w
 17244  21BA  00A7               	movwf	??_IntToStr
 17245  21BB  0827               	movf	??_IntToStr,w
 17246  21BC  00A9               	movwf	IntToStr@p
 17247                           
 17248                           ;cross_compiler.c: 141:   char loopcounter = 0;
 17249  21BD  01A8               	clrf	IntToStr@loopcounter
 17250  21BE                     l7610:
 17251                           
 17252                           ;cross_compiler.c: 143:   {;cross_compiler.c: 144:     *p = ' ';
 17253  21BE  3020               	movlw	32
 17254  21BF  00A7               	movwf	??_IntToStr
 17255  21C0  0829               	movf	IntToStr@p,w
 17256  21C1  0086               	movwf	6
 17257  21C2  3001               	movlw	1	; select bank2/3
 17258  21C3  0087               	movwf	7
 17259  21C4  0827               	movf	??_IntToStr,w
 17260  21C5  0081               	movwf	1
 17261                           
 17262                           ;cross_compiler.c: 145:     p++;
 17263  21C6  3001               	movlw	1
 17264  21C7  00A7               	movwf	??_IntToStr
 17265  21C8  0827               	movf	??_IntToStr,w
 17266  21C9  07A9               	addwf	IntToStr@p,f
 17267                           
 17268                           ;cross_compiler.c: 146:     loopcounter++;
 17269  21CA  3001               	movlw	1
 17270  21CB  00A7               	movwf	??_IntToStr
 17271  21CC  0827               	movf	??_IntToStr,w
 17272  21CD  07A8               	addwf	IntToStr@loopcounter,f
 17273                           
 17274                           ;cross_compiler.c: 147:   } while (loopcounter < 6);
 17275  21CE  3006               	movlw	6
 17276  21CF  0228               	subwf	IntToStr@loopcounter,w
 17277  21D0  1C03               	skipc
 17278  21D1  29BE               	goto	l7610
 17279                           
 17280                           ;cross_compiler.c: 148:   p = output + 5;
 17281  21D2  0826               	movf	IntToStr@output,w
 17282  21D3  3E05               	addlw	5
 17283  21D4  00A7               	movwf	??_IntToStr
 17284  21D5  0827               	movf	??_IntToStr,w
 17285  21D6  00A9               	movwf	IntToStr@p
 17286                           
 17287                           ;cross_compiler.c: 149:   if (number >= 0)
 17288  21D7  1BA5               	btfsc	IntToStr@number+1,7
 17289  21D8  2A07               	goto	l7632
 17290  21D9                     l7622:
 17291                           
 17292                           ;cross_compiler.c: 152:     {;cross_compiler.c: 153:       *p = '0' + (number % 10);
 17293  21D9  300A               	movlw	10
 17294  21DA  00F3               	movwf	___awmod@divisor
 17295  21DB  3000               	movlw	0
 17296  21DC  00F4               	movwf	___awmod@divisor+1
 17297  21DD  0825               	movf	IntToStr@number+1,w
 17298  21DE  00F6               	movwf	___awmod@dividend+1
 17299  21DF  0824               	movf	IntToStr@number,w
 17300  21E0  00F5               	movwf	___awmod@dividend
 17301  21E1  31AD  25F1  31A1   	fcall	___awmod
 17302  21E4  0873               	movf	?___awmod,w
 17303  21E5  3E30               	addlw	48
 17304  21E6  00A7               	movwf	??_IntToStr
 17305  21E7  0829               	movf	IntToStr@p,w
 17306  21E8  0086               	movwf	6
 17307  21E9  3001               	movlw	1	; select bank2/3
 17308  21EA  0087               	movwf	7
 17309  21EB  0827               	movf	??_IntToStr,w
 17310  21EC  0081               	movwf	1
 17311                           
 17312                           ;cross_compiler.c: 154:       p--;
 17313  21ED  3001               	movlw	1
 17314  21EE  02A9               	subwf	IntToStr@p,f
 17315                           
 17316                           ;cross_compiler.c: 155:       number /= 10;
 17317  21EF  300A               	movlw	10
 17318  21F0  00F3               	movwf	___awdiv@divisor
 17319  21F1  3000               	movlw	0
 17320  21F2  00F4               	movwf	___awdiv@divisor+1
 17321  21F3  0825               	movf	IntToStr@number+1,w
 17322  21F4  00F6               	movwf	___awdiv@dividend+1
 17323  21F5  0824               	movf	IntToStr@number,w
 17324  21F6  00F5               	movwf	___awdiv@dividend
 17325  21F7  31AF  27AE  31A1   	fcall	___awdiv
 17326  21FA  0874               	movf	?___awdiv+1,w
 17327  21FB  00A5               	movwf	IntToStr@number+1
 17328  21FC  0873               	movf	?___awdiv,w
 17329  21FD  00A4               	movwf	IntToStr@number
 17330                           
 17331                           ;cross_compiler.c: 156:       loopcounter++;
 17332  21FE  3001               	movlw	1
 17333  21FF  00A7               	movwf	??_IntToStr
 17334  2200  0827               	movf	??_IntToStr,w
 17335  2201  07A8               	addwf	IntToStr@loopcounter,f
 17336                           
 17337                           ;cross_compiler.c: 157:     } while (number != 0);
 17338  2202  0824               	movf	IntToStr@number,w
 17339  2203  0425               	iorwf	IntToStr@number+1,w
 17340  2204  1903               	btfsc	3,2
 17341  2205  0008               	return
 17342  2206  29D9               	goto	l7622
 17343  2207                     l7632:
 17344                           
 17345                           ;cross_compiler.c: 162:     {;cross_compiler.c: 163:       *p = '0' - (number % 10);
 17346  2207  300A               	movlw	10
 17347  2208  00F3               	movwf	___awmod@divisor
 17348  2209  3000               	movlw	0
 17349  220A  00F4               	movwf	___awmod@divisor+1
 17350  220B  0825               	movf	IntToStr@number+1,w
 17351  220C  00F6               	movwf	___awmod@dividend+1
 17352  220D  0824               	movf	IntToStr@number,w
 17353  220E  00F5               	movwf	___awmod@dividend
 17354  220F  31AD  25F1  31A1   	fcall	___awmod
 17355  2212  0873               	movf	?___awmod,w
 17356  2213  3C30               	sublw	48
 17357  2214  00A7               	movwf	??_IntToStr
 17358  2215  0829               	movf	IntToStr@p,w
 17359  2216  0086               	movwf	6
 17360  2217  3001               	movlw	1	; select bank2/3
 17361  2218  0087               	movwf	7
 17362  2219  0827               	movf	??_IntToStr,w
 17363  221A  0081               	movwf	1
 17364                           
 17365                           ;cross_compiler.c: 164:       p--;
 17366  221B  3001               	movlw	1
 17367  221C  02A9               	subwf	IntToStr@p,f
 17368                           
 17369                           ;cross_compiler.c: 165:       number /= 10;
 17370  221D  300A               	movlw	10
 17371  221E  00F3               	movwf	___awdiv@divisor
 17372  221F  3000               	movlw	0
 17373  2220  00F4               	movwf	___awdiv@divisor+1
 17374  2221  0825               	movf	IntToStr@number+1,w
 17375  2222  00F6               	movwf	___awdiv@dividend+1
 17376  2223  0824               	movf	IntToStr@number,w
 17377  2224  00F5               	movwf	___awdiv@dividend
 17378  2225  31AF  27AE  31A1   	fcall	___awdiv
 17379  2228  0874               	movf	?___awdiv+1,w
 17380  2229  00A5               	movwf	IntToStr@number+1
 17381  222A  0873               	movf	?___awdiv,w
 17382  222B  00A4               	movwf	IntToStr@number
 17383                           
 17384                           ;cross_compiler.c: 166:     } while (number != 0);
 17385  222C  0824               	movf	IntToStr@number,w
 17386  222D  0425               	iorwf	IntToStr@number+1,w
 17387  222E  1D03               	btfss	3,2
 17388  222F  2A07               	goto	l7632
 17389                           
 17390                           ;cross_compiler.c: 167:     *p = '-';
 17391  2230  302D               	movlw	45
 17392  2231  00A7               	movwf	??_IntToStr
 17393  2232  0829               	movf	IntToStr@p,w
 17394  2233  0086               	movwf	6
 17395  2234  3001               	movlw	1	; select bank2/3
 17396  2235  0087               	movwf	7
 17397  2236  0827               	movf	??_IntToStr,w
 17398  2237  0081               	movwf	1
 17399  2238  0008               	return
 17400  2239                     __end_of_IntToStr:
 17401                           
 17402                           	psect	text45
 17403  2DF1                     __ptext45:	
 17404 ;; *************** function ___awmod *****************
 17405 ;; Defined at:
 17406 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awmod.c"
 17407 ;; Parameters:    Size  Location     Type
 17408 ;;  divisor         2    3[COMMON] int 
 17409 ;;  dividend        2    5[COMMON] int 
 17410 ;; Auto vars:     Size  Location     Type
 17411 ;;  sign            1    1[BANK0 ] unsigned char 
 17412 ;;  counter         1    0[BANK0 ] unsigned char 
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  2    3[COMMON] int 
 17415 ;; Registers used:
 17416 ;;		wreg, status,2, status,0
 17417 ;; Tracked objects:
 17418 ;;		On entry : 1F/0
 17419 ;;		On exit  : 1F/0
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17422 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17424 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17425 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17426 ;;Total ram usage:        7 bytes
 17427 ;; Hardware stack levels used: 1
 17428 ;; Hardware stack levels required when called: 2
 17429 ;; This function calls:
 17430 ;;		Nothing
 17431 ;; This function is called by:
 17432 ;;		_IntToStr
 17433 ;; This function uses a non-reentrant model
 17434 ;;
 17435                           
 17436  2DF1                     ___awmod:	
 17437                           ;psect for function ___awmod
 17438                           
 17439                           
 17440                           ;incstack = 0
 17441                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17442  2DF1  01A1               	clrf	___awmod@sign
 17443  2DF2  1FF6               	btfss	___awmod@dividend+1,7
 17444  2DF3  2DFB               	goto	l7534
 17445  2DF4  09F5               	comf	___awmod@dividend,f
 17446  2DF5  09F6               	comf	___awmod@dividend+1,f
 17447  2DF6  0AF5               	incf	___awmod@dividend,f
 17448  2DF7  1903               	skipnz
 17449  2DF8  0AF6               	incf	___awmod@dividend+1,f
 17450  2DF9  01A1               	clrf	___awmod@sign
 17451  2DFA  0AA1               	incf	___awmod@sign,f
 17452  2DFB                     l7534:
 17453  2DFB  1FF4               	btfss	___awmod@divisor+1,7
 17454  2DFC  2E02               	goto	l7538
 17455  2DFD  09F3               	comf	___awmod@divisor,f
 17456  2DFE  09F4               	comf	___awmod@divisor+1,f
 17457  2DFF  0AF3               	incf	___awmod@divisor,f
 17458  2E00  1903               	skipnz
 17459  2E01  0AF4               	incf	___awmod@divisor+1,f
 17460  2E02                     l7538:
 17461  2E02  0873               	movf	___awmod@divisor,w
 17462  2E03  0474               	iorwf	___awmod@divisor+1,w
 17463  2E04  1903               	btfsc	3,2
 17464  2E05  2E29               	goto	l7556
 17465  2E06  01A0               	clrf	___awmod@counter
 17466  2E07  0AA0               	incf	___awmod@counter,f
 17467  2E08                     l7546:
 17468  2E08  1BF4               	btfsc	___awmod@divisor+1,7
 17469  2E09  2E14               	goto	l7548
 17470  2E0A  3001               	movlw	1
 17471  2E0B                     u11025:
 17472  2E0B  35F3               	lslf	___awmod@divisor,f
 17473  2E0C  0DF4               	rlf	___awmod@divisor+1,f
 17474  2E0D  0B89               	decfsz	9,f
 17475  2E0E  2E0B               	goto	u11025
 17476  2E0F  3001               	movlw	1
 17477  2E10  00F7               	movwf	??___awmod
 17478  2E11  0877               	movf	??___awmod,w
 17479  2E12  07A0               	addwf	___awmod@counter,f
 17480  2E13  2E08               	goto	l7546
 17481  2E14                     l7548:
 17482  2E14  0874               	movf	___awmod@divisor+1,w
 17483  2E15  0276               	subwf	___awmod@dividend+1,w
 17484  2E16  1D03               	skipz
 17485  2E17  2E1A               	goto	u11045
 17486  2E18  0873               	movf	___awmod@divisor,w
 17487  2E19  0275               	subwf	___awmod@dividend,w
 17488  2E1A                     u11045:
 17489  2E1A  1C03               	skipc
 17490  2E1B  2E20               	goto	l7552
 17491  2E1C  0873               	movf	___awmod@divisor,w
 17492  2E1D  02F5               	subwf	___awmod@dividend,f
 17493  2E1E  0874               	movf	___awmod@divisor+1,w
 17494  2E1F  3BF6               	subwfb	___awmod@dividend+1,f
 17495  2E20                     l7552:
 17496  2E20  3001               	movlw	1
 17497  2E21                     u11055:
 17498  2E21  36F4               	lsrf	___awmod@divisor+1,f
 17499  2E22  0CF3               	rrf	___awmod@divisor,f
 17500  2E23  0B89               	decfsz	9,f
 17501  2E24  2E21               	goto	u11055
 17502  2E25  3001               	movlw	1
 17503  2E26  02A0               	subwf	___awmod@counter,f
 17504  2E27  1D03               	btfss	3,2
 17505  2E28  2E14               	goto	l7548
 17506  2E29                     l7556:
 17507  2E29  0821               	movf	___awmod@sign,w
 17508  2E2A  1903               	btfsc	3,2
 17509  2E2B  2E31               	goto	l7560
 17510  2E2C  09F5               	comf	___awmod@dividend,f
 17511  2E2D  09F6               	comf	___awmod@dividend+1,f
 17512  2E2E  0AF5               	incf	___awmod@dividend,f
 17513  2E2F  1903               	skipnz
 17514  2E30  0AF6               	incf	___awmod@dividend+1,f
 17515  2E31                     l7560:
 17516  2E31  0876               	movf	___awmod@dividend+1,w
 17517  2E32  00F4               	movwf	?___awmod+1
 17518  2E33  0875               	movf	___awmod@dividend,w
 17519  2E34  00F3               	movwf	?___awmod
 17520  2E35  0008               	return
 17521  2E36                     __end_of___awmod:
 17522                           
 17523                           	psect	text46
 17524  2FAE                     __ptext46:	
 17525 ;; *************** function ___awdiv *****************
 17526 ;; Defined at:
 17527 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
 17528 ;; Parameters:    Size  Location     Type
 17529 ;;  divisor         2    3[COMMON] int 
 17530 ;;  dividend        2    5[COMMON] int 
 17531 ;; Auto vars:     Size  Location     Type
 17532 ;;  quotient        2    2[BANK0 ] int 
 17533 ;;  sign            1    1[BANK0 ] unsigned char 
 17534 ;;  counter         1    0[BANK0 ] unsigned char 
 17535 ;; Return value:  Size  Location     Type
 17536 ;;                  2    3[COMMON] int 
 17537 ;; Registers used:
 17538 ;;		wreg, status,2, status,0
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/2
 17541 ;;		On exit  : 1F/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17545 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17548 ;;Total ram usage:        9 bytes
 17549 ;; Hardware stack levels used: 1
 17550 ;; Hardware stack levels required when called: 2
 17551 ;; This function calls:
 17552 ;;		Nothing
 17553 ;; This function is called by:
 17554 ;;		_coarse_cap
 17555 ;;		_coarse_tune
 17556 ;;		_tune_btn_push
 17557 ;;		_lcd_pwr
 17558 ;;		_IntToStr
 17559 ;; This function uses a non-reentrant model
 17560 ;;
 17561                           
 17562  2FAE                     ___awdiv:	
 17563                           ;psect for function ___awdiv
 17564                           
 17565                           
 17566                           ;incstack = 0
 17567                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17568  2FAE  0020               	movlb	0	; select bank0
 17569  2FAF  01A1               	clrf	___awdiv@sign
 17570  2FB0  1FF4               	btfss	___awdiv@divisor+1,7
 17571  2FB1  2FB9               	goto	l4576
 17572  2FB2  09F3               	comf	___awdiv@divisor,f
 17573  2FB3  09F4               	comf	___awdiv@divisor+1,f
 17574  2FB4  0AF3               	incf	___awdiv@divisor,f
 17575  2FB5  1903               	skipnz
 17576  2FB6  0AF4               	incf	___awdiv@divisor+1,f
 17577  2FB7  01A1               	clrf	___awdiv@sign
 17578  2FB8  0AA1               	incf	___awdiv@sign,f
 17579  2FB9                     l4576:
 17580  2FB9  1FF6               	btfss	___awdiv@dividend+1,7
 17581  2FBA  2FC4               	goto	l4582
 17582  2FBB  09F5               	comf	___awdiv@dividend,f
 17583  2FBC  09F6               	comf	___awdiv@dividend+1,f
 17584  2FBD  0AF5               	incf	___awdiv@dividend,f
 17585  2FBE  1903               	skipnz
 17586  2FBF  0AF6               	incf	___awdiv@dividend+1,f
 17587  2FC0  3001               	movlw	1
 17588  2FC1  00F7               	movwf	??___awdiv
 17589  2FC2  0877               	movf	??___awdiv,w
 17590  2FC3  06A1               	xorwf	___awdiv@sign,f
 17591  2FC4                     l4582:
 17592  2FC4  01A2               	clrf	___awdiv@quotient
 17593  2FC5  01A3               	clrf	___awdiv@quotient+1
 17594  2FC6  0873               	movf	___awdiv@divisor,w
 17595  2FC7  0474               	iorwf	___awdiv@divisor+1,w
 17596  2FC8  1903               	btfsc	3,2
 17597  2FC9  2FF3               	goto	l4604
 17598  2FCA  01A0               	clrf	___awdiv@counter
 17599  2FCB  0AA0               	incf	___awdiv@counter,f
 17600  2FCC                     l4592:
 17601  2FCC  1BF4               	btfsc	___awdiv@divisor+1,7
 17602  2FCD  2FD8               	goto	l4594
 17603  2FCE  3001               	movlw	1
 17604  2FCF                     u5535:
 17605  2FCF  35F3               	lslf	___awdiv@divisor,f
 17606  2FD0  0DF4               	rlf	___awdiv@divisor+1,f
 17607  2FD1  0B89               	decfsz	9,f
 17608  2FD2  2FCF               	goto	u5535
 17609  2FD3  3001               	movlw	1
 17610  2FD4  00F7               	movwf	??___awdiv
 17611  2FD5  0877               	movf	??___awdiv,w
 17612  2FD6  07A0               	addwf	___awdiv@counter,f
 17613  2FD7  2FCC               	goto	l4592
 17614  2FD8                     l4594:
 17615  2FD8  3001               	movlw	1
 17616  2FD9                     u5555:
 17617  2FD9  35A2               	lslf	___awdiv@quotient,f
 17618  2FDA  0DA3               	rlf	___awdiv@quotient+1,f
 17619  2FDB  0B89               	decfsz	9,f
 17620  2FDC  2FD9               	goto	u5555
 17621  2FDD  0874               	movf	___awdiv@divisor+1,w
 17622  2FDE  0276               	subwf	___awdiv@dividend+1,w
 17623  2FDF  1D03               	skipz
 17624  2FE0  2FE3               	goto	u5565
 17625  2FE1  0873               	movf	___awdiv@divisor,w
 17626  2FE2  0275               	subwf	___awdiv@dividend,w
 17627  2FE3                     u5565:
 17628  2FE3  1C03               	skipc
 17629  2FE4  2FEA               	goto	l4600
 17630  2FE5  0873               	movf	___awdiv@divisor,w
 17631  2FE6  02F5               	subwf	___awdiv@dividend,f
 17632  2FE7  0874               	movf	___awdiv@divisor+1,w
 17633  2FE8  3BF6               	subwfb	___awdiv@dividend+1,f
 17634  2FE9  1422               	bsf	___awdiv@quotient,0
 17635  2FEA                     l4600:
 17636  2FEA  3001               	movlw	1
 17637  2FEB                     u5575:
 17638  2FEB  36F4               	lsrf	___awdiv@divisor+1,f
 17639  2FEC  0CF3               	rrf	___awdiv@divisor,f
 17640  2FED  0B89               	decfsz	9,f
 17641  2FEE  2FEB               	goto	u5575
 17642  2FEF  3001               	movlw	1
 17643  2FF0  02A0               	subwf	___awdiv@counter,f
 17644  2FF1  1D03               	btfss	3,2
 17645  2FF2  2FD8               	goto	l4594
 17646  2FF3                     l4604:
 17647  2FF3  0821               	movf	___awdiv@sign,w
 17648  2FF4  1903               	btfsc	3,2
 17649  2FF5  2FFB               	goto	l4608
 17650  2FF6  09A2               	comf	___awdiv@quotient,f
 17651  2FF7  09A3               	comf	___awdiv@quotient+1,f
 17652  2FF8  0AA2               	incf	___awdiv@quotient,f
 17653  2FF9  1903               	skipnz
 17654  2FFA  0AA3               	incf	___awdiv@quotient+1,f
 17655  2FFB                     l4608:
 17656  2FFB  0823               	movf	___awdiv@quotient+1,w
 17657  2FFC  00F4               	movwf	?___awdiv+1
 17658  2FFD  0822               	movf	___awdiv@quotient,w
 17659  2FFE  00F3               	movwf	?___awdiv
 17660  2FFF  0008               	return
 17661  3000                     __end_of___awdiv:
 17662                           
 17663                           	psect	text47
 17664  1804                     __ptext47:	
 17665 ;; *************** function _eeprom_write *****************
 17666 ;; Defined at:
 17667 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eewrite.c"
 17668 ;; Parameters:    Size  Location     Type
 17669 ;;  addr            1    wreg     unsigned char 
 17670 ;;  value           1    4[BANK0 ] unsigned char 
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;  addr            1    7[BANK0 ] unsigned char 
 17673 ;; Return value:  Size  Location     Type
 17674 ;;                  1    wreg      void 
 17675 ;; Registers used:
 17676 ;;		wreg, status,2, status,0
 17677 ;; Tracked objects:
 17678 ;;		On entry : 1F/0
 17679 ;;		On exit  : 1F/3
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        4 bytes
 17687 ;; Hardware stack levels used: 1
 17688 ;; Hardware stack levels required when called: 2
 17689 ;; This function calls:
 17690 ;;		Nothing
 17691 ;; This function is called by:
 17692 ;;		_button_proc
 17693 ;;		_show_reset
 17694 ;;		_tune_btn_push
 17695 ;;		_Test_init
 17696 ;; This function uses a non-reentrant model
 17697 ;;
 17698                           
 17699  1804                     _eeprom_write:	
 17700                           ;psect for function _eeprom_write
 17701                           
 17702                           
 17703                           ;incstack = 0
 17704                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
 17705                           ;eeprom_write@addr stored from wreg
 17706  1804  00A7               	movwf	eeprom_write@addr
 17707  1805                     l1112:	
 17708                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__eewrite.c: 6: eeprom_write(u
      +                          nsigned char addr, unsigned char value);C:\Program Files\Microchip\xc8\v2.36\pic\sources
      +                          \c99\pic\__eewrite.c: 7: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\pic\__ee
      +                          write.c: 8:  do{ while (EECON1bits.WR) { continue; } EEADR = (addr); EEDATA = (value); E
      +                          ECON1 &= 0x3F; STATUSbits.CARRY = 0; if (INTCONbits.GIE) { STATUSbits.CARRY = 1; } INTCO
      +                          Nbits.GIE = 0; EECON1bits.WREN = 1; EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; EEC
      +                          ON1bits.WREN = 0; if (STATUSbits.CARRY) { INTCONbits.GIE = 1; } } while (0);
 17709                           
 17710  1805  0023               	movlb	3	; select bank3
 17711  1806  1895               	btfsc	21,1	;volsfr
 17712  1807  2805               	goto	l1112
 17713  1808  0020               	movlb	0	; select bank0
 17714  1809  0827               	movf	eeprom_write@addr,w
 17715  180A  00A5               	movwf	??_eeprom_write
 17716  180B  01A6               	clrf	??_eeprom_write+1
 17717  180C  0825               	movf	??_eeprom_write,w
 17718  180D  0023               	movlb	3	; select bank3
 17719  180E  0091               	movwf	17	;volatile
 17720  180F  0020               	movlb	0	; select bank0
 17721  1810  0826               	movf	??_eeprom_write+1,w
 17722  1811  0023               	movlb	3	; select bank3
 17723  1812  0092               	movwf	18	;volatile
 17724  1813  0020               	movlb	0	; select bank0
 17725  1814  0824               	movf	eeprom_write@value,w
 17726  1815  0023               	movlb	3	; select bank3
 17727  1816  0093               	movwf	19	;volatile
 17728  1817  303F               	movlw	63
 17729  1818  0020               	movlb	0	; select bank0
 17730  1819  00A5               	movwf	??_eeprom_write
 17731  181A  0825               	movf	??_eeprom_write,w
 17732  181B  0023               	movlb	3	; select bank3
 17733  181C  0595               	andwf	21,f	;volsfr
 17734  181D  1003               	bcf	3,0	;volatile
 17735  181E  1B8B               	btfsc	11,7	;volatile
 17736  181F  1403               	bsf	3,0	;volatile
 17737  1820  138B               	bcf	11,7	;volatile
 17738  1821  1515               	bsf	21,2	;volsfr
 17739  1822  3055               	movlw	85
 17740  1823  0096               	movwf	22	;volsfr
 17741  1824  30AA               	movlw	170
 17742  1825  0096               	movwf	22	;volsfr
 17743  1826  1495               	bsf	21,1	;volsfr
 17744  1827  1115               	bcf	21,2	;volsfr
 17745  1828  1C03               	btfss	3,0	;volatile
 17746  1829  0008               	return
 17747  182A  178B               	bsf	11,7	;volatile
 17748  182B  0008               	return
 17749  182C                     __end_of_eeprom_write:
 17750                           
 17751                           	psect	text48
 17752  2CE8                     __ptext48:	
 17753 ;; *************** function _atu_reset *****************
 17754 ;; Defined at:
 17755 ;;		line 290 in file "./main.h"
 17756 ;; Parameters:    Size  Location     Type
 17757 ;;		None
 17758 ;; Auto vars:     Size  Location     Type
 17759 ;;		None
 17760 ;; Return value:  Size  Location     Type
 17761 ;;                  1    wreg      void 
 17762 ;; Registers used:
 17763 ;;		wreg, status,2, status,0, pclath, cstack
 17764 ;; Tracked objects:
 17765 ;;		On entry : 0/2
 17766 ;;		On exit  : 0/0
 17767 ;;		Unchanged: 0/0
 17768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;Total ram usage:        0 bytes
 17774 ;; Hardware stack levels used: 1
 17775 ;; Hardware stack levels required when called: 5
 17776 ;; This function calls:
 17777 ;;		_Vdelay_ms
 17778 ;;		_set_cap
 17779 ;;		_set_ind
 17780 ;; This function is called by:
 17781 ;;		_sub_tune
 17782 ;;		_tune
 17783 ;;		_show_reset
 17784 ;;		_Test_init
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788  2CE8                     _atu_reset:	
 17789                           ;psect for function _atu_reset
 17790                           
 17791                           
 17792                           ;./main.h: 291:     g_c_ind = 0;
 17793                           
 17794                           ;incstack = 0
 17795                           ; Regs used in _atu_reset: [wreg+status,2+status,0+pclath+cstack]
 17796  2CE8  0022               	movlb	2	; select bank2
 17797  2CE9  01BC               	clrf	_g_c_ind^(0+256)
 17798                           
 17799                           ;./main.h: 292:     g_c_cap = 0;
 17800  2CEA  01FA               	clrf	_g_c_cap
 17801                           
 17802                           ;./main.h: 293:     set_ind(g_c_ind);
 17803  2CEB  083C               	movf	_g_c_ind^(0+256),w
 17804  2CEC  31A2  22BA  31AC   	fcall	_set_ind
 17805                           
 17806                           ;./main.h: 294:     set_cap(g_c_cap);
 17807  2CEF  087A               	movf	_g_c_cap,w
 17808  2CF0  31AE  2636  31AC   	fcall	_set_cap
 17809                           
 17810                           ;./main.h: 295:     Vdelay_ms(e_i_ms_Rel_Del);
 17811  2CF3  0022               	movlb	2	; select bank2
 17812  2CF4  0823               	movf	(_e_i_ms_Rel_Del+1)^(0+256),w
 17813  2CF5  0020               	movlb	0	; select bank0
 17814  2CF6  00A1               	movwf	Vdelay_ms@time_in_ms+1
 17815  2CF7  0022               	movlb	2	; select bank2
 17816  2CF8  0822               	movf	_e_i_ms_Rel_Del^(0+256),w
 17817  2CF9  0020               	movlb	0	; select bank0
 17818  2CFA  00A0               	movwf	Vdelay_ms@time_in_ms
 17819  2CFB  31AC  2485         	fcall	_Vdelay_ms
 17820  2CFD  0008               	return
 17821  2CFE                     __end_of_atu_reset:
 17822                           
 17823                           	psect	text49
 17824  22BA                     __ptext49:	
 17825 ;; *************** function _set_ind *****************
 17826 ;; Defined at:
 17827 ;;		line 244 in file "./main.h"
 17828 ;; Parameters:    Size  Location     Type
 17829 ;;  Ind             1    wreg     unsigned char 
 17830 ;; Auto vars:     Size  Location     Type
 17831 ;;  Ind             1    3[BANK0 ] unsigned char 
 17832 ;;  Indbits         1    4[BANK0 ] struct .
 17833 ;; Return value:  Size  Location     Type
 17834 ;;                  1    wreg      void 
 17835 ;; Registers used:
 17836 ;;		wreg, status,2, status,0, pclath, cstack
 17837 ;; Tracked objects:
 17838 ;;		On entry : 1D/2
 17839 ;;		On exit  : 0/0
 17840 ;;		Unchanged: 0/0
 17841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;Total ram usage:        3 bytes
 17847 ;; Hardware stack levels used: 1
 17848 ;; Hardware stack levels required when called: 4
 17849 ;; This function calls:
 17850 ;;		_Vdelay_ms
 17851 ;; This function is called by:
 17852 ;;		_atu_reset
 17853 ;;		_coarse_tune
 17854 ;;		_sharp_ind
 17855 ;;		_sub_tune
 17856 ;;		_main
 17857 ;;		_button_proc_test
 17858 ;;		_button_proc
 17859 ;; This function uses a non-reentrant model
 17860 ;;
 17861                           
 17862  22BA                     _set_ind:	
 17863                           ;psect for function _set_ind
 17864                           
 17865                           
 17866                           ;incstack = 0
 17867                           ; Regs used in _set_ind: [wreg+status,2+status,0+pclath+cstack]
 17868                           ;set_ind@Ind stored from wreg
 17869  22BA  0020               	movlb	0	; select bank0
 17870  22BB  00A3               	movwf	set_ind@Ind
 17871                           
 17872                           ;./main.h: 245:     charbits Indbits;;./main.h: 246:     Indbits.bytes = Ind;
 17873  22BC  0823               	movf	set_ind@Ind,w
 17874  22BD  00A2               	movwf	??_set_ind
 17875  22BE  0822               	movf	??_set_ind,w
 17876  22BF  00A4               	movwf	set_ind@Indbits
 17877                           
 17878                           ;./main.h: 248:     if (e_c_b_L_invert == 0) {
 17879  22C0  0022               	movlb	2	; select bank2
 17880  22C1  0833               	movf	_e_c_b_L_invert^(0+256),w
 17881  22C2  1D03               	btfss	3,2
 17882  22C3  2AF8               	goto	l8294
 17883                           
 17884                           ;./main.h: 249:         LATBbits.LATB3 = Indbits.bits.B0;
 17885  22C4  0020               	movlb	0	; select bank0
 17886  22C5  1C24               	btfss	set_ind@Indbits,0
 17887  22C6  2ACA               	goto	u12400
 17888  22C7  0022               	movlb	2	; select bank2
 17889  22C8  158D               	bsf	13,3	;volatile
 17890  22C9  2ACC               	goto	u12414
 17891  22CA                     u12400:
 17892  22CA  0022               	movlb	2	; select bank2
 17893  22CB  118D               	bcf	13,3	;volatile
 17894  22CC                     u12414:
 17895                           
 17896                           ;./main.h: 250:         LATAbits.LATA2 = Indbits.bits.B1;
 17897  22CC  0020               	movlb	0	; select bank0
 17898  22CD  1CA4               	btfss	set_ind@Indbits,1
 17899  22CE  2AD2               	goto	u12420
 17900  22CF  0022               	movlb	2	; select bank2
 17901  22D0  150C               	bsf	12,2	;volatile
 17902  22D1  2AD4               	goto	u12434
 17903  22D2                     u12420:
 17904  22D2  0022               	movlb	2	; select bank2
 17905  22D3  110C               	bcf	12,2	;volatile
 17906  22D4                     u12434:
 17907                           
 17908                           ;./main.h: 251:         LATBbits.LATB4 = Indbits.bits.B2;
 17909  22D4  0020               	movlb	0	; select bank0
 17910  22D5  1D24               	btfss	set_ind@Indbits,2
 17911  22D6  2ADA               	goto	u12440
 17912  22D7  0022               	movlb	2	; select bank2
 17913  22D8  160D               	bsf	13,4	;volatile
 17914  22D9  2ADC               	goto	u12454
 17915  22DA                     u12440:
 17916  22DA  0022               	movlb	2	; select bank2
 17917  22DB  120D               	bcf	13,4	;volatile
 17918  22DC                     u12454:
 17919                           
 17920                           ;./main.h: 252:         LATAbits.LATA3 = Indbits.bits.B3;
 17921  22DC  0020               	movlb	0	; select bank0
 17922  22DD  1DA4               	btfss	set_ind@Indbits,3
 17923  22DE  2AE2               	goto	u12460
 17924  22DF  0022               	movlb	2	; select bank2
 17925  22E0  158C               	bsf	12,3	;volatile
 17926  22E1  2AE4               	goto	u12474
 17927  22E2                     u12460:
 17928  22E2  0022               	movlb	2	; select bank2
 17929  22E3  118C               	bcf	12,3	;volatile
 17930  22E4                     u12474:
 17931                           
 17932                           ;./main.h: 253:         LATBbits.LATB5 = Indbits.bits.B4;
 17933  22E4  0020               	movlb	0	; select bank0
 17934  22E5  1E24               	btfss	set_ind@Indbits,4
 17935  22E6  2AEA               	goto	u12480
 17936  22E7  0022               	movlb	2	; select bank2
 17937  22E8  168D               	bsf	13,5	;volatile
 17938  22E9  2AEC               	goto	u12494
 17939  22EA                     u12480:
 17940  22EA  0022               	movlb	2	; select bank2
 17941  22EB  128D               	bcf	13,5	;volatile
 17942  22EC                     u12494:
 17943                           
 17944                           ;./main.h: 254:         LATAbits.LATA5 = Indbits.bits.B5;
 17945  22EC  0020               	movlb	0	; select bank0
 17946  22ED  1EA4               	btfss	set_ind@Indbits,5
 17947  22EE  2AF2               	goto	u12500
 17948  22EF  0022               	movlb	2	; select bank2
 17949  22F0  168C               	bsf	12,5	;volatile
 17950  22F1  2AF4               	goto	u12514
 17951  22F2                     u12500:
 17952  22F2  0022               	movlb	2	; select bank2
 17953  22F3  128C               	bcf	12,5	;volatile
 17954  22F4                     u12514:
 17955                           
 17956                           ;./main.h: 255:         LATAbits.LATA4 = Indbits.bits.B6;
 17957  22F4  0020               	movlb	0	; select bank0
 17958  22F5  1B24               	btfsc	set_ind@Indbits,6
 17959  22F6  2B40               	goto	L52
 17960  22F7  2B43               	goto	u12660
 17961  22F8                     l8294:	
 17962                           ;./main.h: 257:     } else {
 17963                           
 17964                           
 17965                           ;./main.h: 258:         LATBbits.LATB3 = ~Indbits.bits.B0;
 17966  22F8  1003               	clrc
 17967  22F9  0020               	movlb	0	; select bank0
 17968  22FA  1C24               	btfss	set_ind@Indbits,0
 17969  22FB  1403               	setc
 17970  22FC  1C03               	btfss	3,0
 17971  22FD  2B01               	goto	u12540
 17972  22FE  0022               	movlb	2	; select bank2
 17973  22FF  158D               	bsf	13,3	;volatile
 17974  2300  2B03               	goto	u12554
 17975  2301                     u12540:
 17976  2301  0022               	movlb	2	; select bank2
 17977  2302  118D               	bcf	13,3	;volatile
 17978  2303                     u12554:
 17979                           
 17980                           ;./main.h: 259:         LATAbits.LATA2 = ~Indbits.bits.B1;
 17981  2303  1003               	clrc
 17982  2304  0020               	movlb	0	; select bank0
 17983  2305  1CA4               	btfss	set_ind@Indbits,1
 17984  2306  1403               	setc
 17985  2307  1C03               	btfss	3,0
 17986  2308  2B0C               	goto	u12560
 17987  2309  0022               	movlb	2	; select bank2
 17988  230A  150C               	bsf	12,2	;volatile
 17989  230B  2B0E               	goto	u12574
 17990  230C                     u12560:
 17991  230C  0022               	movlb	2	; select bank2
 17992  230D  110C               	bcf	12,2	;volatile
 17993  230E                     u12574:
 17994                           
 17995                           ;./main.h: 260:         LATBbits.LATB4 = ~Indbits.bits.B2;
 17996  230E  1003               	clrc
 17997  230F  0020               	movlb	0	; select bank0
 17998  2310  1D24               	btfss	set_ind@Indbits,2
 17999  2311  1403               	setc
 18000  2312  1C03               	btfss	3,0
 18001  2313  2B17               	goto	u12580
 18002  2314  0022               	movlb	2	; select bank2
 18003  2315  160D               	bsf	13,4	;volatile
 18004  2316  2B19               	goto	u12594
 18005  2317                     u12580:
 18006  2317  0022               	movlb	2	; select bank2
 18007  2318  120D               	bcf	13,4	;volatile
 18008  2319                     u12594:
 18009                           
 18010                           ;./main.h: 261:         LATAbits.LATA3 = ~Indbits.bits.B3;
 18011  2319  1003               	clrc
 18012  231A  0020               	movlb	0	; select bank0
 18013  231B  1DA4               	btfss	set_ind@Indbits,3
 18014  231C  1403               	setc
 18015  231D  1C03               	btfss	3,0
 18016  231E  2B22               	goto	u12600
 18017  231F  0022               	movlb	2	; select bank2
 18018  2320  158C               	bsf	12,3	;volatile
 18019  2321  2B24               	goto	u12614
 18020  2322                     u12600:
 18021  2322  0022               	movlb	2	; select bank2
 18022  2323  118C               	bcf	12,3	;volatile
 18023  2324                     u12614:
 18024                           
 18025                           ;./main.h: 262:         LATBbits.LATB5 = ~Indbits.bits.B4;
 18026  2324  1003               	clrc
 18027  2325  0020               	movlb	0	; select bank0
 18028  2326  1E24               	btfss	set_ind@Indbits,4
 18029  2327  1403               	setc
 18030  2328  1C03               	btfss	3,0
 18031  2329  2B2D               	goto	u12620
 18032  232A  0022               	movlb	2	; select bank2
 18033  232B  168D               	bsf	13,5	;volatile
 18034  232C  2B2F               	goto	u12634
 18035  232D                     u12620:
 18036  232D  0022               	movlb	2	; select bank2
 18037  232E  128D               	bcf	13,5	;volatile
 18038  232F                     u12634:
 18039                           
 18040                           ;./main.h: 263:         LATAbits.LATA5 = ~Indbits.bits.B5;
 18041  232F  1003               	clrc
 18042  2330  0020               	movlb	0	; select bank0
 18043  2331  1EA4               	btfss	set_ind@Indbits,5
 18044  2332  1403               	setc
 18045  2333  1C03               	btfss	3,0
 18046  2334  2B38               	goto	u12640
 18047  2335  0022               	movlb	2	; select bank2
 18048  2336  168C               	bsf	12,5	;volatile
 18049  2337  2B3A               	goto	u12654
 18050  2338                     u12640:
 18051  2338  0022               	movlb	2	; select bank2
 18052  2339  128C               	bcf	12,5	;volatile
 18053  233A                     u12654:
 18054                           
 18055                           ;./main.h: 264:         LATAbits.LATA4 = ~Indbits.bits.B6;
 18056  233A  1003               	clrc
 18057  233B  0020               	movlb	0	; select bank0
 18058  233C  1F24               	btfss	set_ind@Indbits,6
 18059  233D  1403               	setc
 18060  233E  1C03               	btfss	3,0
 18061  233F  2B43               	goto	u12660
 18062  2340                     L52:
 18063  2340  0022               	movlb	2	; select bank2
 18064  2341  160C               	bsf	12,4	;volatile
 18065  2342  2B45               	goto	l8296
 18066  2343                     u12660:
 18067  2343  0022               	movlb	2	; select bank2
 18068  2344  120C               	bcf	12,4	;volatile
 18069  2345                     l8296:
 18070                           
 18071                           ;./main.h: 267:     Vdelay_ms(e_i_ms_Rel_Del);
 18072  2345  0823               	movf	(_e_i_ms_Rel_Del+1)^(0+256),w
 18073  2346  0020               	movlb	0	; select bank0
 18074  2347  00A1               	movwf	Vdelay_ms@time_in_ms+1
 18075  2348  0022               	movlb	2	; select bank2
 18076  2349  0822               	movf	_e_i_ms_Rel_Del^(0+256),w
 18077  234A  0020               	movlb	0	; select bank0
 18078  234B  00A0               	movwf	Vdelay_ms@time_in_ms
 18079  234C  31AC  2485         	fcall	_Vdelay_ms
 18080  234E  0008               	return
 18081  234F                     __end_of_set_ind:
 18082                           
 18083                           	psect	text50
 18084  2E36                     __ptext50:	
 18085 ;; *************** function _set_cap *****************
 18086 ;; Defined at:
 18087 ;;		line 270 in file "./main.h"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;  Cap             1    wreg     unsigned char 
 18090 ;; Auto vars:     Size  Location     Type
 18091 ;;  Cap             1    3[BANK0 ] unsigned char 
 18092 ;;  Capbits         1    4[BANK0 ] struct .
 18093 ;; Return value:  Size  Location     Type
 18094 ;;                  1    wreg      void 
 18095 ;; Registers used:
 18096 ;;		wreg, status,2, status,0, pclath, cstack
 18097 ;; Tracked objects:
 18098 ;;		On entry : 0/2
 18099 ;;		On exit  : 0/0
 18100 ;;		Unchanged: 0/0
 18101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;Total ram usage:        3 bytes
 18107 ;; Hardware stack levels used: 1
 18108 ;; Hardware stack levels required when called: 4
 18109 ;; This function calls:
 18110 ;;		_Vdelay_ms
 18111 ;; This function is called by:
 18112 ;;		_atu_reset
 18113 ;;		_coarse_cap
 18114 ;;		_coarse_tune
 18115 ;;		_sharp_cap
 18116 ;;		_sub_tune
 18117 ;;		_main
 18118 ;;		_button_proc_test
 18119 ;;		_button_proc
 18120 ;; This function uses a non-reentrant model
 18121 ;;
 18122                           
 18123  2E36                     _set_cap:	
 18124                           ;psect for function _set_cap
 18125                           
 18126                           
 18127                           ;incstack = 0
 18128                           ; Regs used in _set_cap: [wreg+status,2+status,0+pclath+cstack]
 18129                           ;set_cap@Cap stored from wreg
 18130  2E36  0020               	movlb	0	; select bank0
 18131  2E37  00A3               	movwf	set_cap@Cap
 18132                           
 18133                           ;./main.h: 271:     charbits Capbits;;./main.h: 272:     Capbits.bytes = Cap;
 18134  2E38  0823               	movf	set_cap@Cap,w
 18135  2E39  00A2               	movwf	??_set_cap
 18136  2E3A  0822               	movf	??_set_cap,w
 18137  2E3B  00A4               	movwf	set_cap@Capbits
 18138                           
 18139                           ;./main.h: 274:     LATCbits.LATC7 = Capbits.bits.B0;
 18140  2E3C  1C24               	btfss	set_cap@Capbits,0
 18141  2E3D  2E41               	goto	u12680
 18142  2E3E  0022               	movlb	2	; select bank2
 18143  2E3F  178E               	bsf	14,7	;volatile
 18144  2E40  2E43               	goto	l8302
 18145  2E41                     u12680:
 18146  2E41  0022               	movlb	2	; select bank2
 18147  2E42  138E               	bcf	14,7	;volatile
 18148  2E43                     l8302:
 18149                           
 18150                           ;./main.h: 275:     LATCbits.LATC3 = Capbits.bits.B1;
 18151  2E43  0020               	movlb	0	; select bank0
 18152  2E44  1CA4               	btfss	set_cap@Capbits,1
 18153  2E45  2E49               	goto	u12700
 18154  2E46  0022               	movlb	2	; select bank2
 18155  2E47  158E               	bsf	14,3	;volatile
 18156  2E48  2E4B               	goto	l8304
 18157  2E49                     u12700:
 18158  2E49  0022               	movlb	2	; select bank2
 18159  2E4A  118E               	bcf	14,3	;volatile
 18160  2E4B                     l8304:
 18161                           
 18162                           ;./main.h: 276:     LATCbits.LATC6 = Capbits.bits.B2;
 18163  2E4B  0020               	movlb	0	; select bank0
 18164  2E4C  1D24               	btfss	set_cap@Capbits,2
 18165  2E4D  2E51               	goto	u12720
 18166  2E4E  0022               	movlb	2	; select bank2
 18167  2E4F  170E               	bsf	14,6	;volatile
 18168  2E50  2E53               	goto	l8306
 18169  2E51                     u12720:
 18170  2E51  0022               	movlb	2	; select bank2
 18171  2E52  130E               	bcf	14,6	;volatile
 18172  2E53                     l8306:
 18173                           
 18174                           ;./main.h: 277:     LATCbits.LATC2 = Capbits.bits.B3;
 18175  2E53  0020               	movlb	0	; select bank0
 18176  2E54  1DA4               	btfss	set_cap@Capbits,3
 18177  2E55  2E59               	goto	u12740
 18178  2E56  0022               	movlb	2	; select bank2
 18179  2E57  150E               	bsf	14,2	;volatile
 18180  2E58  2E5B               	goto	l8308
 18181  2E59                     u12740:
 18182  2E59  0022               	movlb	2	; select bank2
 18183  2E5A  110E               	bcf	14,2	;volatile
 18184  2E5B                     l8308:
 18185                           
 18186                           ;./main.h: 278:     LATCbits.LATC5 = Capbits.bits.B4;
 18187  2E5B  0020               	movlb	0	; select bank0
 18188  2E5C  1E24               	btfss	set_cap@Capbits,4
 18189  2E5D  2E61               	goto	u12760
 18190  2E5E  0022               	movlb	2	; select bank2
 18191  2E5F  168E               	bsf	14,5	;volatile
 18192  2E60  2E63               	goto	l8310
 18193  2E61                     u12760:
 18194  2E61  0022               	movlb	2	; select bank2
 18195  2E62  128E               	bcf	14,5	;volatile
 18196  2E63                     l8310:
 18197                           
 18198                           ;./main.h: 279:     LATCbits.LATC1 = Capbits.bits.B5;
 18199  2E63  0020               	movlb	0	; select bank0
 18200  2E64  1EA4               	btfss	set_cap@Capbits,5
 18201  2E65  2E69               	goto	u12780
 18202  2E66  0022               	movlb	2	; select bank2
 18203  2E67  148E               	bsf	14,1	;volatile
 18204  2E68  2E6B               	goto	l8312
 18205  2E69                     u12780:
 18206  2E69  0022               	movlb	2	; select bank2
 18207  2E6A  108E               	bcf	14,1	;volatile
 18208  2E6B                     l8312:
 18209                           
 18210                           ;./main.h: 280:     LATCbits.LATC4 = Capbits.bits.B6;
 18211  2E6B  0020               	movlb	0	; select bank0
 18212  2E6C  1F24               	btfss	set_cap@Capbits,6
 18213  2E6D  2E71               	goto	u12800
 18214  2E6E  0022               	movlb	2	; select bank2
 18215  2E6F  160E               	bsf	14,4	;volatile
 18216  2E70  2E73               	goto	l8314
 18217  2E71                     u12800:
 18218  2E71  0022               	movlb	2	; select bank2
 18219  2E72  120E               	bcf	14,4	;volatile
 18220  2E73                     l8314:
 18221                           
 18222                           ;./main.h: 282:     Vdelay_ms(e_i_ms_Rel_Del);
 18223  2E73  0823               	movf	(_e_i_ms_Rel_Del+1)^(0+256),w
 18224  2E74  0020               	movlb	0	; select bank0
 18225  2E75  00A1               	movwf	Vdelay_ms@time_in_ms+1
 18226  2E76  0022               	movlb	2	; select bank2
 18227  2E77  0822               	movf	_e_i_ms_Rel_Del^(0+256),w
 18228  2E78  0020               	movlb	0	; select bank0
 18229  2E79  00A0               	movwf	Vdelay_ms@time_in_ms
 18230  2E7A  31AC  2485         	fcall	_Vdelay_ms
 18231  2E7C  0008               	return
 18232  2E7D                     __end_of_set_cap:
 18233                           
 18234                           	psect	text51
 18235  2C85                     __ptext51:	
 18236 ;; *************** function _Vdelay_ms *****************
 18237 ;; Defined at:
 18238 ;;		line 128 in file "cross_compiler.c"
 18239 ;; Parameters:    Size  Location     Type
 18240 ;;  time_in_ms      2    0[BANK0 ] int 
 18241 ;; Auto vars:     Size  Location     Type
 18242 ;;		None
 18243 ;; Return value:  Size  Location     Type
 18244 ;;                  1    wreg      void 
 18245 ;; Registers used:
 18246 ;;		wreg, status,2, status,0, pclath, cstack
 18247 ;; Tracked objects:
 18248 ;;		On entry : 1F/0
 18249 ;;		On exit  : 0/0
 18250 ;;		Unchanged: 0/0
 18251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18252 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;Total ram usage:        2 bytes
 18257 ;; Hardware stack levels used: 1
 18258 ;; Hardware stack levels required when called: 3
 18259 ;; This function calls:
 18260 ;;		_Delay_ms
 18261 ;; This function is called by:
 18262 ;;		_set_ind
 18263 ;;		_set_cap
 18264 ;;		_set_sw
 18265 ;;		_atu_reset
 18266 ;; This function uses a non-reentrant model
 18267 ;;
 18268                           
 18269  2C85                     _Vdelay_ms:	
 18270                           ;psect for function _Vdelay_ms
 18271                           
 18272                           
 18273                           ;cross_compiler.c: 128: void Vdelay_ms(int time_in_ms);cross_compiler.c: 129: {;cross_co
      +                          mpiler.c: 130:   Delay_ms((const unsigned int)(time_in_ms));
 18274                           
 18275                           ;incstack = 0
 18276                           ; Regs used in _Vdelay_ms: [wreg+status,2+status,0+pclath+cstack]
 18277  2C85  0821               	movf	Vdelay_ms@time_in_ms+1,w
 18278  2C86  00F4               	movwf	Delay_ms@time_in_ms+1
 18279  2C87  0820               	movf	Vdelay_ms@time_in_ms,w
 18280  2C88  00F3               	movwf	Delay_ms@time_in_ms
 18281  2C89  31AC  24FE         	fcall	_Delay_ms
 18282  2C8B  0008               	return
 18283  2C8C                     __end_of_Vdelay_ms:
 18284                           
 18285                           	psect	text52
 18286  2CFE                     __ptext52:	
 18287 ;; *************** function _Delay_ms *****************
 18288 ;; Defined at:
 18289 ;;		line 48 in file "cross_compiler.c"
 18290 ;; Parameters:    Size  Location     Type
 18291 ;;  time_in_ms      2    3[COMMON] const unsigned int 
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;  i               2    6[COMMON] unsigned int 
 18294 ;; Return value:  Size  Location     Type
 18295 ;;                  1    wreg      void 
 18296 ;; Registers used:
 18297 ;;		wreg, status,2, status,0
 18298 ;; Tracked objects:
 18299 ;;		On entry : 0/1
 18300 ;;		On exit  : 0/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;Total ram usage:        5 bytes
 18308 ;; Hardware stack levels used: 1
 18309 ;; Hardware stack levels required when called: 2
 18310 ;; This function calls:
 18311 ;;		Nothing
 18312 ;; This function is called by:
 18313 ;;		_coarse_tune
 18314 ;;		_sharp_cap
 18315 ;;		_sharp_ind
 18316 ;;		_sub_tune
 18317 ;;		_tune
 18318 ;;		_main
 18319 ;;		_button_proc_test
 18320 ;;		_button_proc
 18321 ;;		_show_reset
 18322 ;;		_lcd_prep
 18323 ;;		_lcd_pwr
 18324 ;;		_Test_init
 18325 ;;		_Button
 18326 ;;		_Vdelay_ms
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330  2CFE                     _Delay_ms:	
 18331                           ;psect for function _Delay_ms
 18332                           
 18333                           
 18334                           ;cross_compiler.c: 48: void Delay_ms(const unsigned int time_in_ms);cross_compiler.c: 49
      +                          : {;cross_compiler.c: 50:   unsigned int i = time_in_ms;
 18335                           
 18336                           ;incstack = 0
 18337                           ; Regs used in _Delay_ms: [wreg+status,2+status,0]
 18338  2CFE  0874               	movf	Delay_ms@time_in_ms+1,w
 18339  2CFF  00F7               	movwf	Delay_ms@i+1
 18340  2D00  0873               	movf	Delay_ms@time_in_ms,w
 18341  2D01  00F6               	movwf	Delay_ms@i
 18342  2D02  0064               	clrwdt	;# 
 18343  2D03                     l7582:	
 18344                           ;cross_compiler.c: 63:   while (i > 0)
 18345                           
 18346                           
 18347                           ;cross_compiler.c: 63:   while (i > 0)
 18348  2D03  0876               	movf	Delay_ms@i,w
 18349  2D04  0477               	iorwf	Delay_ms@i+1,w
 18350  2D05  1903               	btfsc	3,2
 18351  2D06  0008               	return
 18352                           
 18353                           ;cross_compiler.c: 64:   {;cross_compiler.c: 66:     _delay((unsigned long)(4000));
 18354  2D07  3006               	movlw	6
 18355  2D08  00F5               	movwf	??_Delay_ms
 18356  2D09  3030               	movlw	48
 18357  2D0A                     u14917:
 18358  2D0A  0B89               	decfsz	9,f
 18359  2D0B  2D0A               	goto	u14917
 18360  2D0C  0BF5               	decfsz	??_Delay_ms,f
 18361  2D0D  2D0A               	goto	u14917
 18362  2D0E  3200               	nop2
 18363  2D0F  0064               	clrwdt	;# 
 18364                           
 18365                           ;cross_compiler.c: 68:     i--;
 18366  2D10  3001               	movlw	1
 18367  2D11  02F6               	subwf	Delay_ms@i,f
 18368  2D12  3000               	movlw	0
 18369  2D13  3BF7               	subwfb	Delay_ms@i+1,f
 18370  2D14  2D03               	goto	l7582
 18371  2D15                     __end_of_Delay_ms:
 18372                           
 18373                           	psect	intentry
 18374  0004                     __pintentry:	
 18375 ;; *************** function _isr *****************
 18376 ;; Defined at:
 18377 ;;		line 56 in file "main.c"
 18378 ;; Parameters:    Size  Location     Type
 18379 ;;		None
 18380 ;; Auto vars:     Size  Location     Type
 18381 ;;		None
 18382 ;; Return value:  Size  Location     Type
 18383 ;;                  1    wreg      void 
 18384 ;; Registers used:
 18385 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18386 ;; Tracked objects:
 18387 ;;		On entry : 0/0
 18388 ;;		On exit  : 0/0
 18389 ;;		Unchanged: 0/0
 18390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18395 ;;Total ram usage:        0 bytes
 18396 ;; Hardware stack levels used: 1
 18397 ;; Hardware stack levels required when called: 1
 18398 ;; This function calls:
 18399 ;;		_uartProcessInput
 18400 ;;		_uartProcessOutput
 18401 ;; This function is called by:
 18402 ;;		Interrupt level 1
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406  0004                     _isr:
 18407                           
 18408                           ;incstack = 0
 18409  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 18410                           
 18411                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18412  0005  3180               	pagesel	$
 18413                           
 18414                           ;main.c: 57:     if (TMR0IE && TMR0IF) {
 18415  0006  1A8B               	btfsc	11,5	;volatile
 18416  0007  1D0B               	btfss	11,2	;volatile
 18417  0008  2812               	goto	i1l410
 18418                           
 18419                           ;main.c: 58:         TMR0 = 256 - (4000000 / 9600 / 2) + 7;
 18420  0009  3037               	movlw	55
 18421  000A  0020               	movlb	0	; select bank0
 18422  000B  0095               	movwf	21	;volatile
 18423                           
 18424                           ;main.c: 59:         TMR0IF = 0;
 18425  000C  110B               	bcf	11,2	;volatile
 18426                           
 18427                           ;main.c: 60:         uartProcessInput();
 18428  000D  31AF  275D  3180   	fcall	_uartProcessInput
 18429                           
 18430                           ;main.c: 61:         uartProcessOutput();
 18431  0010  31AE  267D         	fcall	_uartProcessOutput
 18432  0012                     i1l410:
 18433  0012  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 18434  0013  0009               	retfie
 18435  0014                     __end_of_isr:
 18436                           
 18437                           	psect	text54
 18438  2E7D                     __ptext54:	
 18439 ;; *************** function _uartProcessOutput *****************
 18440 ;; Defined at:
 18441 ;;		line 22 in file "uart.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;		None
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;		None
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  1    wreg      void 
 18448 ;; Registers used:
 18449 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18450 ;; Tracked objects:
 18451 ;;		On entry : 1F/3
 18452 ;;		On exit  : 1E/2
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;Total ram usage:        1 bytes
 18460 ;; Hardware stack levels used: 1
 18461 ;; This function calls:
 18462 ;;		Nothing
 18463 ;; This function is called by:
 18464 ;;		_isr
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468  2E7D                     _uartProcessOutput:	
 18469                           ;psect for function _uartProcessOutput
 18470                           
 18471                           
 18472                           ;uart.c: 23:     static uint8_t strPosition = 0;;uart.c: 24:     static uint8_t chrPosit
      +                          ion = 0;;uart.c: 26:     static uint8_t buf = 0x00;;uart.c: 28:     if (chrPosition == 0
      +                          ) {
 18473                           
 18474                           ;incstack = 0
 18475                           ; Regs used in _uartProcessOutput: [wreg+fsr1l+fsr1h+status,2+status,0]
 18476  2E7D  0022               	movlb	2	; select bank2
 18477  2E7E  0829               	movf	uartProcessOutput@chrPosition^(0+256),w
 18478  2E7F  1D03               	btfss	3,2
 18479  2E80  2EAB               	goto	i1l6982
 18480                           
 18481                           ;uart.c: 29:         if (refresh) {
 18482  2E81  0023               	movlb	3	; select bank3
 18483  2E82  084A               	movf	_refresh^(0+384),w
 18484  2E83  1903               	btfsc	3,2
 18485  2E84  0008               	return
 18486                           
 18487                           ;uart.c: 30:             if (strPosition < (32+5)) {
 18488  2E85  3025               	movlw	37
 18489  2E86  0022               	movlb	2	; select bank2
 18490  2E87  022A               	subwf	uartProcessOutput@strPosition^(0+256),w
 18491  2E88  1803               	skipnc
 18492  2E89  2E92               	goto	i1l6978
 18493                           
 18494                           ;uart.c: 31:                 LATBbits.LATB1 = 0;
 18495  2E8A  108D               	bcf	13,1	;volatile
 18496                           
 18497                           ;uart.c: 32:                 buf = buffer[strPosition];
 18498  2E8B  082A               	movf	uartProcessOutput@strPosition^(0+256),w
 18499  2E8C  3E20               	addlw	(low (_buffer| (0+512)))& (0+255)
 18500  2E8D  0086               	movwf	6
 18501  2E8E  3002               	movlw	2	; select bank4/5
 18502  2E8F  0087               	movwf	7
 18503  2E90  0801               	movf	1,w
 18504  2E91  2E93               	goto	L53
 18505  2E92                     i1l6978:	
 18506                           ;uart.c: 33:             } else {
 18507                           
 18508                           
 18509                           ;uart.c: 34:                 buf = 0xFF;
 18510  2E92  30FF               	movlw	255
 18511  2E93                     L53:
 18512  2E93  00F0               	movwf	??_uartProcessOutput
 18513  2E94  0870               	movf	??_uartProcessOutput,w
 18514  2E95  0023               	movlb	3	; select bank3
 18515  2E96  00C9               	movwf	uartProcessOutput@buf^(0+384)
 18516  2E97  2EA5               	goto	i1l6980
 18517  2E98                     i1l6984:
 18518                           
 18519                           ;uart.c: 39:         if (buf & 0x01) {
 18520  2E98  0023               	movlb	3	; select bank3
 18521  2E99  1C49               	btfss	uartProcessOutput@buf^(0+384),0
 18522  2E9A  2E9E               	goto	i1l894
 18523                           
 18524                           ;uart.c: 40:             LATBbits.LATB1 = 1;
 18525  2E9B  0022               	movlb	2	; select bank2
 18526  2E9C  148D               	bsf	13,1	;volatile
 18527                           
 18528                           ;uart.c: 41:         } else {
 18529  2E9D  2EA0               	goto	i1l6988
 18530  2E9E                     i1l894:
 18531                           
 18532                           ;uart.c: 42:             LATBbits.LATB1 = 0;
 18533  2E9E  0022               	movlb	2	; select bank2
 18534  2E9F  108D               	bcf	13,1	;volatile
 18535  2EA0                     i1l6988:
 18536                           
 18537                           ;uart.c: 44:         buf >>= 1;
 18538  2EA0  1003               	clrc
 18539  2EA1  0023               	movlb	3	; select bank3
 18540  2EA2  0CC9               	rrf	uartProcessOutput@buf^(0+384),f
 18541  2EA3  2EA5               	goto	i1l6980
 18542  2EA4                     i1l6994:
 18543                           
 18544                           ;uart.c: 47:         LATBbits.LATB1 = 1;
 18545  2EA4  148D               	bsf	13,1	;volatile
 18546  2EA5                     i1l6980:
 18547                           
 18548                           ;uart.c: 36:             chrPosition++;
 18549  2EA5  3001               	movlw	1
 18550  2EA6  00F0               	movwf	??_uartProcessOutput
 18551  2EA7  0870               	movf	??_uartProcessOutput,w
 18552  2EA8  0022               	movlb	2	; select bank2
 18553  2EA9  07A9               	addwf	uartProcessOutput@chrPosition^(0+256),f
 18554                           
 18555                           ;uart.c: 38:     } else if (chrPosition <= 8) {
 18556                           
 18557                           ;uart.c: 37:         }
 18558  2EAA  0008               	return
 18559  2EAB                     i1l6982:
 18560  2EAB  3009               	movlw	9
 18561  2EAC  0229               	subwf	uartProcessOutput@chrPosition^(0+256),w
 18562  2EAD  1C03               	btfss	3,0
 18563  2EAE  2E98               	goto	i1l6984
 18564  2EAF  300B               	movlw	11
 18565  2EB0  0229               	subwf	uartProcessOutput@chrPosition^(0+256),w
 18566  2EB1  1C03               	btfss	3,0
 18567  2EB2  2EA4               	goto	i1l6994
 18568                           
 18569                           ;uart.c: 50:         chrPosition = 0;
 18570  2EB3  01A9               	clrf	uartProcessOutput@chrPosition^(0+256)
 18571                           
 18572                           ;uart.c: 51:         strPosition++;
 18573  2EB4  3001               	movlw	1
 18574  2EB5  00F0               	movwf	??_uartProcessOutput
 18575  2EB6  0870               	movf	??_uartProcessOutput,w
 18576  2EB7  07AA               	addwf	uartProcessOutput@strPosition^(0+256),f
 18577                           
 18578                           ;uart.c: 52:         if (strPosition == (32+5)) {
 18579  2EB8  3025               	movlw	37
 18580  2EB9  062A               	xorwf	uartProcessOutput@strPosition^(0+256),w
 18581  2EBA  1D03               	btfss	3,2
 18582  2EBB  2EBF               	goto	i1l7006
 18583                           
 18584                           ;uart.c: 53:             refresh = 0;
 18585  2EBC  0023               	movlb	3	; select bank3
 18586  2EBD  01CA               	clrf	_refresh^(0+384)
 18587                           
 18588                           ;uart.c: 54:         } else if (strPosition > 137) {
 18589  2EBE  0008               	return
 18590  2EBF                     i1l7006:
 18591  2EBF  308A               	movlw	138
 18592  2EC0  022A               	subwf	uartProcessOutput@strPosition^(0+256),w
 18593  2EC1  1C03               	skipc
 18594  2EC2  0008               	return
 18595                           
 18596                           ;uart.c: 55:             strPosition = 0;
 18597  2EC3  01AA               	clrf	uartProcessOutput@strPosition^(0+256)
 18598  2EC4  0008               	return
 18599  2EC5                     __end_of_uartProcessOutput:
 18600                           
 18601                           	psect	text55
 18602  2F5D                     __ptext55:	
 18603 ;; *************** function _uartProcessInput *****************
 18604 ;; Defined at:
 18605 ;;		line 84 in file "uart.c"
 18606 ;; Parameters:    Size  Location     Type
 18607 ;;		None
 18608 ;; Auto vars:     Size  Location     Type
 18609 ;;  inbit           1    2[COMMON] _Bool 
 18610 ;; Return value:  Size  Location     Type
 18611 ;;                  1    wreg      void 
 18612 ;; Registers used:
 18613 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 18614 ;; Tracked objects:
 18615 ;;		On entry : 1F/0
 18616 ;;		On exit  : 1F/3
 18617 ;;		Unchanged: 0/0
 18618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18623 ;;Total ram usage:        3 bytes
 18624 ;; Hardware stack levels used: 1
 18625 ;; This function calls:
 18626 ;;		Nothing
 18627 ;; This function is called by:
 18628 ;;		_isr
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632  2F5D                     _uartProcessInput:	
 18633                           ;psect for function _uartProcessInput
 18634                           
 18635                           
 18636                           ;uart.c: 85:     static uint8_t state;;uart.c: 86:     static uint8_t buf;;uart.c: 87:  
      +                             static uint8_t bitCounter = 0;;uart.c: 89:     _Bool inbit = PORTBbits.RB2;
 18637                           
 18638                           ;incstack = 0
 18639                           ; Regs used in _uartProcessInput: [wreg-fsr0h+status,2+status,0]
 18640  2F5D  3000               	movlw	0
 18641  2F5E  190D               	btfsc	13,2	;volatile
 18642  2F5F  3001               	movlw	1
 18643  2F60  00F2               	movwf	uartProcessInput@inbit
 18644                           
 18645                           ;uart.c: 91:     switch (state) {
 18646  2F61  2F99               	goto	i1l6960
 18647  2F62                     i1l6936:
 18648                           
 18649                           ;uart.c: 93:             if (inbit == 0) {
 18650  2F62  0872               	movf	uartProcessInput@inbit,w
 18651  2F63  1D03               	btfss	3,2
 18652  2F64  0008               	return
 18653                           
 18654                           ;uart.c: 94:                 bitCounter = 0;
 18655  2F65  01C6               	clrf	uartProcessInput@bitCounter^(0+384)
 18656                           
 18657                           ;uart.c: 95:                 state = DATA_BIT;
 18658  2F66  01C7               	clrf	uartProcessInput@state^(0+384)
 18659  2F67  0AC7               	incf	uartProcessInput@state^(0+384),f
 18660  2F68  0008               	return
 18661  2F69                     i1l6942:
 18662                           
 18663                           ;uart.c: 99:             buf >>= 1;
 18664  2F69  1003               	clrc
 18665  2F6A  0022               	movlb	2	; select bank2
 18666  2F6B  0CA8               	rrf	uartProcessInput@buf^(0+256),f
 18667                           
 18668                           ;uart.c: 100:             buf |= inbit << 7;
 18669  2F6C  0872               	movf	uartProcessInput@inbit,w
 18670  2F6D  00F0               	movwf	??_uartProcessInput
 18671  2F6E  3006               	movlw	6
 18672  2F6F                     u1019_25:
 18673  2F6F  35F0               	lslf	??_uartProcessInput,f
 18674  2F70  3EFF               	addlw	-1
 18675  2F71  1D03               	skipz
 18676  2F72  2F6F               	goto	u1019_25
 18677  2F73  3570               	lslf	??_uartProcessInput,w
 18678  2F74  00F1               	movwf	??_uartProcessInput+1
 18679  2F75  0871               	movf	??_uartProcessInput+1,w
 18680  2F76  04A8               	iorwf	uartProcessInput@buf^(0+256),f
 18681                           
 18682                           ;uart.c: 102:             if (++bitCounter == 8) {
 18683  2F77  3001               	movlw	1
 18684  2F78  00F0               	movwf	??_uartProcessInput
 18685  2F79  0870               	movf	??_uartProcessInput,w
 18686  2F7A  0023               	movlb	3	; select bank3
 18687  2F7B  07C6               	addwf	uartProcessInput@bitCounter^(0+384),f
 18688  2F7C  3008               	movlw	8
 18689  2F7D  0646               	xorwf	uartProcessInput@bitCounter^(0+384),w
 18690  2F7E  1D03               	btfss	3,2
 18691  2F7F  0008               	return
 18692                           
 18693                           ;uart.c: 103:                 state = STOP_BIT;
 18694  2F80  3002               	movlw	2
 18695  2F81  00F0               	movwf	??_uartProcessInput
 18696  2F82  0870               	movf	??_uartProcessInput,w
 18697  2F83  00C7               	movwf	uartProcessInput@state^(0+384)
 18698  2F84  0008               	return
 18699  2F85                     i1l6950:
 18700                           
 18701                           ;uart.c: 107:             if (inbit == 1) {
 18702  2F85  0372               	decf	uartProcessInput@inbit,w
 18703  2F86  1D03               	btfss	3,2
 18704  2F87  2F97               	goto	i1l6956
 18705                           
 18706                           ;uart.c: 108:                 inbuf = buf;
 18707  2F88  0022               	movlb	2	; select bank2
 18708  2F89  0828               	movf	uartProcessInput@buf^(0+256),w
 18709  2F8A  00F0               	movwf	??_uartProcessInput
 18710  2F8B  0870               	movf	??_uartProcessInput,w
 18711  2F8C  0023               	movlb	3	; select bank3
 18712  2F8D  00C8               	movwf	_inbuf^(0+384)
 18713                           
 18714                           ;uart.c: 109:                 buffer[(32+5) - 3] = buf;
 18715  2F8E  0022               	movlb	2	; select bank2
 18716  2F8F  0828               	movf	uartProcessInput@buf^(0+256),w
 18717  2F90  00F0               	movwf	??_uartProcessInput
 18718  2F91  0870               	movf	??_uartProcessInput,w
 18719  2F92  0024               	movlb	4	; select bank4
 18720  2F93  00C2               	movwf	(_buffer^(0+512)+34)
 18721                           
 18722                           ;uart.c: 110:                 refresh = 1;
 18723  2F94  0023               	movlb	3	; select bank3
 18724  2F95  01CA               	clrf	_refresh^(0+384)
 18725  2F96  0ACA               	incf	_refresh^(0+384),f
 18726  2F97                     i1l6956:
 18727                           
 18728                           ;uart.c: 112:             state = START_BIT;
 18729  2F97  01C7               	clrf	uartProcessInput@state^(0+384)
 18730                           
 18731                           ;uart.c: 113:             break;
 18732  2F98  0008               	return
 18733  2F99                     i1l6960:
 18734  2F99  0023               	movlb	3	; select bank3
 18735  2F9A  0847               	movf	uartProcessInput@state^(0+384),w
 18736  2F9B  00F0               	movwf	??_uartProcessInput
 18737  2F9C  01F1               	clrf	??_uartProcessInput+1
 18738                           
 18739                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18740                           ; Switch size 1, requested type "simple"
 18741                           ; Number of cases is 1, Range of values is 0 to 0
 18742                           ; switch strategies available:
 18743                           ; Name         Instructions Cycles
 18744                           ; simple_byte            4     3 (average)
 18745                           ; direct_byte            8     6 (fixed)
 18746                           ; jumptable            260     6 (fixed)
 18747                           ;	Chosen strategy is simple_byte
 18748  2F9D  0871               	movf	??_uartProcessInput+1,w
 18749  2F9E  3A00               	xorlw	0	; case 0
 18750  2F9F  1903               	skipnz
 18751  2FA0  2FA2               	goto	i1l9648
 18752  2FA1  2FAD               	goto	i1l929
 18753  2FA2                     i1l9648:
 18754                           
 18755                           ; Switch size 1, requested type "simple"
 18756                           ; Number of cases is 3, Range of values is 0 to 2
 18757                           ; switch strategies available:
 18758                           ; Name         Instructions Cycles
 18759                           ; simple_byte           10     6 (average)
 18760                           ; direct_byte           12     6 (fixed)
 18761                           ; jumptable            260     6 (fixed)
 18762                           ;	Chosen strategy is simple_byte
 18763  2FA2  0870               	movf	??_uartProcessInput,w
 18764  2FA3  3A00               	xorlw	0	; case 0
 18765  2FA4  1903               	skipnz
 18766  2FA5  2F62               	goto	i1l6936
 18767  2FA6  3A01               	xorlw	1	; case 1
 18768  2FA7  1903               	skipnz
 18769  2FA8  2F69               	goto	i1l6942
 18770  2FA9  3A03               	xorlw	3	; case 2
 18771  2FAA  1903               	skipnz
 18772  2FAB  2F85               	goto	i1l6950
 18773  2FAC  2FAD               	goto	i1l929
 18774  2FAD                     i1l929:
 18775  2FAD  0008               	return
 18776  2FAE                     __end_of_uartProcessInput:
 18777  007E                     btemp	set	126	;btemp
 18778  007E                     int$flags	set	126
 18779  007E                     wtemp0	set	126
 18780                           
 18781                           	psect	idloc
 18782                           
 18783                           ;Config register IDLOC0 @ 0x8000
 18784                           ;	unspecified, using default values
 18785  8000                     	org	32768
 18786  8000  3FFF               	dw	16383
 18787                           
 18788                           ;Config register IDLOC1 @ 0x8001
 18789                           ;	unspecified, using default values
 18790  8001                     	org	32769
 18791  8001  3FFF               	dw	16383
 18792                           
 18793                           ;Config register IDLOC2 @ 0x8002
 18794                           ;	unspecified, using default values
 18795  8002                     	org	32770
 18796  8002  3FFF               	dw	16383
 18797                           
 18798                           ;Config register IDLOC3 @ 0x8003
 18799                           ;	unspecified, using default values
 18800  8003                     	org	32771
 18801  8003  3FFF               	dw	16383
 18802                           
 18803                           	psect	config
 18804                           
 18805                           ;Config register CONFIG1 @ 0x8007
 18806                           ;	Oscillator Selection
 18807                           ;	FOSC = 0x4, user specified literal
 18808                           ;	Watchdog Timer Enable
 18809                           ;	WDTE = 0x3, unprogrammed default
 18810                           ;	Power-up Timer Enable
 18811                           ;	PWRTE = 0x1, unprogrammed default
 18812                           ;	MCLR Pin Function Select
 18813                           ;	MCLRE = 0x1, unprogrammed default
 18814                           ;	Flash Program Memory Code Protection
 18815                           ;	CP = 0x1, unprogrammed default
 18816                           ;	Data Memory Code Protection
 18817                           ;	CPD = 0x1, unprogrammed default
 18818                           ;	Brown-out Reset Enable
 18819                           ;	BOREN = 0x3, unprogrammed default
 18820                           ;	Clock Out Enable
 18821                           ;	CLKOUTEN = 0x1, unprogrammed default
 18822                           ;	Internal/External Switchover
 18823                           ;	IESO = 0x1, unprogrammed default
 18824                           ;	Fail-Safe Clock Monitor Enable
 18825                           ;	FCMEN = 0x1, unprogrammed default
 18826  8007                     	org	32775
 18827  8007  3FFC               	dw	16380
 18828                           
 18829                           ;Config register CONFIG2 @ 0x8008
 18830                           ;	unspecified, using default values
 18831                           ;	Flash Memory Self-Write Protection
 18832                           ;	WRT = 0x3, unprogrammed default
 18833                           ;	Voltage Regulator Capacitor Enable
 18834                           ;	VCAPEN = 0x3, unprogrammed default
 18835                           ;	PLL Enable
 18836                           ;	PLLEN = 0x1, unprogrammed default
 18837                           ;	Stack Overflow/Underflow Reset Enable
 18838                           ;	STVREN = 0x1, unprogrammed default
 18839                           ;	Brown-out Reset Voltage Selection
 18840                           ;	BORV = 0x1, unprogrammed default
 18841                           ;	Low-Voltage Programming Enable
 18842                           ;	LVP = 0x1, unprogrammed default
 18843  8008                     	org	32776
 18844  8008  3FFF               	dw	16383

Data Sizes:
    Strings     202
    Constant    0
    Data        305
    BSS         100
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     29      80
    BANK3            80      3      61
    BANK4            80      0      37
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Button@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR0[1]), 

    uart_wr_str@str	PTR unsigned char  size(2) Largest target is 11
		 -> STR_89(CODE[2]), STR_88(CODE[2]), STR_87(CODE[10]), STR_86(CODE[10]), 
		 -> STR_85(CODE[10]), STR_84(CODE[10]), STR_83(CODE[2]), STR_82(CODE[3]), 
		 -> STR_81(CODE[3]), STR_80(CODE[3]), STR_79(CODE[3]), STR_78(CODE[3]), 
		 -> STR_77(CODE[2]), STR_76(CODE[3]), STR_75(CODE[3]), STR_74(CODE[3]), 
		 -> STR_73(CODE[3]), STR_72(CODE[3]), STR_71(CODE[9]), STR_70(CODE[9]), 
		 -> STR_69(CODE[9]), STR_68(CODE[9]), STR_67(CODE[9]), STR_66(CODE[9]), 
		 -> STR_65(CODE[9]), STR_64(CODE[9]), STR_63(CODE[9]), STR_62(CODE[9]), 
		 -> STR_61(CODE[9]), STR_60(CODE[9]), STR_59(CODE[9]), STR_58(CODE[9]), 
		 -> STR_57(CODE[9]), STR_56(CODE[9]), STR_55(CODE[8]), STR_54(CODE[8]), 
		 -> STR_53(CODE[8]), STR_52(CODE[9]), STR_51(CODE[9]), STR_50(CODE[9]), 
		 -> STR_49(CODE[9]), STR_48(CODE[9]), STR_47(CODE[9]), g_work_str_2(BANK2[7]), 
		 -> STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[2]), STR_43(CODE[9]), 
		 -> STR_42(CODE[9]), STR_41(CODE[9]), STR_40(CODE[11]), STR_39(CODE[9]), 
		 -> STR_38(CODE[11]), STR_37(CODE[9]), STR_36(CODE[10]), STR_35(CODE[8]), 
		 -> STR_34(CODE[2]), STR_33(CODE[9]), STR_32(CODE[9]), STR_31(CODE[9]), 
		 -> STR_30(CODE[11]), STR_29(CODE[9]), STR_28(CODE[11]), STR_27(CODE[9]), 
		 -> STR_26(CODE[11]), STR_25(CODE[9]), STR_24(CODE[10]), STR_23(CODE[8]), 
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[9]), STR_19(CODE[9]), 
		 -> STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[2]), STR_15(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), 

    IntToStr@output	PTR unsigned char  size(1) Largest target is 7
		 -> g_work_str(BANK2[7]), 

    IntToStr@p	PTR unsigned char  size(1) Largest target is 7
		 -> g_work_str(BANK2[7]), 


Critical Paths under _main in COMMON

    _main->_Delay_ms
    _cells_init->_Bcd2Dec
    _Bcd2Dec->___bmul
    _button_proc_test->_Delay_ms
    _button_proc->_Delay_ms
    _tune_btn_push->___awdiv
    _tune->_Delay_ms
    _sub_tune->_Delay_ms
    _sharp_ind->_Delay_ms
    _sharp_cap->_Delay_ms
    _coarse_tune->_Delay_ms
    _coarse_tune->___awdiv
    _coarse_cap->___awdiv
    _show_reset->_Delay_ms
    _lcd_pwr->_Delay_ms
    _lcd_pwr->___awdiv
    _get_pwr->___aldiv
    _get_reverse->_ADC_Get_Sample
    _get_forward->_ADC_Get_Sample
    ___wmul->_Bcd2Dec
    ___aldiv->___lmul
    _Button->_Delay_ms
    _Test_init->_Delay_ms
    _lcd_prep->_Delay_ms
    _IntToStr->___awdiv
    _IntToStr->___awmod
    _eeprom_write->___awdiv
    _Vdelay_ms->_Delay_ms

Critical Paths under _isr in COMMON

    _isr->_uartProcessInput

Critical Paths under _main in BANK0

    _cells_init->___wmul
    _show_pwr->___flmul
    _lcd_swr->_IntToStr
    _get_pwr->___flmul
    _get_reverse->_ADC_Get_Sample
    _get_forward->_ADC_Get_Sample
    _correction->___wmul
    ___xxtofl->_correction
    ___wmul->_Bcd2Dec
    ___fltol->___flmul
    ___flmul->___fladd
    ___fldiv->___xxtofl
    ___fladd->___fldiv
    ___aldiv->___lmul
    _Test_init->_lcd_prep
    _set_sw->_Vdelay_ms
    _lcd_prep->_lcd_ind
    _lcd_ind->_IntToStr
    _IntToStr->___awdiv
    _eeprom_write->___awdiv
    _atu_reset->_set_cap
    _atu_reset->_set_ind
    _set_ind->_Vdelay_ms
    _set_cap->_Vdelay_ms

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _button_proc_test->_lcd_pwr
    _tune_btn_push->_tune
    _get_swr->_show_reset
    _show_reset->_lcd_pwr
    _lcd_pwr->_show_pwr
    _show_pwr->___fltol
    _get_pwr->___fltol
    ___fltol->___flmul

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_button_proc
    _button_proc->_tune_btn_push
    _tune->_sub_tune
    _sub_tune->_coarse_tune
    _sharp_ind->_get_swr
    _sharp_cap->_get_swr
    _coarse_tune->_coarse_cap
    _coarse_cap->_get_swr

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0 4426128
                                              0 BANK3      3     3      0
                           _Delay_ms
                          _Test_init
                        _button_proc
                   _button_proc_test
                         _cells_init
                        _eeprom_read
                     _interrupt_init
                            _lcd_ind
                           _lcd_prep
                            _lcd_pwr
                           _pic_init
                            _set_cap
                            _set_ind
                             _set_sw
 ---------------------------------------------------------------------------------
 (1) _pic_init                                             0     0      0       0
                           _ADC_Init
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cells_init                                           4     4      0    3840
                                              9 BANK0      4     4      0
                            _Bcd2Dec
                             ___wmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          4     4      0      22
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _Bcd2Dec                                              4     4      0     686
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _button_proc_test                                     2     2      0  265784
                                             77 BANK1      2     2      0
                             _Button
                           _Delay_ms
                            _lcd_ind
                            _lcd_pwr
                            _set_cap
                            _set_ind
                             _set_sw
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (1) _button_proc                                          2     2      0 3732128
                                             27 BANK2      2     2      0
                           _Delay_ms
                       _eeprom_write
                            _lcd_ind
                            _set_cap
                            _set_ind
                             _set_sw
                         _show_reset
                      _tune_btn_push
                        _uartGetChar
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (2) _uartGetChar                                          2     2      0      23
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _tune_btn_push                                        2     2      0 3380276
                                             25 BANK2      2     2      0
                            ___awdiv
                       _eeprom_write
                            _lcd_ind
                            _lcd_pwr
                               _tune
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (3) _tune                                                 1     1      0 3139197
                                             79 BANK1      1     1      0
                           _Delay_ms
                          _atu_reset
                            _get_swr
                            _lcd_ind
                          _sharp_cap
                          _sharp_ind
                           _sub_tune
 ---------------------------------------------------------------------------------
 (4) _sub_tune                                             9     9      0 1944803
                                             16 BANK2      9     9      0
                           _Delay_ms
                          _atu_reset
                        _coarse_tune
                            _get_swr
                            _set_cap
                            _set_ind
                             _set_sw
                          _sharp_cap
                          _sharp_ind
 ---------------------------------------------------------------------------------
 (5) _sharp_ind                                           11    11      0  383252
                                              2 BANK2     11    11      0
                           _Delay_ms
                             ___bmul
                            _get_swr
                            _set_ind
 ---------------------------------------------------------------------------------
 (5) _sharp_cap                                           11    11      0  383035
                                              2 BANK2     11    11      0
                           _Delay_ms
                             ___bmul
                            _get_swr
                            _set_cap
 ---------------------------------------------------------------------------------
 (5) _coarse_tune                                          8     8      0  769874
                                              8 BANK2      8     8      0
                           _Delay_ms
                            ___awdiv
                             ___bmul
                         _coarse_cap
                            _get_swr
                            _set_cap
                            _set_ind
 ---------------------------------------------------------------------------------
 (6) _coarse_cap                                           6     6      0  379828
                                              2 BANK2      6     6      0
                            ___awdiv
                             ___bmul
                            _get_swr
                            _set_cap
 ---------------------------------------------------------------------------------
 (6) _get_swr                                              2     2      0  372023
                                              0 BANK2      2     2      0
                             _Button
                            _get_pwr
                           _show_pwr
                         _show_reset
 ---------------------------------------------------------------------------------
 (7) _show_reset                                           2     2      0  265167
                                             77 BANK1      2     2      0
                           _Delay_ms
                          _atu_reset
                       _eeprom_write
                            _lcd_ind
                            _lcd_pwr
                             _set_sw
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (1) _lcd_pwr                                             12    12      0  173583
                                             65 BANK1     12    12      0
                           _Delay_ms
                            ___awdiv
                             ___wmul
                            _get_pwr
                            _lcd_swr
                           _show_pwr
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (2) _show_pwr                                            36    32      4   83058
                                             29 BANK1     36    32      4
                           _IntToStr
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                            _lcd_ind
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8     626
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _lcd_swr                                              4     2      2   34717
                                             10 BANK0      4     2      2
                           _IntToStr
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (2) _get_pwr                                             20    20      0   16810
                                             29 BANK1     20    20      0
                            ___aldiv
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___fltol
                             ___lmul
                             ___wmul
                           ___xxtofl
                         _correction
                        _get_forward
                        _get_reverse
 ---------------------------------------------------------------------------------
 (3) _get_reverse                                          6     4      2     297
                                              5 COMMON     2     2      0
                                             10 BANK0      4     2      2
                     _ADC_Get_Sample
 ---------------------------------------------------------------------------------
 (3) _get_forward                                          6     4      2     328
                                              5 COMMON     2     2      0
                                             10 BANK0      4     2      2
                     _ADC_Get_Sample
 ---------------------------------------------------------------------------------
 (4) _ADC_Get_Sample                                      12    10      2     133
                                              3 COMMON     2     0      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _correction                                           3     1      2     397
                                              9 BANK0      3     1      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1006
                                             12 BANK0     14    10      4
                             ___lmul (ARG)
                             ___wmul (ARG)
                         _correction (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3132
                                              3 BANK0      6     2      4
                            _Bcd2Dec (ARG)
                        _eeprom_read (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             11     7      4     607
                                             18 BANK1     11     7      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             26    18      8    3634
                                             72 BANK0      8     0      8
                                              0 BANK1     18    18      0
                          __Umul8_16
                            ___fladd (ARG)
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) __Umul8_16                                            9     7      2     799
                                              3 COMMON     4     2      2
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             26    18      8    2793
                                             26 BANK0     26    18      8
                          __Umul8_16 (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    2870
                                             52 BANK0     20    12      8
                          __Umul8_16 (ARG)
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     625
                                              7 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Button                                               9     4      5    6988
                                              0 BANK0      9     4      5
                           _Delay_ms
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     624
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _Test_init                                            2     2      0  125340
                                             19 BANK0      2     2      0
                           _Delay_ms
                          _atu_reset
                       _eeprom_write
                           _lcd_prep
                             _set_sw
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (1) _set_sw                                               1     1      0    5080
                                              2 BANK0      1     1      0
                          _Vdelay_ms
 ---------------------------------------------------------------------------------
 (1) _lcd_prep                                             2     2      0   69316
                                             17 BANK0      2     2      0
                           _Delay_ms
                            _lcd_ind
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (3) _lcd_ind                                              7     7      0   35560
                                             10 BANK0      7     7      0
                           _IntToStr
                        _uart_wr_str
 ---------------------------------------------------------------------------------
 (2) _uart_wr_str                                         10     6      4   29098
                                              3 COMMON     4     0      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (4) _IntToStr                                             6     3      3    5253
                                              4 BANK0      6     3      3
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              7     3      4     793
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              9     5      4    1516
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (8) _eeprom_write                                         4     3      1    1322
                                              4 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) _atu_reset                                            0     0      0   15866
                          _Vdelay_ms
                            _set_cap
                            _set_ind
 ---------------------------------------------------------------------------------
 (1) _set_ind                                              3     3      0    5517
                                              2 BANK0      3     3      0
                          _Vdelay_ms
 ---------------------------------------------------------------------------------
 (1) _set_cap                                              3     3      0    5300
                                              2 BANK0      3     3      0
                          _Vdelay_ms
 ---------------------------------------------------------------------------------
 (2) _Vdelay_ms                                            2     0      2    5049
                                              0 BANK0      2     0      2
                           _Delay_ms
 ---------------------------------------------------------------------------------
 (3) _Delay_ms                                             5     3      2    4658
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                 0     0      0      67
                   _uartProcessInput
                  _uartProcessOutput
 ---------------------------------------------------------------------------------
 (15) _uartProcessOutput                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) _uartProcessInput                                    3     3      0      67
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Test_init
     _Delay_ms
     _atu_reset
       _Vdelay_ms
         _Delay_ms
       _set_cap
         _Vdelay_ms
       _set_ind
         _Vdelay_ms
     _eeprom_write
       ___awdiv (ARG)
     _lcd_prep
       _Delay_ms
       _lcd_ind
         _IntToStr
           ___awdiv
           ___awmod
         _uart_wr_str
       _uart_wr_str
     _set_sw
       _Vdelay_ms
     _uart_wr_str
   _button_proc
     _Delay_ms
     _eeprom_write
     _lcd_ind
     _set_cap
     _set_ind
     _set_sw
     _show_reset
       _Delay_ms
       _atu_reset
       _eeprom_write
       _lcd_ind
       _lcd_pwr
         _Delay_ms
         ___awdiv
         ___wmul
           _Bcd2Dec (ARG)
             ___bmul
           _eeprom_read (ARG)
         _get_pwr
           ___aldiv
             ___lmul (ARG)
           ___fladd
             __Umul8_16 (ARG)
             ___fldiv (ARG)
               __Umul8_16 (ARG)
               ___xxtofl (ARG)
                 ___lmul (ARG)
                 ___wmul (ARG)
                 _correction (ARG)
                   ___wmul (ARG)
             ___xxtofl (ARG)
           ___fldiv
           ___flmul
             __Umul8_16
             ___fladd (ARG)
             ___fldiv (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___flmul (ARG)
             ___xxtofl (ARG)
           ___lmul
           ___wmul
           ___xxtofl
           _correction
           _get_forward
             _ADC_Get_Sample
           _get_reverse
             _ADC_Get_Sample
         _lcd_swr
           _IntToStr
           _uart_wr_str
         _show_pwr
           _IntToStr
           ___fladd
           ___fldiv
           ___flge
           ___flmul
           ___fltol
           ___xxtofl
           _lcd_ind
           _uart_wr_str
         _uart_wr_str
       _set_sw
       _uart_wr_str
     _tune_btn_push
       ___awdiv
       _eeprom_write
       _lcd_ind
       _lcd_pwr
       _tune
         _Delay_ms
         _atu_reset
         _get_swr
           _Button
             _Delay_ms
           _get_pwr
           _show_pwr
           _show_reset
         _lcd_ind
         _sharp_cap
           _Delay_ms
           ___bmul
           _get_swr
           _set_cap
         _sharp_ind
           _Delay_ms
           ___bmul
           _get_swr
           _set_ind
         _sub_tune
           _Delay_ms
           _atu_reset
           _coarse_tune
             _Delay_ms
             ___awdiv
             ___bmul
             _coarse_cap
               ___awdiv
               ___bmul
               _get_swr
               _set_cap
             _get_swr
             _set_cap
             _set_ind
           _get_swr
           _set_cap
           _set_ind
           _set_sw
           _sharp_cap
           _sharp_ind
       _uart_wr_str
     _uartGetChar
     _uart_wr_str
   _button_proc_test
     _Button
     _Delay_ms
     _lcd_ind
     _lcd_pwr
     _set_cap
     _set_ind
     _set_sw
     _uart_wr_str
   _cells_init
     _Bcd2Dec
     ___wmul
     _eeprom_read
   _eeprom_read
   _interrupt_init
   _lcd_ind
   _lcd_prep
   _lcd_pwr
   _pic_init
     _ADC_Init
   _set_cap
   _set_ind
   _set_sw

 _isr (ROOT)
   _uartProcessInput
   _uartProcessOutput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0     100       0      100.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     1D      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      3      3D      11       76.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      25      13       46.2%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Sep 10 07:32:29 2023

                       uart_wr_str@col 0073                         uart_wr_str@len 0076  
                       uart_wr_str@lin 0023                         uart_wr_str@pos 0025  
                         ?_get_reverse 002A                         uart_wr_str@str 0074  
                         ___fldiv@aexp 0053                           ___fldiv@bexp 0052  
                         ___fldiv@sign 004B                         ___bmul@product 0075  
                         ___awdiv@sign 0021                    ___wmul@multiplicand 0025  
                  __Umul8_16@word_mpld 0022                 __end_of_interrupt_init 2C9D  
         sharp_cap@l_sharp_cap_min_SWR 0157                                    l203 2003  
                                  l212 203B                                    l208 201F  
                                  l235 1933                                    l326 10CB  
                                  l335 115B                                    l336 1140  
                                  l433 1B4E                                    l194 2EE1  
                                  l514 1E85                                    l189 2EC8  
                                  l357 1C26                                    l541 26DC  
                                  l198 2EFA                                    l703 1690  
                                  l623 01F4                                    l607 0107  
                                  l527 251A                                    l536 26B5  
                                  l721 17FE                                    l609 0645  
                                  l707 16BA                                    l557 07F6  
                                  l566 1A83                                    l664 0A8E  
                                  l737 2547                                    l833 2D97  
                                  l585 1A80                                    l674 0CE0  
                                  l498 1E17                                    l909 2F59  
                                  l685 15E6                                    l699 16ED  
                                  _isr 0004                       show_pwr@parm_SWR 00BF  
                         ___awmod@sign 0021                                    wreg 0009  
                         ___flmul@aexp 00A6                           ___flmul@bexp 00AB  
                         ___flmul@sign 00A5                           ___flmul@temp 00B0  
                         ___flmul@prod 00AC                           ___fltol@exp1 00BC  
                                 l1112 1805                                   l1122 2D1D  
                                 l1300 2158                                   l1303 21A6  
                                 l1323 20A9                                   l1500 1FD6  
                                 l1092 2CC1                                   l1501 1FEE  
                                 l1423 11A9                                   l1503 1FFB  
                                 l1187 2249                                   l1427 123C  
                                 l1531 1583                                   l1444 12BF  
                                 l1429 121F                                   l1465 1336  
                                 l1457 131E                                   l1538 0811  
                                 l1563 236C                                   l1479 1ECF  
                                 l1576 23B6                                   l1577 23C0  
                                 l1569 23A2                                   l5202 1179  
                                 l5204 1181                                   l5222 119E  
                                 l5062 2D17                                   l4600 2FEA  
                                 l5232 11B3                                   l5306 126D  
                                 l5226 11A1                                   l4604 2FF3  
                                 l5332 12DE                                   l5324 12D1  
                                 l5316 12B7                                   l5340 12E7  
                                 l5412 1EC4                                   l5350 12F2  
                                 l5270 1227                                   l5262 11EF  
                                 l4608 2FFB                                   l5272 1229  
                                 l5280 1237                                   l5512 1FF7  
                                 l5432 1EFA                                   l5416 1EC7  
                                 l5346 12F0                                   l5338 12E5  
                                 l5426 1EEE                                   l6332 2C9F  
                                 l5372 1332                                   l5452 1F41  
                                 l5460 1F23                                   l4732 080B  
                                 l5532 135F                                   l4582 2FC4  
                                 l5198 1176                                   l5462 1F5F  
                                 l5622 1519                                   l5614 14EB  
                                 l5550 138C                                   l5534 1362  
                                 l5526 134F                                   l8006 20B6  
                                 l8030 091C                                   l8022 0913  
                                 l4592 2FCC                                   l4576 2FB9  
                                 l6336 2CA5                                   l5368 132E  
                                 l5296 125C                                   l5288 124A  
                                 l5392 1EA0                                   l5640 1559  
                                 l5616 1502                                   l5552 138F  
                                 l5544 137C                                   l5536 136B  
                                 l4760 1C6D                                   l4752 1C49  
                                 l8112 0155                                   l4594 2FD8  
                                 l5298 125E                                   l5458 1F5A  
                                 l5626 151B                                   l5562 13A8  
                                 l5554 1398                                   l8042 0A3B  
                                 l8018 085E                                   l8122 017D  
                                 l5484 1F93                                   l5476 1F65  
                                 l5396 1EA3                                   l5636 1544  
                                 l4780 1CC7                                   l4772 1CA3  
                                 l4764 1C7F                                   l4756 1C5B  
                                 l4748 1C37                                   l8044 0A40  
                                 l8212 053D                                   l8124 017F  
                                 l8060 006D                                   l8310 2E63  
                                 l8302 2E43                                   l9110 0651  
                                 l5478 1F7C                                   l5398 1EAB  
                                 l5646 1570                                   l5670 237B  
                                 l8038 09A8                                   l8222 0565  
                                 l8118 016D                                   l8126 0181  
                                 l8070 00A1                                   l8312 2E6B  
                                 l8304 2E4B                                   l5488 1F95  
                                 l5664 2364                                   l4792 1CFD  
                                 l4784 1CD9                                   l4776 1CB5  
                                 l4768 1C91                                   l8224 0567  
                                 l8152 01DE                                   l8064 0079  
                                 l9040 1BAD                                   l9024 1B75  
                                 l8314 2E73                                   l8306 2E53  
                                 l7610 21BE                                   l9130 0729  
                                 l5498 1FBE                                   l5674 237F  
                                 l8330 19ED                                   l8218 0555  
                                 l8226 0569                                   l8154 01E0  
                                 l8138 01AC                                   l8090 0105  
                                 l8082 00D8                                   l8074 00AD  
                                 l8066 0099                                   l8402 0A5D  
                                 l8308 2E5B                                   l7604 2F27  
                                 l9124 0701                                   l5684 23B4  
                                 l5676 238F                                   l4796 1D0F  
                                 l4788 1CEB                                   l8340 1A0B  
                                 l8260 05DF                                   l8252 05C6  
                                 l8076 00C9                                   l8084 00FA  
                                 ?_isr 0070                                   l7534 2DFB  
                                 l7622 21D9                                   l9150 07C7  
                                 l9118 06ED                                   l9230 2531  
                                 l5686 23A7                                   l7702 2050  
                                 l8334 1A02                                   l8254 05D5  
                                 l8238 0594                                   l8182 03F9  
                                 l8166 0207                                   l8086 00FE  
                                 l8430 0B42                                   l8422 0B10  
                                 l8414 0ADD                                   l9222 0D05  
                                 l7560 2E31                                   l7552 2E20  
                                 l7632 2207                                   l7800 1693  
                                 l7720 15AA                                   l9144 07B7  
                                 l9232 2533                                   l8520 1014  
                                 l7704 2052                                   l8360 1A5E  
                                 l8328 19DB                                   l8280 0630  
                                 l8264 05F3                                   l8408 0AC5  
                                 l9048 1BB7                                   l9400 1E29  
                                 l7546 2E08                                   l7538 2E02  
                                 l7802 16B1                                   l9250 2573  
                                 l5698 23DB                                   l8354 1A37  
                                 l8338 1A07                                   l8282 0632  
                                 l8274 0619                                   l8258 05DD  
                                 l8186 041F                                   l8442 0B7B  
                                 l8434 0B5F                                   l8426 0B38  
                                 l9090 1C0F                                   l9082 1BFF  
                                 l9066 1BDB                                   l9058 1BCC  
                                 l9170 26B7                                   l9410 1E46  
                                 l7548 2E14                                   l7556 2E29  
                                 l7740 15DC                                   l7732 15C8  
                                 l7724 15B4                                   l8532 102F  
                                 l8524 1019                                   l8516 100A  
                                 l7652 2EDE                                   l8356 1A49  
                                 l8276 0628                                   l8196 0503  
                                 l8620 1964                                   l9164 2690  
                                 l9324 1D76                                   l9308 1D4F  
                                 l7582 2D03                                   l8294 22F8  
                                 l7590 2F26                                   l7830 171D  
                                 l7822 1709                                   l9270 25B7  
                                 l9254 2587                                   l8518 100F  
                                 l8526 1029                                   l7902 2D5D  
                                 l7662 2EF7                                   l8366 1A71  
                                 l8614 1952                                   l9094 1C16  
                                 l9086 1C05                                   l9078 1BF7  
                                 l9182 26E0                                   l9166 26A1  
                                 l9422 1E67                                   l9414 1E51  
                                 l9406 1E3B                                   l9326 1D77  
                                 l9342 1D96                                   l8296 2345  
                                 l7808 16BD                                   l7736 15D2  
                                 l7728 15BE                                   l9272 25B9  
                                 l9248 2571                                   l8536 1039  
                                 l8464 0C37                                   l8624 197B  
                                 l8632 1922                                   l8712 25F2  
                                 l9416 1E53                                   l9360 1DBE  
                                 l9440 20E8                                   l7842 173B  
                                 l7834 1727                                   l7826 1713  
                                 l7818 16FF                                   l7762 1629  
                                 l7906 2D67                                   l7682 201C  
                                 l8634 199B                                   l8802 27BE  
                                 l9098 1C1C                                   l9178 26CD  
                                 l9426 1E78                                   l9370 1DD7  
                                 l9362 1DC4                                   l9338 1D8D  
                                 l9290 1D2D                                   l7860 176C  
                                 l7780 1655                                   l7756 1616  
                                 l9276 25CB                                   l7932 226A  
                                 l7924 225A                                   l8660 2410  
                                 l9188 26E8                                   l9540 1AB1  
                                 l7598 2F3C                                   l7838 1731  
                                 l7774 1647                                   l7950 22B1  
                                 l7942 2298                                   l7934 2278  
                                 l7694 2038                                   l8398 0A81  
                                 l8582 251C                                   l8574 24F1  
                                 l8742 265A                                   l8750 266D  
                                 l8830 1864                                   l9382 1DF8  
                                 l9374 1DE2                                   l9366 1DCC  
                                 l9294 1D35                                   l9438 20E7  
                                 l9534 1AA1                                   l7872 179C  
                                 l7856 1767                                   l7784 165A  
                                 l7792 1682                                   l7768 163B  
                                 l7960 2172                                   l8568 24C5  
                                 l8808 27D5                                   l8816 2798  
                                 l9376 1DE4                                   l9472 20EF  
                                 l9560 1AD8                                   l9552 1AC8  
                                 l9544 1AB7                                   l9528 1A8A  
                                 l7890 17CD                                   l7946 22A3  
                                 l8690 247C                                   l8818 27FC  
                                 l8834 186F                                   l9386 1E09  
                                 l9474 2107                                   l7892 17CF  
                                 l7876 17A3                                   l7884 17C3  
                                 l7868 1794                                   l7796 168A  
                                 l7980 2072                                   l7964 218C  
                                 l8684 246D                                   l8692 2480  
                                 l8748 2669                                   l8772 277E  
                                 l8836 1870                                   l9388 1E18  
                                 l9556 1ACE                                   l9548 1AC1  
                                 l7878 17A5                                   l9646 1021  
                                 l8598 1910                                   l8774 277F  
                                 l8870 18C6                                   l8942 10CD  
                                 l9398 1E28                                   l9590 1B48  
                                 l7976 2069                                   l8768 2773  
                                 l8880 18ED                                   l8864 18AF  
                                 l8936 10B3                                   l8890 104A  
                                 l7996 2097                                   l7998 20A5  
                                 l8878 1889                                   l8894 104D  
                                 STR_1 30C4                                   STR_3 30C2  
                                 STR_5 30BE                                   STR_6 30C0  
                                 STR_7 3009                                   l8998 1142  
                                 STR_8 30BE                                   STR_9 30C0  
                                 _LATA 010C                                   _LATB 010D  
                                 _LATC 010E                                   u5535 2FCF  
                                 u6415 2D1E                                   u6425 2D23  
                                 u5555 2FD9                                   u5565 2FE3  
                                 u7325 1F68                                   u5805 0812  
                                 u5575 2FEB                                   u7095 1309  
                                 u7415 1FAC                                   u7255 1F2B  
                                 u7425 1FC7                                   u7345 1F71  
                                 u7265 1F32                                   u5905 1CBF  
                                 u5825 1C31                                   u7435 1FE0  
                                 u5915 1CD1                                   u5835 1C41  
                                 u7285 1F3B                                   u5925 1CE3  
                                 u5845 1C53                                   u6830 120E  
                                 u7295 1F4F                                   u7535 1427  
                                 u5935 1CF5                                   u5855 1C65  
                                 u6840 120F                                   u6825 1203  
                                 u7545 145C                                   u5945 1D07  
                                 u5865 1C77                                   u7555 14BE  
                                 u5875 1C89                                   u7565 14DA  
                                 u5885 1C9B                                   u7575 14EE  
                                 u7815 23C8                                   u7735 2388  
                                 u5895 1CAD                                   u6953 127F  
                                 u6945 1262                                   u7665 1532  
                                 u6875 122D                                   u7675 154D  
                                 u7595 14F7                                   u7755 239C  
                                 u7685 1563                                   u7775 23AE  
                                 u6995 12D2                                   _TMR0 0015  
                       ??_eeprom_write 0025                        __end_of_Bcd2Dec 2CE8  
                                 _main 1A85                                   fsr0h 0005  
                                 fsr1h 0007                                   indf0 0000  
                                 fsr0l 0004                                   indf1 0001  
                                 fsr1l 0006                                   btemp 007E  
                                 _tune 1B56                       __end_of_ADC_Init 0004  
                                 start 0014                        ___fldiv@new_exp 004C  
                  button_proc@uartChar 0169                             Button@loop 0027  
                           Button@time 0023                             Button@port 0020  
                    ___bmul@multiplier 0076                          lcd_ind@l_line 0030  
                                ??_isr 0073                          ___fltol@sign1 00BB  
                      __end_of___aldiv 22BA                      get_pwr@l_doub_pwr 00CD  
                      __end_of___fladd 133E                                  ?_main 0070  
       coarse_cap@l_coarse_cap_min_swr 0151                        __end_of___fldiv 2000  
                      __end_of___awdiv 3000                                  _EEADR 0191  
                                STR_10 3009                                  STR_11 30BE  
                                STR_20 304E                                  STR_12 30C0  
                                STR_13 3009                                  STR_21 30AD  
                                STR_30 3000                                  STR_14 30BE  
                                STR_22 30AD                                  STR_15 30C0  
                                STR_23 3095                                  STR_31 3069  
                                STR_16 3009                                  STR_40 3000  
                                STR_32 307B                                  STR_24 3020  
                                STR_33 304E                                  STR_41 3069  
                                STR_25 3057                                  STR_17 303C  
                                STR_34 30BE                                  STR_50 3072  
                                STR_42 307B                                  STR_18 304E  
                                STR_26 300B                                  STR_27 3002  
                                STR_19 303C                                  STR_43 304E  
                                STR_35 3095                                  STR_51 3084  
                                STR_60 3002                                  STR_52 3045  
                                STR_44 30BE                                  STR_36 3020  
                                STR_28 3000                        __end_of___awmod 2E36  
                                STR_29 3002                                  STR_45 3052  
                                STR_37 3057                                  STR_61 3060  
                                STR_53 309D                                  STR_70 3002  
                                STR_62 3002                                  STR_46 3052  
                                STR_38 300B                                  STR_54 30A5  
                                STR_39 3002                                  STR_55 308D  
                                STR_47 3072                                  STR_63 3033  
                                STR_71 302A                                  STR_64 3002  
                                STR_56 3002                                  STR_80 30B2  
                                STR_72 30B5                                  STR_48 3084  
                                STR_65 3060                                  STR_81 30B8  
                                STR_73 30BB                                  STR_57 3060  
                                STR_49 3045                                  STR_66 3002  
                                STR_58 3002                                  STR_82 30B2  
                                STR_74 30B5                                  STR_67 3060  
                                STR_59 3060                                  STR_75 30BB  
                                STR_83 30C6                                  STR_68 3002  
                                STR_76 30B5                                  STR_84 3016  
                                STR_69 3060                                  STR_85 3016  
                                STR_77 30C8                                  STR_86 3001  
                                STR_78 30B2                                  STR_87 3001  
                                STR_79 30B8                                  STR_88 30C4  
                      __end_of___flmul 1597                                  STR_89 30C4  
                      __end_of___fltol 20C5                        ?_interrupt_init 0070  
                                ?_tune 0070                                  u11025 2E0B  
                                u11105 2F15                                  u11045 2E1A  
                                u11055 2E21                                  u12115 0129  
                      ___awdiv@divisor 0073                                  u13005 0B1F  
                                u13030 0B55                                  u13015 0B36  
                                u12400 22CA                                  u13040 0B56  
                                u12145 018B                                  u12235 04FC  
                                u13035 0B51                                  u12500 22F2  
                                u12420 22D2                                  u11365 15EF  
                                u12414 22CC                                  u13230 1992  
                                u12255 0511                                  u12095 0112  
                                u13215 194A                                  u12600 2322  
                                u12440 22DA                                  u13240 1993  
                                u11705 226D                                  u12514 22F4  
                                u12434 22D4                                  u13315 242D  
                                u12700 2E49                                  u12620 232D  
                                u12540 2301                                  u12460 22E2  
                                u11725 2279                                  u11645 2D68  
                                u12285 0573                                  u13325 245A  
                                u13405 2647                                  u12614 2324  
                                u12454 22DC                                  u11735 228D  
                                u11655 2D6F                                  u12800 2E71  
                                u12720 2E51                                  u12640 2338  
                                u12560 230C                                  u12480 22EA  
                                u11745 2299                                  u13265 1931  
                                u14225 2CDF                                  u12634 232F  
                                u12554 2303                                  u12474 22E4  
                                u11835 207B                                  u13275 19A8  
                                u13195 1908                                  u12740 2E59  
                                u12660 2343                                  u12580 2317  
                                u14500 1DEC                                  u11933 08A7  
                                u13285 19B6                                  u13525 27B2  
                                u12654 233A                                  u12574 230E  
                                u12494 22EC                                  u14510 1DED  
                                u14430 1DD1                                  u13535 27C9  
                                u12760 2E61                                  u12680 2E41  
                                u14440 1DD2                                  u11865 2098  
                                u12825 19C4                                  u13545 27E0  
                                u13465 2751                                  u14185 26C7  
                                u12594 2319                                  u14610 1E40  
                                u14530 1DFD                                  u13395 2612  
                                u13555 27F4                                  u13475 2764  
                                u13635 18A3                                  u13715 1070  
                                u14195 26D7                                  u12780 2E69  
                                u14620 1E41                                  u14540 1DFE  
                                u14460 1DDC                                  u12925 1A6B  
                                u13485 276A                                  u13645 18BA  
                                u13805 10FF                                  u14710 1E6C  
                                u14470 1DDD                                  u11895 20AD  
                                u12935 1A7B                                  u13655 18D1  
                                u13575 1842                                  u13735 1086  
                                u14720 1E6D                                  u14640 1E4B  
                                u11985 005F                                  u12945 0A73  
                                u13665 18E5                                  u13585 1855  
                                u13825 1115                                  u13745 1092  
                                u13905 1B9C                                  u14650 1E4C  
                                u13595 185B                                  u13755 109F  
                                u13915 1BAB                                  u12965 0A99  
                                u13845 112B                                  u13765 10B1  
                                u12975 0AD8                                  u13855 1138  
                                u13695 105A                                  u13935 1BC1  
                                u14680 1E5B                                  u12985 0AF8  
                                u13785 10E9                                  u14690 1E5C  
                                u14907 2D94                                  u12995 0B0E  
                                u13875 1B69                                  u14780 2124  
                                u14917 2D0A                                  u14790 2125  
                                u13975 1BE5                                  u13895 1B8E  
                                i1l410 0012                                  i1l929 2FAD  
                                i1l894 2E9E                        ___awdiv@counter 0020  
                                _PORTA 000C                                  _PORTB 000D  
                                _PORTC 000E                                  _TRISA 008C  
                                _TRISB 008D                                  _TRISC 008E  
                    lcd_ind@l_work_int 002E                           lcd_pwr@delta 00E7  
                  ___lmul@multiplicand 0024                           ?_button_proc 0070  
                         _e_c_b_P_High 0131                        __end_of_lcd_ind 1800  
                      __end_of_get_pwr 0A46                        __end_of_lcd_pwr 0CF1  
                      __end_of_lcd_swr 1A85                        __end_of_get_swr 19B9  
                                _g_b_L 016A                                  _inbuf 01C8  
                  uartProcessInput@buf 0128                        __end_of_set_cap 2E7D  
                      __end_of_set_ind 234F                     show_pwr@parm_Power 00BD  
                                status 0003                                  wtemp0 007E  
                    ?_button_proc_test 0070                         lcd_ind@capbits 002D  
                     __end_of_Delay_ms 2D15                          show_pwr@p_ant 00DF  
                          Button@value 0028                     ??_button_proc_test 00ED  
                      __initialization 0016                         lcd_ind@indbits 002C  
                         __end_of_main 1B56              _e_i_tenths_SWR_Auto_delta 01A8  
                         __end_of_tune 1C28                       __end_of_IntToStr 2239  
           uartProcessInput@bitCounter 01C6                           _g_c_Auto_mem 01CD  
                               ??_main 01DA                                 ??_tune 00EF  
                         _g_b_Overload 0136                     Button@active_state 0024  
                            ??_Bcd2Dec 0020                                 _ADCON1 009E  
                               _ADRESH 009C                                 _ADRESL 009B  
                               _EEDATA 0193                                 _EECON1 0195  
                               _EECON2 0196                       ___awdiv@dividend 0075  
                               i1l7006 2EBF                         set_cap@Capbits 0024  
                               i1l6950 2F85                                 i1l6942 2F69  
                               i1l6936 2F62                                 i1l6960 2F99  
                               i1l6956 2F97                                 i1l6980 2EA5  
                               i1l6982 2EAB                                 i1l6984 2E98  
                               i1l6994 2EA4                                 i1l6978 2E92  
                               i1l6988 2EA0                                 i1l9648 2FA2  
                               _FVRCON 0117                                 _OSCCON 0099  
                               _TMR0IE 005D                                 _TMR0IF 005A  
                   _e_c_b_D_correction 016B                       __end_of___xxtofl 23E4  
                         ?_uartGetChar 0070                                 _Button 1005  
              _e_i_watts_max_for_start 01A4                       __end_of_lcd_prep 07FA  
                               ___flge 213E                                 ___bmul 2C9D  
                               ___lmul 2D55                              ??___aldiv 0077  
                               _g_c_SW 013B                              ??___fladd 005C  
                               ___wmul 2D15                              ??___fldiv 0042  
                            ??___awdiv 0077                              ??___awmod 0077  
                            ??___flmul 00A0                              ??___fltol 00B6  
                               _buffer 0220                       ___awdiv@quotient 0022  
                      ___awmod@divisor 0073                       __end_of_pic_init 2DF1  
                               _set_sw 2CAE                   __end_of_eeprom_write 182C  
                      ___awmod@counter 0020                              ??_lcd_ind 002A  
                            ??_lcd_pwr 00E1                              ??_get_pwr 00BD  
                            ??_lcd_swr 002C                              ??_get_swr 014D  
                         __pdataEEDATA 0000                              ?_ADC_Init 0070  
                            ??_set_cap 0022                           ?_uart_wr_str 0073  
                            ??_set_ind 0022                       __end_of_show_pwr 0647  
                     __end_of_sub_tune 115D                           _g_char_p_cnt 0137  
                        _tune_btn_push 2686                           _g_c_step_cap 013A  
                         _g_c_step_ind 0139                             ___flge@ff1 0020  
                           ___flge@ff2 0024                           ___xxtofl@arg 0036  
                         ___xxtofl@exp 0035                           ___xxtofl@val 002C  
coarse_tune@l_coarse_tune_mem_step_cap 015A                __end_of__initialization 004C  
                      eeprom_read@addr 0076                          Bcd2Dec@bcdnum 0077  
                           ___fltol@f1 00B2                    ___bmul@multiplicand 0073  
                           _e_c_K_Mult 01D9                         __pcstackCOMMON 0070  
       sharp_cap@l_sharp_cap_max_range 0154                           __pidataBANK2 07FA  
                         __pidataBANK3 2C7F                           __pidataBANK4 2D30  
                        _g_b_Auto_mode 012E         sharp_cap@l_sharp_cap_min_range 0155  
                           _g_c_C_mult 016E                             _g_c_SW_mem 01CE  
                           _g_c_L_mult 016F            coarse_cap@l_coarse_cap_step 0153  
                       _OPTION_REGbits 0095                             ??_ADC_Init 0073  
                            ?_Delay_ms 0073                _e_i_watts_min_for_start 01A6  
                    eeprom_write@value 0024                       _uartProcessInput 2F5D  
                       ?_tune_btn_push 0070                             _g_b_rready 0138  
                        _g_b_Loss_mode 012B                             __pbssBANK2 0120  
                           __pbssBANK3 01A0                              ?_IntToStr 0024  
                 uartProcessOutput@buf 01C9                      __end_of_Vdelay_ms 2C8C  
                        _g_b_Test_mode 01CB                          _g_b_Soft_tune 01D1  
                              ?_Button 0020                      __end_of__Umul8_16 0820  
                    __end_of_Test_init 25D1                             _cells_init 0CF1  
                           __pmaintext 1A85                                ?___flge 0020  
                              ?___bmul 0073                                ?___lmul 0020  
                              ?___wmul 0023                       ??_interrupt_init 0073  
                           __pintentry 0004                    ADC_Get_Sample@lower 0028  
                       ___lmul@product 0073                    ADC_Get_Sample@upper 0029  
                              ?_set_sw 0070                         set_ind@Indbits 0024  
              _e_i_tenths_init_max_swr 01A2                             _coarse_cap 23E4  
                              u1019_25 2F6F                              ?___xxtofl 002C  
                           ??_Delay_ms 0075                             _g_work_str 0144  
                              _Bcd2Dec 2CD3                  ADC_Get_Sample@channel 0025  
         uartProcessOutput@strPosition 012A                         uartGetChar@ret 0074  
                            ?_lcd_prep 0070                             ??_IntToStr 0027  
                       _e_c_b_C_linear 0134                             _correction 1C28  
                            ?_pic_init 0070                       lcd_pwr@SWR_fixed 00EB  
                       _e_c_b_L_linear 0135                                ___aldiv 2239  
                              ___fladd 115D                              ?_show_pwr 00BD  
                       _e_c_b_L_invert 0133                                ___fldiv 1E87  
                              ___awdiv 2FAE                                ___awmod 2DF1  
                              ___flmul 133E                                ___fltol 2060  
                            ?_sub_tune 0070                                _g_i_PWR 0126  
                              _g_i_SWR 0078                                _g_c_cap 007A  
                    __end_of_atu_reset 2CFE                                _g_c_ind 013C  
                              __ptext1 2DB9                                __ptext2 0003  
                              __ptext3 2C94                                __ptext4 0CF1  
                              __ptext5 2CC0                                __ptext6 2CD3  
                              __ptext7 20C5                                __ptext8 1D15  
                              __ptext9 2C8C                                _lcd_ind 1597  
                              _get_pwr 0820                                _lcd_pwr 0A46  
                              _lcd_swr 19B9                                _get_swr 18F2  
                       _e_c_b_Loss_ind 0130                             ??___xxtofl 0030  
                     ___awmod@dividend 0075                       ___aldiv@dividend 002C  
                              _refresh 01CA                        ??_tune_btn_push 0166  
                              _set_cap 2E36                                _set_ind 22BA  
                              clrloop0 2C74                             ??_lcd_prep 0031  
                 end_of_initialization 004C                          _g_i_Power_old 01D6  
                    __end_of_sharp_cap 2800                      __end_of_sharp_ind 18F2  
                            Delay_ms@i 0076                                init_ram 2C79  
                uartProcessInput@inbit 0072                           _eeprom_write 1804  
                              initloop 2C7A                  uartProcessInput@state 01C7  
                           ??_pic_init 0073                            ?_cells_init 0070  
                         _g_work_str_2 013D                       ___aldiv@quotient 0032  
                           ??_show_pwr 00C1                             ??_sub_tune 015D  
                       _ADC_Get_Sample 2D84                              _PORTBbits 000D  
                          ?_coarse_cap 0070                             _show_reset 2484  
                          ___fladd@grs 0067                          ___xxtofl@sign 0034  
                            _TRISBbits 008D                            ___fldiv@grs 004E  
                          ___fldiv@rem 0047                          ??_coarse_tune 0155  
                     get_pwr@l_Forward 00C9                            _CM1CON0bits 0111  
                          ___flmul@grs 00A7                            ?_correction 0029  
                     get_pwr@l_Reverse 00C5                            _CM2CON0bits 0113  
                        ??_eeprom_read 0073                             lcd_pwr@cnt 00E4  
                            IntToStr@p 0029                             lcd_swr@swr 002A  
                        ??_get_forward 0075                            show_pwr@eff 00D5  
                            Button@pin 0022               __end_of_uartProcessInput 2FAE  
                       __end_of_Button 103E                          ??_get_reverse 0075  
        coarse_tune@l_coarse_tune_step 015B                         __end_of___flge 21B9  
                       __end_of___bmul 2CAE                 __end_of_ADC_Get_Sample 2DB9  
                       __end_of___lmul 2D84                          __pidataEEDATA 0000  
                       __end_of___wmul 2D30                         __end_of_set_sw 2CC0  
                       _g_b_Bypas_mode 012D                    _e_c_tenths_Fid_loss 0132  
                  start_initialization 0016             sharp_ind@l_sharp_ind_count 0159  
                          __end_of_isr 0014             sharp_ind@l_sharp_ind_range 0156  
                          _e_c_ledtype 012F           coarse_cap@l_coarse_cap_count 0154  
                          _g_b_Restart 01CC                            _e_c_num_C_q 016C  
                          _e_c_num_L_q 016D                            _g_i_SWR_old 01D4  
                  __end_of_coarse_tune 2686                            _g_c_cap_mem 01D0  
                             ??_Button 0025                              _Vdelay_ms 2C85  
                             ??___flge 0073                               ??___bmul 0074  
                             ??___lmul 0073                               ??___wmul 0078  
                          _g_c_ind_mem 01CF                    __end_of_eeprom_read 2CD3  
                  IntToStr@loopcounter 0028                      _uartProcessOutput 2E7D  
                            __Umul8_16 0801                              _Test_init 2528  
                          __pdataBANK2 016A                            __pdataBANK3 01D4  
                          __pdataBANK4 0220                        ?_ADC_Get_Sample 0073  
                  __end_of_get_forward 2060                               ??_set_sw 0078  
                   ?_uartProcessOutput 0070                       _button_proc_test 20C5  
                  __end_of_get_reverse 2F10                              ___fladd@a 0058  
                            ___fladd@b 0054                            ?_show_reset 0070  
                            ___fldiv@a 003A                              ___fldiv@b 003E  
                            ___flmul@a 006C                              ___flmul@b 0068  
                        ??_button_proc 0168                            __pbssCOMMON 0078  
                            ___latbits 0003                          __pcstackBANK0 0020  
                        __pcstackBANK1 00A0                          __pcstackBANK2 014D  
                        __pcstackBANK3 01DA                    ??_uartProcessOutput 0070  
                             ?_Bcd2Dec 0070                       eeprom_write@addr 0027  
                            _g_i_P_max 0124                              _g_i_Power 01A0  
                       _initial_eeprom 0000         sharp_ind@l_sharp_ind_max_range 0154  
                            _g_i_swr_a 014B         coarse_tune@l_coarse_tune_count 015C  
       sharp_ind@l_sharp_ind_min_range 0155                             ?_Vdelay_ms 0020  
            __end_of_uartProcessOutput 2EC5                               ?___aldiv 0028  
                             ?___fladd 0054                               ?___fldiv 003A  
                             ?___awdiv 0073               get_reverse@returnReverse 002C  
                             ?___awmod 0073                               ?___flmul 0068  
                             ?___fltol 00B2                             ?__Umul8_16 0073  
                           ?_Test_init 0070                               ?_lcd_ind 0070  
                             ?_get_pwr 0070                               ?_lcd_pwr 0070  
                             ?_lcd_swr 002A                               ?_get_swr 0070  
                            _atu_reset 2CE8                   ADC_Get_Sample@result 0026  
                             _ADC_Init 0003                             set_cap@Cap 0023  
                             ?_set_cap 0070                               ?_set_ind 0070  
                           set_ind@Ind 0023                            _coarse_tune 25D1  
                  __end_of_button_proc 1E87                        ___aldiv@divisor 0028  
                      ___aldiv@counter 0030                         ___wmul@product 0027  
                             _LATAbits 010C                               _LATBbits 010D  
                             _LATCbits 010E                  sub_tune@l_int_cap_mem 0162  
                            clear_ram0 2C73                            _eeprom_read 2CC0  
                        ??_uartGetChar 0073                           ??_cells_init 0029  
                            _sharp_cap 273B                              _sharp_ind 182C  
                          _lcd_pwr$643 00E6                  sub_tune@l_int_ind_mem 0160  
                          _get_forward 2000                            _get_reverse 2EC5  
                            _out_dummy 01D2                  sub_tune@l_int_swr_mem 0164  
                           _ADCON0bits 009D                             _ADCON1bits 009E  
                         ??_coarse_cap 014F                      ___wmul@multiplier 0023  
                           ?_atu_reset 0070                               _WPUBbits 020D  
                        ??_uart_wr_str 0020                               _Delay_ms 2CFE  
                   __end_of_cells_init 1000                  __end_of_tune_btn_push 273B  
                    ___lmul@multiplier 0020                     _g_b_lcd_prep_short 012C  
                      lcd_pwr@peak_cnt 00E5                               _IntToStr 21B9  
                         ??_correction 002B                             _EECON1bits 0195  
                           ?_sharp_cap 0070                     __end_of_coarse_cap 2484  
                           ?_sharp_ind 0070                            ??_Vdelay_ms 0078  
                       _e_i_ms_Rel_Del 0122                      ?_uartProcessInput 0070  
                          ??__Umul8_16 0075                            ??_Test_init 0033  
                  __end_of_uartGetChar 2C94                        correction@input 0029  
           get_forward@returnUIntValue 002C                     ??_uartProcessInput 0070  
                             _e_i_Cap1 01C4                               _e_i_Cap2 01C2  
                             _e_i_Cap3 01C0                               _e_i_Cap4 01BE  
                             _e_i_Cap5 01BC                               _e_i_Cap6 01BA  
                             _e_i_Cap7 01B8                               _e_i_Ind1 01B6  
                             _e_i_Ind2 01B4                               _e_i_Ind3 01B2  
                             _e_i_Ind4 01B0                               _e_i_Ind5 01AE  
                             _e_i_Ind6 01AC                               _e_i_Ind7 01AA  
                           _ANSELAbits 018C                             _ANSELBbits 018D  
                   __end_of_correction 1D15                               ___xxtofl 234F  
     coarse_tune@l_coarse_tune_mem_cap 0159                            _button_proc 1D15  
                    _g_i_SWR_fixed_old 0120       coarse_tune@l_coarse_tune_min_swr 0157  
                             __ptext10 2686                               __ptext11 1B56  
                             __ptext20 0050                               __ptext12 103E  
                             __ptext21 213E                               __ptext13 182C  
                             __ptext30 2D55                               __ptext22 19B9  
                             __ptext14 273B                               __ptext31 2060  
                             __ptext23 0820                               __ptext15 25D1  
                             __ptext40 2CAE                               __ptext32 133E  
                             __ptext24 2EC5                               __ptext16 23E4  
                             __ptext41 0647                               __ptext33 0801  
                             __ptext25 2000                               __ptext17 18F2  
                             __ptext50 2E36                               __ptext42 1597  
                             __ptext34 1E87                               __ptext26 2D84  
                             __ptext18 2484                               __ptext51 2C85  
                             __ptext43 2F10                               __ptext35 115D  
                             __ptext27 1C28                               __ptext19 0A46  
                             __ptext52 2CFE                               __ptext44 21B9  
                             __ptext36 2239                               __ptext28 234F  
                             __ptext45 2DF1                               __ptext37 1005  
                             __ptext29 2D15                               __ptext54 2E7D  
                             __ptext46 2FAE                               __ptext38 2C9D  
                             __ptext55 2F5D                               __ptext47 1804  
                             __ptext39 2528                               __ptext48 2CE8  
                             __ptext49 22BA                               _lcd_prep 0647  
                      _e_c_b_Relay_off 01D3                               _in_dummy 01D8  
                  __end_of_uart_wr_str 2F5D               __end_of_button_proc_test 213E  
                             _pic_init 2DB9             sharp_cap@l_sharp_cap_count 0159  
           sharp_cap@l_sharp_cap_range 0156                       ??_ADC_Get_Sample 0020  
                       IntToStr@number 0024                         IntToStr@output 0026  
         sharp_ind@l_sharp_ind_min_SWR 0157                               _show_pwr 0050  
                             int$flags 007E                               _sub_tune 103E  
                             lcd_pwr@p 00E9                              show_pwr@a 00DB  
                            show_pwr@b 00D7                           set_sw@g_c_SW 0022  
                         ??_show_reset 00ED                            ??_atu_reset 0078  
                           _INTCONbits 000B                             _FVRCONbits 0117  
                       __pstringtext10 3057                         __pstringtext11 3060  
                       __pstringtext20 30AD                         __pstringtext12 3069  
                       __pstringtext21 30B2                         __pstringtext13 3072  
                       __pstringtext30 30C8                         __pstringtext22 30B5  
                       __pstringtext14 307B                         __pstringtext31 0000  
                       __pstringtext23 30B8                         __pstringtext15 3084  
                       __pstringtext24 30BB                         __pstringtext16 308D  
                       __pstringtext25 30BE                         __pstringtext17 3095  
                       __pstringtext26 30C0                         __pstringtext18 309D  
                       __pstringtext27 30C2                         __pstringtext19 30A5  
                       __pstringtext28 30C4                         __pstringtext29 30C6  
                        _show_pwr$1913 00C5                          _show_pwr$1914 00CD  
                        _show_pwr$1915 00C9                          _show_pwr$1916 00D1  
                             intlevel1 0000                     Delay_ms@time_in_ms 0073  
                          _uartGetChar 2C8C                            ??_sharp_cap 014F  
                          ??_sharp_ind 014F                     __end_of_show_reset 2528  
                  Vdelay_ms@time_in_ms 0020                          __pstringtext1 3000  
                        __pstringtext2 300B                          __pstringtext3 3016  
                        __pstringtext4 3020                          __pstringtext5 302A  
                        __pstringtext6 3033                          __pstringtext7 303C  
                        __pstringtext8 3045                          __pstringtext9 304E  
               __Umul8_16@multiplicand 0073                         _interrupt_init 2C94  
                         ___aldiv@sign 0031                            _uart_wr_str 2F10  
                           _WDTCONbits 0097                          ___fladd@signs 0064  
                         ?_coarse_tune 0070                          ?_eeprom_write 0024  
                         ___fladd@aexp 0065                           ___fladd@bexp 0066  
                           _STATUSbits 0003                   __Umul8_16@multiplier 0024  
                         ?_eeprom_read 0070                           ?_get_forward 002A  
                    __Umul8_16@product 0020           uartProcessOutput@chrPosition 0129  
                         uart_wr_str@i 0024  
